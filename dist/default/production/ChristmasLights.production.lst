

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Dec 08 01:22:39 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    36  0000                     
    37                           ; Version 2.20
    38                           ; Generated 05/05/2020 GMT
    39                           ; 
    40                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F14K22 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	smallconst
    73  000200                     __psmallconst:
    74                           	callstack 0
    75  000200  00                 	db	0
    76  000201  0000               	dw	0
    77  000203  0000               	dw	0
    78  000205  0000               	dw	0
    79  000207  0000               	dw	0
    80  000209  0000               	dw	0
    81  00020B  0000               	dw	0
    82  00020D  0000               	dw	0
    83  00020F  0000               	dw	0
    84  000211  0000               	dw	0
    85  000213  0000               	dw	0
    86  000215  0000               	dw	0
    87  000217  0000               	dw	0
    88  000219  0000               	dw	0
    89  00021B  0000               	dw	0
    90  00021D  0000               	dw	0
    91  00021F  0000               	dw	0
    92  000221  0000               	dw	0
    93  000223  0000               	dw	0
    94  000225  0000               	dw	0
    95  000227  0000               	dw	0
    96  000229  0000               	dw	0
    97  00022B                     __end_of_ColorSetB@BitBangWS2812b$F789:
    98                           	callstack 0
    99  00022B                     _ColorSetB:
   100                           	callstack 0
   101  00022B  00FF               	dw	255
   102  00022D  0000               	dw	0
   103  00022F  0000               	dw	0
   104  000231  00FF               	dw	255
   105  000233  00FF               	dw	255
   106  000235  0000               	dw	0
   107  000237  0000               	dw	0
   108  000239  00FF               	dw	255
   109  00023B  0000               	dw	0
   110  00023D  0000               	dw	0
   111  00023F  00FF               	dw	255
   112  000241  00FF               	dw	255
   113  000243  0000               	dw	0
   114  000245  0000               	dw	0
   115  000247  00FF               	dw	255
   116  000249  00FF               	dw	255
   117  00024B  0000               	dw	0
   118  00024D  00FF               	dw	255
   119  00024F  0000               	dw	0
   120  000251  0000               	dw	0
   121  000253  0000               	dw	0
   122  000255                     __end_of_ColorSetB:
   123                           	callstack 0
   124  000255  00                 	db	0	; dummy byte at the end
   125  0000                     
   126                           	psect	nvCOMRAM
   127  000041                     __pnvCOMRAM:
   128                           	callstack 0
   129  000041                     _ADC1_InterruptHandler:
   130                           	callstack 0
   131  000041                     	ds	2
   132  0000                     _PORTAbits	set	3968
   133  0000                     _LATCbits	set	3979
   134  0000                     _LATAbits	set	3977
   135  0000                     _RCONbits	set	4048
   136  0000                     _PIR1bits	set	3998
   137  0000                     _ADCON0bits	set	4034
   138  0000                     _PIE1bits	set	3997
   139  0000                     _ADCON0	set	4034
   140  0000                     _ADRESH	set	4036
   141  0000                     _ADRESL	set	4035
   142  0000                     _ADCON2	set	4032
   143  0000                     _ADCON1	set	4033
   144  0000                     _INTCONbits	set	4082
   145  0000                     _INTCON2bits	set	4081
   146  0000                     _WPUA	set	3959
   147  0000                     _WPUB	set	3960
   148  0000                     _ANSELH	set	3967
   149  0000                     _ANSEL	set	3966
   150  0000                     _TRISC	set	3988
   151  0000                     _TRISB	set	3987
   152  0000                     _TRISA	set	3986
   153  0000                     _LATC	set	3979
   154  0000                     _LATB	set	3978
   155  0000                     _LATA	set	3977
   156  0000                     _OSCTUNE	set	3995
   157  0000                     _OSCCON2	set	4050
   158  0000                     _OSCCON	set	4051
   159  0000                     _GIE	set	32663
   160                           
   161                           ; #config settings
   162                           
   163                           	psect	cinit
   164  000CE8                     __pcinit:
   165                           	callstack 0
   166  000CE8                     start_initialization:
   167                           	callstack 0
   168  000CE8                     __initialization:
   169                           	callstack 0
   170  000CE8                     end_of_initialization:
   171                           	callstack 0
   172  000CE8                     __end_of__initialization:
   173                           	callstack 0
   174  000CE8  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   175  000CEA  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   176  000CEC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   177  000CEE  6EF8               	movwf	tblptru,c
   178  000CF0  0100               	movlb	0
   179  000CF2  EF67  F003         	goto	_main	;jump to C main() function
   180                           
   181                           	psect	cstackCOMRAM
   182  000001                     __pcstackCOMRAM:
   183                           	callstack 0
   184  000001                     ??_INTERRUPT_InterruptManager:
   185  000001                     
   186                           ; 1 bytes @ 0x0
   187  000001                     	ds	2
   188  000003                     ??_ADC1_SelectChannel:
   189  000003                     ?_ADC1_GetConversion:
   190                           	callstack 0
   191  000003                     ADC1_SetInterruptHandler@InterruptHandler:
   192                           	callstack 0
   193  000003                     WS_Write@A:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x2
   197  000003                     	ds	1
   198  000004                     ADC1_SelectChannel@channel:
   199                           	callstack 0
   200                           
   201                           ; 1 bytes @ 0x3
   202  000004                     	ds	1
   203  000005                     ??_ADC1_GetConversion:
   204  000005                     WS_Word@A:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x4
   208  000005                     	ds	2
   209  000007                     ADC1_GetConversion@channel:
   210                           	callstack 0
   211  000007                     WS_Word@B:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0x6
   215  000007                     	ds	1
   216  000008                     ?___wmul:
   217                           	callstack 0
   218  000008                     ___wmul@multiplier:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x7
   222  000008                     	ds	1
   223  000009                     WS_Word@C:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x8
   227  000009                     	ds	1
   228  00000A                     ___wmul@multiplicand:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0x9
   232  00000A                     	ds	1
   233  00000B                     ??_WS_Word:
   234                           
   235                           ; 1 bytes @ 0xA
   236  00000B                     	ds	1
   237  00000C                     ___wmul@product:
   238                           	callstack 0
   239                           
   240                           ; 2 bytes @ 0xB
   241  00000C                     	ds	2
   242  00000E                     ?___lwdiv:
   243                           	callstack 0
   244  00000E                     WS_Word@x:
   245                           	callstack 0
   246  00000E                     ___lwdiv@dividend:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0xD
   250  00000E                     	ds	2
   251  000010                     WS_Word@x_591:
   252                           	callstack 0
   253  000010                     ___lwdiv@divisor:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0xF
   257  000010                     	ds	2
   258  000012                     WS_Word@x_592:
   259                           	callstack 0
   260  000012                     ___lwdiv@quotient:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0x11
   264  000012                     	ds	2
   265  000014                     ___lwdiv@counter:
   266                           	callstack 0
   267  000014                     WS_Word@Bx:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x13
   271  000014                     	ds	2
   272  000016                     WS_Word@i:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x15
   276  000016                     	ds	2
   277  000018                     WS_dim@A:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0x17
   281  000018                     	ds	2
   282  00001A                     WS_dim@B:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x19
   286  00001A                     	ds	2
   287  00001C                     WS_dim@C:
   288                           	callstack 0
   289                           
   290                           ; 2 bytes @ 0x1B
   291  00001C                     	ds	2
   292  00001E                     WS_dim@brightness:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0x1D
   296  00001E                     	ds	2
   297  000020                     ??_WS_dim:
   298                           
   299                           ; 1 bytes @ 0x1F
   300  000020                     	ds	1
   301  000021                     WS_dim@f:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0x20
   305  000021                     	ds	2
   306  000023                     WS_RYGCBM@length:
   307                           	callstack 0
   308  000023                     WSWalk@length:
   309                           	callstack 0
   310                           
   311                           ; 2 bytes @ 0x22
   312  000023                     	ds	2
   313  000025                     WS_RYGCBM@brightness:
   314                           	callstack 0
   315  000025                     WSWalk@brightness:
   316                           	callstack 0
   317                           
   318                           ; 2 bytes @ 0x24
   319  000025                     	ds	2
   320  000027                     ??_WS_RYGCBM:
   321  000027                     ??_WSWalk:
   322                           
   323                           ; 1 bytes @ 0x26
   324  000027                     	ds	2
   325  000029                     _WSWalk$1464:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x28
   329  000029                     	ds	2
   330  00002B                     _WSWalk$1465:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x2A
   334  00002B                     	ds	1
   335  00002C                     WS_RYGCBM@b:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x2B
   339  00002C                     	ds	1
   340  00002D                     _WSWalk$1466:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x2C
   344  00002D                     	ds	1
   345  00002E                     WSSlow@lengh:
   346                           	callstack 0
   347  00002E                     WSTest@length:
   348                           	callstack 0
   349                           
   350                           ; 2 bytes @ 0x2D
   351  00002E                     	ds	1
   352  00002F                     WSWalk@b:
   353                           	callstack 0
   354                           
   355                           ; 2 bytes @ 0x2E
   356  00002F                     	ds	1
   357  000030                     WSSlow@maxBrightness:
   358                           	callstack 0
   359  000030                     WSTest@brightness:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x2F
   363  000030                     	ds	1
   364  000031                     WSWalk@a:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0x30
   368  000031                     	ds	1
   369  000032                     ??_WSTest:
   370  000032                     WSSlow@minBrightness:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0x31
   374  000032                     	ds	1
   375  000033                     WSWalk@i:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x32
   379  000033                     	ds	1
   380  000034                     ??_WSSlow:
   381  000034                     WSTest@i:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x33
   385  000034                     	ds	1
   386  000035                     WSSlow@i:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x34
   390  000035                     	ds	2
   391  000037                     WSSlow@i_606:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x36
   395  000037                     	ds	2
   396  000039                     ??_main:
   397                           
   398                           ; 1 bytes @ 0x38
   399  000039                     	ds	2
   400  00003B                     main@tmp:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x3A
   404  00003B                     	ds	2
   405  00003D                     main@brightness:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x3C
   409  00003D                     	ds	2
   410  00003F                     main@i:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x3E
   414  00003F                     	ds	2
   415                           
   416 ;;
   417 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   418 ;;
   419 ;; *************** function _main *****************
   420 ;; Defined at:
   421 ;;		line 57 in file "main.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;		None
   424 ;; Auto vars:     Size  Location     Type
   425 ;;  brightness      2   60[COMRAM] int 
   426 ;;  i               2   62[COMRAM] int 
   427 ;;  tmp             2   58[COMRAM] unsigned short 
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMRAM   BANK0   BANK1
   437 ;;      Params:         0       0       0
   438 ;;      Locals:         6       0       0
   439 ;;      Temps:          2       0       0
   440 ;;      Totals:         8       0       0
   441 ;;Total ram usage:        8 bytes
   442 ;; Hardware stack levels required when called:    8
   443 ;; This function calls:
   444 ;;		_ADC1_GetConversion
   445 ;;		_ADC1_Initialize
   446 ;;		_ADC1_SelectChannel
   447 ;;		_SYSTEM_Initialize
   448 ;;		_WSSlow
   449 ;;		_WSTest
   450 ;;		_WSWalk
   451 ;;		___lwdiv
   452 ;;		___wmul
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text0
   459  0006CE                     __ptext0:
   460                           	callstack 0
   461  0006CE                     _main:
   462                           	callstack 23
   463  0006CE                     
   464                           ;main.c: 60:     SYSTEM_Initialize();
   465  0006CE  EC6B  F006         	call	_SYSTEM_Initialize	;wreg free
   466  0006D2                     
   467                           ;main.c: 61:     LATCbits.LATC1 = 1;
   468  0006D2  828B               	bsf	139,1,c	;volatile
   469                           
   470                           ;main.c: 62:     ADC1_Initialize();
   471  0006D4  EC4D  F006         	call	_ADC1_Initialize	;wreg free
   472                           
   473                           ;main.c: 63:     ADC1_SelectChannel(channel_AN10);
   474  0006D8  0E0A               	movlw	10
   475  0006DA  EC5F  F006         	call	_ADC1_SelectChannel
   476  0006DE                     
   477                           ;main.c: 82:     int i=0;
   478  0006DE  0E00               	movlw	0
   479  0006E0  6E40               	movwf	(main@i+1)^0,c
   480  0006E2  0E00               	movlw	0
   481  0006E4  6E3F               	movwf	main@i^0,c
   482  0006E6                     l1698:
   483                           
   484                           ;main.c: 84:     {;main.c: 85:         tmp = ADC1_GetConversion(channel_AN10) * 51/1023;
   485  0006E6  0E0A               	movlw	10
   486  0006E8  ECDC  F005         	call	_ADC1_GetConversion
   487  0006EC  C003  F008         	movff	?_ADC1_GetConversion,___wmul@multiplier
   488  0006F0  C004  F009         	movff	?_ADC1_GetConversion+1,___wmul@multiplier+1
   489  0006F4  0E00               	movlw	0
   490  0006F6  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
   491  0006F8  0E33               	movlw	51
   492  0006FA  6E0A               	movwf	___wmul@multiplicand^0,c
   493  0006FC  EC27  F006         	call	___wmul	;wreg free
   494  000700  C008  F00E         	movff	?___wmul,___lwdiv@dividend
   495  000704  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
   496  000708  0E03               	movlw	3
   497  00070A  6E11               	movwf	(___lwdiv@divisor+1)^0,c
   498  00070C  6810               	setf	___lwdiv@divisor^0,c
   499  00070E  ECA2  F005         	call	___lwdiv	;wreg free
   500  000712  C00E  F03B         	movff	?___lwdiv,main@tmp
   501  000716  C00F  F03C         	movff	?___lwdiv+1,main@tmp+1
   502  00071A                     
   503                           ;main.c: 87:         int brightness = (int) tmp;
   504  00071A  C03B  F03D         	movff	main@tmp,main@brightness
   505  00071E  C03C  F03E         	movff	main@tmp+1,main@brightness+1
   506  000722                     
   507                           ;main.c: 89:         if (PORTAbits.RA5 == 0) {
   508  000722  BA80               	btfsc	128,5,c	;volatile
   509  000724  EF96  F003         	goto	u871
   510  000728  EF98  F003         	goto	u870
   511  00072C                     u871:
   512  00072C  EFAC  F003         	goto	l261
   513  000730                     u870:
   514  000730                     
   515                           ;main.c: 90:             _delay((unsigned long)((10)*(32000000/4000.0)));
   516  000730  0E68               	movlw	104
   517  000732  6E39               	movwf	??_main^0,c
   518  000734  0EE4               	movlw	228
   519  000736                     u927:
   520  000736  2EE8               	decfsz	wreg,f,c
   521  000738  D7FE               	bra	u927
   522  00073A  2E39               	decfsz	??_main^0,f,c
   523  00073C  D7FC               	bra	u927
   524  00073E  D000               	nop2	
   525  000740                     
   526                           ;main.c: 91:             if (PORTAbits.RA5 == 0) {
   527  000740  BA80               	btfsc	128,5,c	;volatile
   528  000742  EFA5  F003         	goto	u881
   529  000746  EFA7  F003         	goto	u880
   530  00074A                     u881:
   531  00074A  EFAD  F003         	goto	l263
   532  00074E                     u880:
   533  00074E                     
   534                           ;main.c: 92:                 LATCbits.LATC0 = 1;
   535  00074E  808B               	bsf	139,0,c	;volatile
   536  000750                     
   537                           ;main.c: 93:                 i++;
   538  000750  4A3F               	infsnz	main@i^0,f,c
   539  000752  2A40               	incf	(main@i+1)^0,f,c
   540  000754  EFAD  F003         	goto	l263
   541  000758                     l261:
   542                           
   543                           ;main.c: 97:             LATCbits.LATC0 = 0;
   544  000758  908B               	bcf	139,0,c	;volatile
   545  00075A                     l263:
   546                           
   547                           ;main.c: 98:         LATCbits.LATC1 = 0;
   548  00075A  928B               	bcf	139,1,c	;volatile
   549  00075C                     
   550                           ;main.c: 99:         if( !i )
   551  00075C  503F               	movf	main@i^0,w,c
   552  00075E  1040               	iorwf	(main@i+1)^0,w,c
   553  000760  A4D8               	btfss	status,2,c
   554  000762  EFB5  F003         	goto	u891
   555  000766  EFB7  F003         	goto	u890
   556  00076A                     u891:
   557  00076A  EFC3  F003         	goto	l1716
   558  00076E                     u890:
   559  00076E                     
   560                           ;main.c: 100:         {;main.c: 101:             WSWalk(50,brightness);
   561  00076E  0E00               	movlw	0
   562  000770  6E24               	movwf	(WSWalk@length+1)^0,c
   563  000772  0E32               	movlw	50
   564  000774  6E23               	movwf	WSWalk@length^0,c
   565  000776  C03D  F025         	movff	main@brightness,WSWalk@brightness
   566  00077A  C03E  F026         	movff	main@brightness+1,WSWalk@brightness+1
   567  00077E  EC93  F002         	call	_WSWalk	;wreg free
   568                           
   569                           ;main.c: 102:         }
   570  000782  EF10  F004         	goto	l1734
   571  000786                     l1716:
   572  000786  043F               	decf	main@i^0,w,c
   573  000788  1040               	iorwf	(main@i+1)^0,w,c
   574  00078A  A4D8               	btfss	status,2,c
   575  00078C  EFCA  F003         	goto	u901
   576  000790  EFCC  F003         	goto	u900
   577  000794                     u901:
   578  000794  EFDC  F003         	goto	l1720
   579  000798                     u900:
   580  000798                     
   581                           ;main.c: 104:         {;main.c: 105:             WSSlow(100, brightness, 3);
   582  000798  0E00               	movlw	0
   583  00079A  6E2F               	movwf	(WSSlow@lengh+1)^0,c
   584  00079C  0E64               	movlw	100
   585  00079E  6E2E               	movwf	WSSlow@lengh^0,c
   586  0007A0  C03D  F030         	movff	main@brightness,WSSlow@maxBrightness
   587  0007A4  C03E  F031         	movff	main@brightness+1,WSSlow@maxBrightness+1
   588  0007A8  0E00               	movlw	0
   589  0007AA  6E33               	movwf	(WSSlow@minBrightness+1)^0,c
   590  0007AC  0E03               	movlw	3
   591  0007AE  6E32               	movwf	WSSlow@minBrightness^0,c
   592  0007B0  EC01  F005         	call	_WSSlow	;wreg free
   593                           
   594                           ;main.c: 106:         }
   595  0007B4  EF10  F004         	goto	l1734
   596  0007B8                     l1720:
   597  0007B8  0E02               	movlw	2
   598  0007BA  183F               	xorwf	main@i^0,w,c
   599  0007BC  1040               	iorwf	(main@i+1)^0,w,c
   600  0007BE  A4D8               	btfss	status,2,c
   601  0007C0  EFE4  F003         	goto	u911
   602  0007C4  EFE6  F003         	goto	u910
   603  0007C8                     u911:
   604  0007C8  EFF2  F003         	goto	l1724
   605  0007CC                     u910:
   606  0007CC                     
   607                           ;main.c: 108:         {;main.c: 109:             WSTest(100,brightness);
   608  0007CC  0E00               	movlw	0
   609  0007CE  6E2F               	movwf	(WSTest@length+1)^0,c
   610  0007D0  0E64               	movlw	100
   611  0007D2  6E2E               	movwf	WSTest@length^0,c
   612  0007D4  C03D  F030         	movff	main@brightness,WSTest@brightness
   613  0007D8  C03E  F031         	movff	main@brightness+1,WSTest@brightness+1
   614  0007DC  EC55  F005         	call	_WSTest	;wreg free
   615                           
   616                           ;main.c: 110:         }
   617  0007E0  EF10  F004         	goto	l1734
   618  0007E4                     l1724:
   619                           
   620                           ;main.c: 112:         {;main.c: 113:             i = 0;
   621  0007E4  0E00               	movlw	0
   622  0007E6  6E40               	movwf	(main@i+1)^0,c
   623  0007E8  0E00               	movlw	0
   624  0007EA  6E3F               	movwf	main@i^0,c
   625  0007EC                     
   626                           ;main.c: 114:             LATCbits.LATC1 = 1;
   627  0007EC  828B               	bsf	139,1,c	;volatile
   628  0007EE                     
   629                           ;main.c: 115:             _delay((unsigned long)((255)*(32000000/4000.0)));
   630  0007EE  0E0B               	movlw	11
   631  0007F0  6E3A               	movwf	(??_main+1)^0,c
   632  0007F2  0E5A               	movlw	90
   633  0007F4  6E39               	movwf	??_main^0,c
   634  0007F6  0E50               	movlw	80
   635  0007F8                     u937:
   636  0007F8  2EE8               	decfsz	wreg,f,c
   637  0007FA  D7FE               	bra	u937
   638  0007FC  2E39               	decfsz	??_main^0,f,c
   639  0007FE  D7FC               	bra	u937
   640  000800  2E3A               	decfsz	(??_main+1)^0,f,c
   641  000802  D7FA               	bra	u937
   642  000804  D000               	nop2	
   643  000806                     
   644                           ;main.c: 116:             LATCbits.LATC1 = 0;
   645  000806  928B               	bcf	139,1,c	;volatile
   646  000808                     
   647                           ;main.c: 117:             _delay((unsigned long)((255)*(32000000/4000.0)));
   648  000808  0E0B               	movlw	11
   649  00080A  6E3A               	movwf	(??_main+1)^0,c
   650  00080C  0E5A               	movlw	90
   651  00080E  6E39               	movwf	??_main^0,c
   652  000810  0E50               	movlw	80
   653  000812                     u947:
   654  000812  2EE8               	decfsz	wreg,f,c
   655  000814  D7FE               	bra	u947
   656  000816  2E39               	decfsz	??_main^0,f,c
   657  000818  D7FC               	bra	u947
   658  00081A  2E3A               	decfsz	(??_main+1)^0,f,c
   659  00081C  D7FA               	bra	u947
   660  00081E  D000               	nop2	
   661  000820                     l1734:
   662                           
   663                           ;main.c: 119:         LATCbits.LATC1 = 1;
   664  000820  828B               	bsf	139,1,c	;volatile
   665  000822  EF73  F003         	goto	l1698
   666  000826  EF26  F000         	goto	start
   667  00082A                     __end_of_main:
   668                           	callstack 0
   669                           
   670 ;; *************** function ___lwdiv *****************
   671 ;; Defined at:
   672 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwdiv.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;  dividend        2   13[COMRAM] unsigned int 
   675 ;;  divisor         2   15[COMRAM] unsigned int 
   676 ;; Auto vars:     Size  Location     Type
   677 ;;  quotient        2   17[COMRAM] unsigned int 
   678 ;;  counter         1   19[COMRAM] unsigned char 
   679 ;; Return value:  Size  Location     Type
   680 ;;                  2   13[COMRAM] unsigned int 
   681 ;; Registers used:
   682 ;;		wreg, status,2, status,0
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMRAM   BANK0   BANK1
   688 ;;      Params:         4       0       0
   689 ;;      Locals:         3       0       0
   690 ;;      Temps:          0       0       0
   691 ;;      Totals:         7       0       0
   692 ;;Total ram usage:        7 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; Hardware stack levels required when called:    3
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_main
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text1
   703  000B44                     __ptext1:
   704                           	callstack 0
   705  000B44                     ___lwdiv:
   706                           	callstack 27
   707  000B44  0E00               	movlw	0
   708  000B46  6E13               	movwf	(___lwdiv@quotient+1)^0,c
   709  000B48  0E00               	movlw	0
   710  000B4A  6E12               	movwf	___lwdiv@quotient^0,c
   711  000B4C  5010               	movf	___lwdiv@divisor^0,w,c
   712  000B4E  1011               	iorwf	(___lwdiv@divisor+1)^0,w,c
   713  000B50  B4D8               	btfsc	status,2,c
   714  000B52  EFAD  F005         	goto	u771
   715  000B56  EFAF  F005         	goto	u770
   716  000B5A                     u771:
   717  000B5A  EFD7  F005         	goto	l766
   718  000B5E                     u770:
   719  000B5E  0E01               	movlw	1
   720  000B60  6E14               	movwf	___lwdiv@counter^0,c
   721  000B62  EFB7  F005         	goto	l1576
   722  000B66                     l1574:
   723  000B66  90D8               	bcf	status,0,c
   724  000B68  3610               	rlcf	___lwdiv@divisor^0,f,c
   725  000B6A  3611               	rlcf	(___lwdiv@divisor+1)^0,f,c
   726  000B6C  2A14               	incf	___lwdiv@counter^0,f,c
   727  000B6E                     l1576:
   728  000B6E  AE11               	btfss	(___lwdiv@divisor+1)^0,7,c
   729  000B70  EFBC  F005         	goto	u781
   730  000B74  EFBE  F005         	goto	u780
   731  000B78                     u781:
   732  000B78  EFB3  F005         	goto	l1574
   733  000B7C                     u780:
   734  000B7C                     l1578:
   735  000B7C  90D8               	bcf	status,0,c
   736  000B7E  3612               	rlcf	___lwdiv@quotient^0,f,c
   737  000B80  3613               	rlcf	(___lwdiv@quotient+1)^0,f,c
   738  000B82  5010               	movf	___lwdiv@divisor^0,w,c
   739  000B84  5C0E               	subwf	___lwdiv@dividend^0,w,c
   740  000B86  5011               	movf	(___lwdiv@divisor+1)^0,w,c
   741  000B88  580F               	subwfb	(___lwdiv@dividend+1)^0,w,c
   742  000B8A  A0D8               	btfss	status,0,c
   743  000B8C  EFCA  F005         	goto	u791
   744  000B90  EFCC  F005         	goto	u790
   745  000B94                     u791:
   746  000B94  EFD1  F005         	goto	l1586
   747  000B98                     u790:
   748  000B98  5010               	movf	___lwdiv@divisor^0,w,c
   749  000B9A  5E0E               	subwf	___lwdiv@dividend^0,f,c
   750  000B9C  5011               	movf	(___lwdiv@divisor+1)^0,w,c
   751  000B9E  5A0F               	subwfb	(___lwdiv@dividend+1)^0,f,c
   752  000BA0  8012               	bsf	___lwdiv@quotient^0,0,c
   753  000BA2                     l1586:
   754  000BA2  90D8               	bcf	status,0,c
   755  000BA4  3211               	rrcf	(___lwdiv@divisor+1)^0,f,c
   756  000BA6  3210               	rrcf	___lwdiv@divisor^0,f,c
   757  000BA8  2E14               	decfsz	___lwdiv@counter^0,f,c
   758  000BAA  EFBE  F005         	goto	l1578
   759  000BAE                     l766:
   760  000BAE  C012  F00E         	movff	___lwdiv@quotient,?___lwdiv
   761  000BB2  C013  F00F         	movff	___lwdiv@quotient+1,?___lwdiv+1
   762  000BB6  0012               	return		;funcret
   763  000BB8                     __end_of___lwdiv:
   764                           	callstack 0
   765                           
   766 ;; *************** function _WSWalk *****************
   767 ;; Defined at:
   768 ;;		line 157 in file "WS2812b/BitBangWS2812b.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  length          2   34[COMRAM] int 
   771 ;;  brightness      2   36[COMRAM] int 
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  i               2   50[COMRAM] int 
   774 ;;  a               2   48[COMRAM] int 
   775 ;;  b               2   46[COMRAM] int 
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1
   785 ;;      Params:         4       0       0
   786 ;;      Locals:        12       0       0
   787 ;;      Temps:          2       0       0
   788 ;;      Totals:        18       0       0
   789 ;;Total ram usage:       18 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    6
   792 ;; This function calls:
   793 ;;		_WS_dim
   794 ;;		___wmul
   795 ;; This function is called by:
   796 ;;		_main
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text2
   801  000526                     __ptext2:
   802                           	callstack 0
   803  000526                     _WSWalk:
   804                           	callstack 24
   805  000526                     
   806                           ;WS2812b/BitBangWS2812b.c: 157: void WSWalk(int length, int brightness);WS2812b/BitBangW
      +                          S2812b.c: 158: {;WS2812b/BitBangWS2812b.c: 159:     for( int b = 0; b<=5; b++ )
   807  000526  0E00               	movlw	0
   808  000528  6E30               	movwf	(WSWalk@b+1)^0,c
   809  00052A  0E00               	movlw	0
   810  00052C  6E2F               	movwf	WSWalk@b^0,c
   811  00052E                     l1536:
   812                           
   813                           ;WS2812b/BitBangWS2812b.c: 160:     {;WS2812b/BitBangWS2812b.c: 161:         int a = 0;
   814  00052E  0E00               	movlw	0
   815  000530  6E32               	movwf	(WSWalk@a+1)^0,c
   816  000532  0E00               	movlw	0
   817  000534  6E31               	movwf	WSWalk@a^0,c
   818                           
   819                           ;WS2812b/BitBangWS2812b.c: 162:         while( a <= length )
   820  000536  EF2A  F003         	goto	l1562
   821  00053A                     l1538:
   822                           
   823                           ;WS2812b/BitBangWS2812b.c: 163:         {;WS2812b/BitBangWS2812b.c: 164:             for
      +                          ( int i = 0; i<=5; i++)
   824  00053A  0E00               	movlw	0
   825  00053C  6E34               	movwf	(WSWalk@i+1)^0,c
   826  00053E  0E00               	movlw	0
   827  000540  6E33               	movwf	WSWalk@i^0,c
   828  000542                     l1544:
   829                           
   830                           ;WS2812b/BitBangWS2812b.c: 165:             {;WS2812b/BitBangWS2812b.c: 166:            
      +                               if(a == 0)
   831  000542  5031               	movf	WSWalk@a^0,w,c
   832  000544  1032               	iorwf	(WSWalk@a+1)^0,w,c
   833  000546  A4D8               	btfss	status,2,c
   834  000548  EFA8  F002         	goto	u721
   835  00054C  EFAA  F002         	goto	u720
   836  000550                     u721:
   837  000550  EFAE  F002         	goto	l1548
   838  000554                     u720:
   839  000554                     
   840                           ;WS2812b/BitBangWS2812b.c: 167:                 {;WS2812b/BitBangWS2812b.c: 168:        
      +                                       i = b;
   841  000554  C02F  F033         	movff	WSWalk@b,WSWalk@i
   842  000558  C030  F034         	movff	WSWalk@b+1,WSWalk@i+1
   843  00055C                     l1548:
   844                           
   845                           ;WS2812b/BitBangWS2812b.c: 170:                 WS_dim(
   846  00055C  C033  F008         	movff	WSWalk@i,___wmul@multiplier
   847  000560  C034  F009         	movff	WSWalk@i+1,___wmul@multiplier+1
   848  000564  0E00               	movlw	0
   849  000566  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
   850  000568  0E06               	movlw	6
   851  00056A  6E0A               	movwf	___wmul@multiplicand^0,c
   852  00056C  EC27  F006         	call	___wmul	;wreg free
   853  000570  0E2B               	movlw	low _ColorSetB
   854  000572  2408               	addwf	?___wmul^0,w,c
   855  000574  6EF6               	movwf	tblptrl,c
   856  000576  0E02               	movlw	high _ColorSetB
   857  000578  2009               	addwfc	(?___wmul+1)^0,w,c
   858  00057A  6EF7               	movwf	tblptrh,c
   859  00057C                     	if	0	;There are less than 3 active tblptr bytes
   860  00057C                     	endif
   861  00057C  0009               	tblrd		*+
   862  00057E  CFF5 F029          	movff	tablat,_WSWalk$1464
   863  000582  000A               	tblrd		*-
   864  000584  CFF5 F02A          	movff	tablat,_WSWalk$1464+1
   865                           
   866                           ;WS2812b/BitBangWS2812b.c: 170:                 WS_dim(
   867  000588  C033  F008         	movff	WSWalk@i,___wmul@multiplier
   868  00058C  C034  F009         	movff	WSWalk@i+1,___wmul@multiplier+1
   869  000590  0E00               	movlw	0
   870  000592  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
   871  000594  0E06               	movlw	6
   872  000596  6E0A               	movwf	___wmul@multiplicand^0,c
   873  000598  EC27  F006         	call	___wmul	;wreg free
   874  00059C  0E02               	movlw	2
   875  00059E  2608               	addwf	?___wmul^0,f,c
   876  0005A0  0E00               	movlw	0
   877  0005A2  2209               	addwfc	(?___wmul+1)^0,f,c
   878  0005A4  0E2B               	movlw	low _ColorSetB
   879  0005A6  2408               	addwf	?___wmul^0,w,c
   880  0005A8  6EF6               	movwf	tblptrl,c
   881  0005AA  0E02               	movlw	high _ColorSetB
   882  0005AC  2009               	addwfc	(?___wmul+1)^0,w,c
   883  0005AE  6EF7               	movwf	tblptrh,c
   884  0005B0                     	if	0	;There are less than 3 active tblptr bytes
   885  0005B0                     	endif
   886  0005B0  0009               	tblrd		*+
   887  0005B2  CFF5 F02B          	movff	tablat,_WSWalk$1465
   888  0005B6  000A               	tblrd		*-
   889  0005B8  CFF5 F02C          	movff	tablat,_WSWalk$1465+1
   890                           
   891                           ;WS2812b/BitBangWS2812b.c: 170:                 WS_dim(
   892  0005BC  C033  F008         	movff	WSWalk@i,___wmul@multiplier
   893  0005C0  C034  F009         	movff	WSWalk@i+1,___wmul@multiplier+1
   894  0005C4  0E00               	movlw	0
   895  0005C6  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
   896  0005C8  0E06               	movlw	6
   897  0005CA  6E0A               	movwf	___wmul@multiplicand^0,c
   898  0005CC  EC27  F006         	call	___wmul	;wreg free
   899  0005D0  0E04               	movlw	4
   900  0005D2  2608               	addwf	?___wmul^0,f,c
   901  0005D4  0E00               	movlw	0
   902  0005D6  2209               	addwfc	(?___wmul+1)^0,f,c
   903  0005D8  0E2B               	movlw	low _ColorSetB
   904  0005DA  2408               	addwf	?___wmul^0,w,c
   905  0005DC  6EF6               	movwf	tblptrl,c
   906  0005DE  0E02               	movlw	high _ColorSetB
   907  0005E0  2009               	addwfc	(?___wmul+1)^0,w,c
   908  0005E2  6EF7               	movwf	tblptrh,c
   909  0005E4                     	if	0	;There are less than 3 active tblptr bytes
   910  0005E4                     	endif
   911  0005E4  0009               	tblrd		*+
   912  0005E6  CFF5 F02D          	movff	tablat,_WSWalk$1466
   913  0005EA  000A               	tblrd		*-
   914  0005EC  CFF5 F02E          	movff	tablat,_WSWalk$1466+1
   915  0005F0                     
   916                           ;WS2812b/BitBangWS2812b.c: 170:                 WS_dim(
   917  0005F0  C029  F018         	movff	_WSWalk$1464,WS_dim@A
   918  0005F4  C02A  F019         	movff	_WSWalk$1464+1,WS_dim@A+1
   919  0005F8  C02B  F01A         	movff	_WSWalk$1465,WS_dim@B
   920  0005FC  C02C  F01B         	movff	_WSWalk$1465+1,WS_dim@B+1
   921  000600  C02D  F01C         	movff	_WSWalk$1466,WS_dim@C
   922  000604  C02E  F01D         	movff	_WSWalk$1466+1,WS_dim@C+1
   923  000608  C025  F01E         	movff	WSWalk@brightness,WS_dim@brightness
   924  00060C  C026  F01F         	movff	WSWalk@brightness+1,WS_dim@brightness+1
   925  000610  ECA3  F004         	call	_WS_dim	;wreg free
   926  000614                     
   927                           ;WS2812b/BitBangWS2812b.c: 176:                 a++;
   928  000614  4A31               	infsnz	WSWalk@a^0,f,c
   929  000616  2A32               	incf	(WSWalk@a+1)^0,f,c
   930  000618                     
   931                           ;WS2812b/BitBangWS2812b.c: 177:                 if(a == length){ break;}
   932  000618  5023               	movf	WSWalk@length^0,w,c
   933  00061A  1831               	xorwf	WSWalk@a^0,w,c
   934  00061C  E107               	bnz	u731
   935  00061E  5024               	movf	(WSWalk@length+1)^0,w,c
   936  000620  1832               	xorwf	(WSWalk@a+1)^0,w,c
   937  000622  A4D8               	btfss	status,2,c
   938  000624  EF16  F003         	goto	u731
   939  000628  EF18  F003         	goto	u730
   940  00062C                     u731:
   941  00062C  EF1A  F003         	goto	l1558
   942  000630                     u730:
   943  000630  EF2A  F003         	goto	l1562
   944  000634                     l1558:
   945                           
   946                           ;WS2812b/BitBangWS2812b.c: 178:             }
   947  000634  4A33               	infsnz	WSWalk@i^0,f,c
   948  000636  2A34               	incf	(WSWalk@i+1)^0,f,c
   949  000638  BE34               	btfsc	(WSWalk@i+1)^0,7,c
   950  00063A  EF28  F003         	goto	u741
   951  00063E  5034               	movf	(WSWalk@i+1)^0,w,c
   952  000640  E109               	bnz	u740
   953  000642  0E06               	movlw	6
   954  000644  5C33               	subwf	WSWalk@i^0,w,c
   955  000646  A0D8               	btfss	status,0,c
   956  000648  EF28  F003         	goto	u741
   957  00064C  EF2A  F003         	goto	u740
   958  000650                     u741:
   959  000650  EFA1  F002         	goto	l1544
   960  000654                     u740:
   961  000654                     l1562:
   962                           
   963                           ;WS2812b/BitBangWS2812b.c: 162:         while( a <= length )
   964  000654  5031               	movf	WSWalk@a^0,w,c
   965  000656  5C23               	subwf	WSWalk@length^0,w,c
   966  000658  5024               	movf	(WSWalk@length+1)^0,w,c
   967  00065A  0A80               	xorlw	128
   968  00065C  6E27               	movwf	??_WSWalk^0,c
   969  00065E  5032               	movf	(WSWalk@a+1)^0,w,c
   970  000660  0A80               	xorlw	128
   971  000662  5827               	subwfb	??_WSWalk^0,w,c
   972  000664  B0D8               	btfsc	status,0,c
   973  000666  EF37  F003         	goto	u751
   974  00066A  EF39  F003         	goto	u750
   975  00066E                     u751:
   976  00066E  EF9D  F002         	goto	l1538
   977  000672                     u750:
   978  000672                     
   979                           ;WS2812b/BitBangWS2812b.c: 180:         _delay((unsigned long)((0.280)*(32000000/4000.0)
      +                          ));
   980  000672  0E03               	movlw	3
   981  000674  6E27               	movwf	??_WSWalk^0,c
   982  000676  0EE8               	movlw	232
   983  000678                     u957:
   984  000678  2EE8               	decfsz	wreg,f,c
   985  00067A  D7FE               	bra	u957
   986  00067C  2E27               	decfsz	??_WSWalk^0,f,c
   987  00067E  D7FC               	bra	u957
   988                           
   989                           ;WS2812b/BitBangWS2812b.c: 181:         _delay((unsigned long)((250)*(32000000/4000.0)))
      +                          ;
   990  000680  0E0B               	movlw	11
   991  000682  6E28               	movwf	(??_WSWalk+1)^0,c
   992  000684  0E26               	movlw	38
   993  000686  6E27               	movwf	??_WSWalk^0,c
   994  000688  0E5E               	movlw	94
   995  00068A                     u967:
   996  00068A  2EE8               	decfsz	wreg,f,c
   997  00068C  D7FE               	bra	u967
   998  00068E  2E27               	decfsz	??_WSWalk^0,f,c
   999  000690  D7FC               	bra	u967
  1000  000692  2E28               	decfsz	(??_WSWalk+1)^0,f,c
  1001  000694  D7FA               	bra	u967
  1002                           
  1003                           ;WS2812b/BitBangWS2812b.c: 182:         _delay((unsigned long)((250)*(32000000/4000.0)))
      +                          ;
  1004  000696  0E0B               	movlw	11
  1005  000698  6E28               	movwf	(??_WSWalk+1)^0,c
  1006  00069A  0E26               	movlw	38
  1007  00069C  6E27               	movwf	??_WSWalk^0,c
  1008  00069E  0E5E               	movlw	94
  1009  0006A0                     u977:
  1010  0006A0  2EE8               	decfsz	wreg,f,c
  1011  0006A2  D7FE               	bra	u977
  1012  0006A4  2E27               	decfsz	??_WSWalk^0,f,c
  1013  0006A6  D7FC               	bra	u977
  1014  0006A8  2E28               	decfsz	(??_WSWalk+1)^0,f,c
  1015  0006AA  D7FA               	bra	u977
  1016  0006AC                     
  1017                           ;WS2812b/BitBangWS2812b.c: 183:     }
  1018  0006AC  4A2F               	infsnz	WSWalk@b^0,f,c
  1019  0006AE  2A30               	incf	(WSWalk@b+1)^0,f,c
  1020  0006B0  BE30               	btfsc	(WSWalk@b+1)^0,7,c
  1021  0006B2  EF64  F003         	goto	u761
  1022  0006B6  5030               	movf	(WSWalk@b+1)^0,w,c
  1023  0006B8  E109               	bnz	u760
  1024  0006BA  0E06               	movlw	6
  1025  0006BC  5C2F               	subwf	WSWalk@b^0,w,c
  1026  0006BE  A0D8               	btfss	status,0,c
  1027  0006C0  EF64  F003         	goto	u761
  1028  0006C4  EF66  F003         	goto	u760
  1029  0006C8                     u761:
  1030  0006C8  EF97  F002         	goto	l1536
  1031  0006CC                     u760:
  1032  0006CC  0012               	return		;funcret
  1033  0006CE                     __end_of_WSWalk:
  1034                           	callstack 0
  1035                           
  1036 ;; *************** function _WSTest *****************
  1037 ;; Defined at:
  1038 ;;		line 144 in file "WS2812b/BitBangWS2812b.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  length          2   45[COMRAM] int 
  1041 ;;  brightness      2   47[COMRAM] int 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  i               2   51[COMRAM] int 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1
  1053 ;;      Params:         4       0       0
  1054 ;;      Locals:         2       0       0
  1055 ;;      Temps:          2       0       0
  1056 ;;      Totals:         8       0       0
  1057 ;;Total ram usage:        8 bytes
  1058 ;; Hardware stack levels used:    1
  1059 ;; Hardware stack levels required when called:    7
  1060 ;; This function calls:
  1061 ;;		_WS_RYGCBM
  1062 ;;		_WS_Word
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text3
  1069  000AAA                     __ptext3:
  1070                           	callstack 0
  1071  000AAA                     _WSTest:
  1072                           	callstack 23
  1073  000AAA                     
  1074                           ;WS2812b/BitBangWS2812b.c: 144: void WSTest(int length, int brightness);WS2812b/BitBangW
      +                          S2812b.c: 145: {;WS2812b/BitBangWS2812b.c: 147:     for(int i = 0; i<length; i++)
  1075  000AAA  0E00               	movlw	0
  1076  000AAC  6E35               	movwf	(WSTest@i+1)^0,c
  1077  000AAE  0E00               	movlw	0
  1078  000AB0  6E34               	movwf	WSTest@i^0,c
  1079  000AB2  EF6B  F005         	goto	l1522
  1080  000AB6                     l1518:
  1081                           
  1082                           ;WS2812b/BitBangWS2812b.c: 148:     {;WS2812b/BitBangWS2812b.c: 149:         WS_Word(0x0
      +                          0, 0x00, 0x00);
  1083  000AB6  0E00               	movlw	0
  1084  000AB8  6E06               	movwf	(WS_Word@A+1)^0,c
  1085  000ABA  0E00               	movlw	0
  1086  000ABC  6E05               	movwf	WS_Word@A^0,c
  1087  000ABE  0E00               	movlw	0
  1088  000AC0  6E08               	movwf	(WS_Word@B+1)^0,c
  1089  000AC2  0E00               	movlw	0
  1090  000AC4  6E07               	movwf	WS_Word@B^0,c
  1091  000AC6  0E00               	movlw	0
  1092  000AC8  6E0A               	movwf	(WS_Word@C+1)^0,c
  1093  000ACA  0E00               	movlw	0
  1094  000ACC  6E09               	movwf	WS_Word@C^0,c
  1095  000ACE  EC15  F004         	call	_WS_Word	;wreg free
  1096  000AD2                     
  1097                           ;WS2812b/BitBangWS2812b.c: 150:     }
  1098  000AD2  4A34               	infsnz	WSTest@i^0,f,c
  1099  000AD4  2A35               	incf	(WSTest@i+1)^0,f,c
  1100  000AD6                     l1522:
  1101  000AD6  502E               	movf	WSTest@length^0,w,c
  1102  000AD8  5C34               	subwf	WSTest@i^0,w,c
  1103  000ADA  5035               	movf	(WSTest@i+1)^0,w,c
  1104  000ADC  0A80               	xorlw	128
  1105  000ADE  6E32               	movwf	??_WSTest^0,c
  1106  000AE0  502F               	movf	(WSTest@length+1)^0,w,c
  1107  000AE2  0A80               	xorlw	128
  1108  000AE4  5832               	subwfb	??_WSTest^0,w,c
  1109  000AE6  A0D8               	btfss	status,0,c
  1110  000AE8  EF78  F005         	goto	u711
  1111  000AEC  EF7A  F005         	goto	u710
  1112  000AF0                     u711:
  1113  000AF0  EF5B  F005         	goto	l1518
  1114  000AF4                     u710:
  1115  000AF4                     
  1116                           ;WS2812b/BitBangWS2812b.c: 151:     _delay((unsigned long)((0.280)*(32000000/4000.0)));
  1117  000AF4  0E03               	movlw	3
  1118  000AF6  6E32               	movwf	??_WSTest^0,c
  1119  000AF8  0EE8               	movlw	232
  1120  000AFA                     u987:
  1121  000AFA  2EE8               	decfsz	wreg,f,c
  1122  000AFC  D7FE               	bra	u987
  1123  000AFE  2E32               	decfsz	??_WSTest^0,f,c
  1124  000B00  D7FC               	bra	u987
  1125                           
  1126                           ;WS2812b/BitBangWS2812b.c: 152:     _delay((unsigned long)((250)*(32000000/4000.0)));
  1127  000B02  0E0B               	movlw	11
  1128  000B04  6E33               	movwf	(??_WSTest+1)^0,c
  1129  000B06  0E26               	movlw	38
  1130  000B08  6E32               	movwf	??_WSTest^0,c
  1131  000B0A  0E5E               	movlw	94
  1132  000B0C                     u997:
  1133  000B0C  2EE8               	decfsz	wreg,f,c
  1134  000B0E  D7FE               	bra	u997
  1135  000B10  2E32               	decfsz	??_WSTest^0,f,c
  1136  000B12  D7FC               	bra	u997
  1137  000B14  2E33               	decfsz	(??_WSTest+1)^0,f,c
  1138  000B16  D7FA               	bra	u997
  1139  000B18                     
  1140                           ;WS2812b/BitBangWS2812b.c: 153:     WS_RYGCBM(length, brightness);
  1141  000B18  C02E  F023         	movff	WSTest@length,WS_RYGCBM@length
  1142  000B1C  C02F  F024         	movff	WSTest@length+1,WS_RYGCBM@length+1
  1143  000B20  C030  F025         	movff	WSTest@brightness,WS_RYGCBM@brightness
  1144  000B24  C031  F026         	movff	WSTest@brightness+1,WS_RYGCBM@brightness+1
  1145  000B28  EC2B  F001         	call	_WS_RYGCBM	;wreg free
  1146  000B2C                     
  1147                           ;WS2812b/BitBangWS2812b.c: 154:     _delay((unsigned long)((250)*(32000000/4000.0)));
  1148  000B2C  0E0B               	movlw	11
  1149  000B2E  6E33               	movwf	(??_WSTest+1)^0,c
  1150  000B30  0E26               	movlw	38
  1151  000B32  6E32               	movwf	??_WSTest^0,c
  1152  000B34  0E5E               	movlw	94
  1153  000B36                     u1007:
  1154  000B36  2EE8               	decfsz	wreg,f,c
  1155  000B38  D7FE               	bra	u1007
  1156  000B3A  2E32               	decfsz	??_WSTest^0,f,c
  1157  000B3C  D7FC               	bra	u1007
  1158  000B3E  2E33               	decfsz	(??_WSTest+1)^0,f,c
  1159  000B40  D7FA               	bra	u1007
  1160  000B42  0012               	return		;funcret
  1161  000B44                     __end_of_WSTest:
  1162                           	callstack 0
  1163                           
  1164 ;; *************** function _WSSlow *****************
  1165 ;; Defined at:
  1166 ;;		line 95 in file "WS2812b/BitBangWS2812b.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;  lengh           2   45[COMRAM] int 
  1169 ;;  maxBrightnes    2   47[COMRAM] int 
  1170 ;;  minBrightnes    2   49[COMRAM] int 
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;  i               2   54[COMRAM] int 
  1173 ;;  i               2   52[COMRAM] int 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1
  1183 ;;      Params:         6       0       0
  1184 ;;      Locals:         4       0       0
  1185 ;;      Temps:          1       0       0
  1186 ;;      Totals:        11       0       0
  1187 ;;Total ram usage:       11 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    7
  1190 ;; This function calls:
  1191 ;;		_WS_RYGCBM
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text4
  1198  000A02                     __ptext4:
  1199                           	callstack 0
  1200  000A02                     _WSSlow:
  1201                           	callstack 23
  1202  000A02                     
  1203                           ;WS2812b/BitBangWS2812b.c: 95: void WSSlow(int lengh, int maxBrightness, int minBrightne
      +                          ss);WS2812b/BitBangWS2812b.c: 96: {;WS2812b/BitBangWS2812b.c: 97:     for(int i = minBri
      +                          ghtness; i<=maxBrightness; i++)
  1204  000A02  C032  F035         	movff	WSSlow@minBrightness,WSSlow@i
  1205  000A06  C033  F036         	movff	WSSlow@minBrightness+1,WSSlow@i+1
  1206  000A0A  EF1B  F005         	goto	l1506
  1207  000A0E                     l1500:
  1208                           
  1209                           ;WS2812b/BitBangWS2812b.c: 98:     {;WS2812b/BitBangWS2812b.c: 99:         WS_RYGCBM(len
      +                          gh, i);
  1210  000A0E  C02E  F023         	movff	WSSlow@lengh,WS_RYGCBM@length
  1211  000A12  C02F  F024         	movff	WSSlow@lengh+1,WS_RYGCBM@length+1
  1212  000A16  C035  F025         	movff	WSSlow@i,WS_RYGCBM@brightness
  1213  000A1A  C036  F026         	movff	WSSlow@i+1,WS_RYGCBM@brightness+1
  1214  000A1E  EC2B  F001         	call	_WS_RYGCBM	;wreg free
  1215  000A22                     
  1216                           ;WS2812b/BitBangWS2812b.c: 100:         _delay((unsigned long)((10)*(32000000/4000.0)));
  1217  000A22  0E68               	movlw	104
  1218  000A24  6E34               	movwf	??_WSSlow^0,c
  1219  000A26  0EE4               	movlw	228
  1220  000A28                     u1017:
  1221  000A28  2EE8               	decfsz	wreg,f,c
  1222  000A2A  D7FE               	bra	u1017
  1223  000A2C  2E34               	decfsz	??_WSSlow^0,f,c
  1224  000A2E  D7FC               	bra	u1017
  1225  000A30  D000               	nop2	
  1226  000A32                     
  1227                           ;WS2812b/BitBangWS2812b.c: 101:     }
  1228  000A32  4A35               	infsnz	WSSlow@i^0,f,c
  1229  000A34  2A36               	incf	(WSSlow@i+1)^0,f,c
  1230  000A36                     l1506:
  1231  000A36  5035               	movf	WSSlow@i^0,w,c
  1232  000A38  5C30               	subwf	WSSlow@maxBrightness^0,w,c
  1233  000A3A  5031               	movf	(WSSlow@maxBrightness+1)^0,w,c
  1234  000A3C  0A80               	xorlw	128
  1235  000A3E  6E34               	movwf	??_WSSlow^0,c
  1236  000A40  5036               	movf	(WSSlow@i+1)^0,w,c
  1237  000A42  0A80               	xorlw	128
  1238  000A44  5834               	subwfb	??_WSSlow^0,w,c
  1239  000A46  B0D8               	btfsc	status,0,c
  1240  000A48  EF28  F005         	goto	u691
  1241  000A4C  EF2A  F005         	goto	u690
  1242  000A50                     u691:
  1243  000A50  EF07  F005         	goto	l1500
  1244  000A54                     u690:
  1245  000A54                     
  1246                           ;WS2812b/BitBangWS2812b.c: 102:     for(int i = maxBrightness; i>=minBrightness; i--)
  1247  000A54  C030  F037         	movff	WSSlow@maxBrightness,WSSlow@i_606
  1248  000A58  C031  F038         	movff	WSSlow@maxBrightness+1,WSSlow@i_606+1
  1249  000A5C  EF45  F005         	goto	l1514
  1250  000A60                     l1508:
  1251                           
  1252                           ;WS2812b/BitBangWS2812b.c: 103:     {;WS2812b/BitBangWS2812b.c: 104:         WS_RYGCBM(l
      +                          engh, i);
  1253  000A60  C02E  F023         	movff	WSSlow@lengh,WS_RYGCBM@length
  1254  000A64  C02F  F024         	movff	WSSlow@lengh+1,WS_RYGCBM@length+1
  1255  000A68  C037  F025         	movff	WSSlow@i_606,WS_RYGCBM@brightness
  1256  000A6C  C038  F026         	movff	WSSlow@i_606+1,WS_RYGCBM@brightness+1
  1257  000A70  EC2B  F001         	call	_WS_RYGCBM	;wreg free
  1258  000A74                     
  1259                           ;WS2812b/BitBangWS2812b.c: 105:         _delay((unsigned long)((10)*(32000000/4000.0)));
  1260  000A74  0E68               	movlw	104
  1261  000A76  6E34               	movwf	??_WSSlow^0,c
  1262  000A78  0EE4               	movlw	228
  1263  000A7A                     u1027:
  1264  000A7A  2EE8               	decfsz	wreg,f,c
  1265  000A7C  D7FE               	bra	u1027
  1266  000A7E  2E34               	decfsz	??_WSSlow^0,f,c
  1267  000A80  D7FC               	bra	u1027
  1268  000A82  D000               	nop2	
  1269  000A84                     
  1270                           ;WS2812b/BitBangWS2812b.c: 106:     }
  1271  000A84  0637               	decf	WSSlow@i_606^0,f,c
  1272  000A86  A0D8               	btfss	status,0,c
  1273  000A88  0638               	decf	(WSSlow@i_606+1)^0,f,c
  1274  000A8A                     l1514:
  1275  000A8A  5032               	movf	WSSlow@minBrightness^0,w,c
  1276  000A8C  5C37               	subwf	WSSlow@i_606^0,w,c
  1277  000A8E  5038               	movf	(WSSlow@i_606+1)^0,w,c
  1278  000A90  0A80               	xorlw	128
  1279  000A92  6E34               	movwf	??_WSSlow^0,c
  1280  000A94  5033               	movf	(WSSlow@minBrightness+1)^0,w,c
  1281  000A96  0A80               	xorlw	128
  1282  000A98  5834               	subwfb	??_WSSlow^0,w,c
  1283  000A9A  B0D8               	btfsc	status,0,c
  1284  000A9C  EF52  F005         	goto	u701
  1285  000AA0  EF54  F005         	goto	u700
  1286  000AA4                     u701:
  1287  000AA4  EF30  F005         	goto	l1508
  1288  000AA8                     u700:
  1289  000AA8  0012               	return		;funcret
  1290  000AAA                     __end_of_WSSlow:
  1291                           	callstack 0
  1292                           
  1293 ;; *************** function _WS_RYGCBM *****************
  1294 ;; Defined at:
  1295 ;;		line 108 in file "WS2812b/BitBangWS2812b.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  length          2   34[COMRAM] int 
  1298 ;;  brightness      2   36[COMRAM] int 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  b               2   43[COMRAM] int 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMRAM   BANK0   BANK1
  1310 ;;      Params:         4       0       0
  1311 ;;      Locals:         2       0       0
  1312 ;;      Temps:          5       0       0
  1313 ;;      Totals:        11       0       0
  1314 ;;Total ram usage:       11 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; Hardware stack levels required when called:    6
  1317 ;; This function calls:
  1318 ;;		_WS_dim
  1319 ;; This function is called by:
  1320 ;;		_WSSlow
  1321 ;;		_WSTest
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text5
  1326  000256                     __ptext5:
  1327                           	callstack 0
  1328  000256                     _WS_RYGCBM:
  1329                           	callstack 23
  1330  000256                     
  1331                           ;WS2812b/BitBangWS2812b.c: 108: void WS_RYGCBM(int length, int brightness);WS2812b/BitBa
      +                          ngWS2812b.c: 109: {;WS2812b/BitBangWS2812b.c: 110:     int b =0;
  1332  000256  0E00               	movlw	0
  1333  000258  6E2D               	movwf	(WS_RYGCBM@b+1)^0,c
  1334  00025A  0E00               	movlw	0
  1335  00025C  6E2C               	movwf	WS_RYGCBM@b^0,c
  1336                           
  1337                           ;WS2812b/BitBangWS2812b.c: 111:     for(b = 0; b<length-6; b+=6 )
  1338  00025E  0E00               	movlw	0
  1339  000260  6E2D               	movwf	(WS_RYGCBM@b+1)^0,c
  1340  000262  0E00               	movlw	0
  1341  000264  6E2C               	movwf	WS_RYGCBM@b^0,c
  1342  000266  EF9C  F001         	goto	l1426
  1343  00026A                     l1422:
  1344                           
  1345                           ;WS2812b/BitBangWS2812b.c: 112:     {;WS2812b/BitBangWS2812b.c: 113:         WS_dim(0xFF
      +                          , 0x00, 0x00, brightness);
  1346  00026A  0E00               	movlw	0
  1347  00026C  6E19               	movwf	(WS_dim@A+1)^0,c
  1348  00026E  6818               	setf	WS_dim@A^0,c
  1349  000270  0E00               	movlw	0
  1350  000272  6E1B               	movwf	(WS_dim@B+1)^0,c
  1351  000274  0E00               	movlw	0
  1352  000276  6E1A               	movwf	WS_dim@B^0,c
  1353  000278  0E00               	movlw	0
  1354  00027A  6E1D               	movwf	(WS_dim@C+1)^0,c
  1355  00027C  0E00               	movlw	0
  1356  00027E  6E1C               	movwf	WS_dim@C^0,c
  1357  000280  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1358  000284  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1359  000288  ECA3  F004         	call	_WS_dim	;wreg free
  1360                           
  1361                           ;WS2812b/BitBangWS2812b.c: 114:         WS_dim(0xFF, 0xFF, 0x00, brightness);
  1362  00028C  0E00               	movlw	0
  1363  00028E  6E19               	movwf	(WS_dim@A+1)^0,c
  1364  000290  6818               	setf	WS_dim@A^0,c
  1365  000292  0E00               	movlw	0
  1366  000294  6E1B               	movwf	(WS_dim@B+1)^0,c
  1367  000296  681A               	setf	WS_dim@B^0,c
  1368  000298  0E00               	movlw	0
  1369  00029A  6E1D               	movwf	(WS_dim@C+1)^0,c
  1370  00029C  0E00               	movlw	0
  1371  00029E  6E1C               	movwf	WS_dim@C^0,c
  1372  0002A0  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1373  0002A4  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1374  0002A8  ECA3  F004         	call	_WS_dim	;wreg free
  1375                           
  1376                           ;WS2812b/BitBangWS2812b.c: 115:         WS_dim(0x00, 0xFF, 0x00, brightness);
  1377  0002AC  0E00               	movlw	0
  1378  0002AE  6E19               	movwf	(WS_dim@A+1)^0,c
  1379  0002B0  0E00               	movlw	0
  1380  0002B2  6E18               	movwf	WS_dim@A^0,c
  1381  0002B4  0E00               	movlw	0
  1382  0002B6  6E1B               	movwf	(WS_dim@B+1)^0,c
  1383  0002B8  681A               	setf	WS_dim@B^0,c
  1384  0002BA  0E00               	movlw	0
  1385  0002BC  6E1D               	movwf	(WS_dim@C+1)^0,c
  1386  0002BE  0E00               	movlw	0
  1387  0002C0  6E1C               	movwf	WS_dim@C^0,c
  1388  0002C2  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1389  0002C6  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1390  0002CA  ECA3  F004         	call	_WS_dim	;wreg free
  1391                           
  1392                           ;WS2812b/BitBangWS2812b.c: 116:         WS_dim(0x00, 0xFF, 0xFF, brightness);
  1393  0002CE  0E00               	movlw	0
  1394  0002D0  6E19               	movwf	(WS_dim@A+1)^0,c
  1395  0002D2  0E00               	movlw	0
  1396  0002D4  6E18               	movwf	WS_dim@A^0,c
  1397  0002D6  0E00               	movlw	0
  1398  0002D8  6E1B               	movwf	(WS_dim@B+1)^0,c
  1399  0002DA  681A               	setf	WS_dim@B^0,c
  1400  0002DC  0E00               	movlw	0
  1401  0002DE  6E1D               	movwf	(WS_dim@C+1)^0,c
  1402  0002E0  681C               	setf	WS_dim@C^0,c
  1403  0002E2  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1404  0002E6  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1405  0002EA  ECA3  F004         	call	_WS_dim	;wreg free
  1406                           
  1407                           ;WS2812b/BitBangWS2812b.c: 117:         WS_dim(0x00, 0x00, 0xFF, brightness);
  1408  0002EE  0E00               	movlw	0
  1409  0002F0  6E19               	movwf	(WS_dim@A+1)^0,c
  1410  0002F2  0E00               	movlw	0
  1411  0002F4  6E18               	movwf	WS_dim@A^0,c
  1412  0002F6  0E00               	movlw	0
  1413  0002F8  6E1B               	movwf	(WS_dim@B+1)^0,c
  1414  0002FA  0E00               	movlw	0
  1415  0002FC  6E1A               	movwf	WS_dim@B^0,c
  1416  0002FE  0E00               	movlw	0
  1417  000300  6E1D               	movwf	(WS_dim@C+1)^0,c
  1418  000302  681C               	setf	WS_dim@C^0,c
  1419  000304  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1420  000308  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1421  00030C  ECA3  F004         	call	_WS_dim	;wreg free
  1422                           
  1423                           ;WS2812b/BitBangWS2812b.c: 118:         WS_dim(0xFF, 0x00, 0xFF, brightness);
  1424  000310  0E00               	movlw	0
  1425  000312  6E19               	movwf	(WS_dim@A+1)^0,c
  1426  000314  6818               	setf	WS_dim@A^0,c
  1427  000316  0E00               	movlw	0
  1428  000318  6E1B               	movwf	(WS_dim@B+1)^0,c
  1429  00031A  0E00               	movlw	0
  1430  00031C  6E1A               	movwf	WS_dim@B^0,c
  1431  00031E  0E00               	movlw	0
  1432  000320  6E1D               	movwf	(WS_dim@C+1)^0,c
  1433  000322  681C               	setf	WS_dim@C^0,c
  1434  000324  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1435  000328  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1436  00032C  ECA3  F004         	call	_WS_dim	;wreg free
  1437  000330                     
  1438                           ;WS2812b/BitBangWS2812b.c: 119:     }
  1439  000330  0E06               	movlw	6
  1440  000332  262C               	addwf	WS_RYGCBM@b^0,f,c
  1441  000334  0E00               	movlw	0
  1442  000336  222D               	addwfc	(WS_RYGCBM@b+1)^0,f,c
  1443  000338                     l1426:
  1444  000338  0EFA               	movlw	250
  1445  00033A  6E27               	movwf	??_WS_RYGCBM^0,c
  1446  00033C  0EFF               	movlw	255
  1447  00033E  6E28               	movwf	(??_WS_RYGCBM+1)^0,c
  1448  000340  C023  F029         	movff	WS_RYGCBM@length,??_WS_RYGCBM+2
  1449  000344  C024  F02A         	movff	WS_RYGCBM@length+1,??_WS_RYGCBM+3
  1450  000348  5027               	movf	??_WS_RYGCBM^0,w,c
  1451  00034A  2629               	addwf	(??_WS_RYGCBM+2)^0,f,c
  1452  00034C  5028               	movf	(??_WS_RYGCBM+1)^0,w,c
  1453  00034E  222A               	addwfc	(??_WS_RYGCBM+3)^0,f,c
  1454  000350  5029               	movf	(??_WS_RYGCBM+2)^0,w,c
  1455  000352  5C2C               	subwf	WS_RYGCBM@b^0,w,c
  1456  000354  502D               	movf	(WS_RYGCBM@b+1)^0,w,c
  1457  000356  0A80               	xorlw	128
  1458  000358  6E2B               	movwf	(??_WS_RYGCBM+4)^0,c
  1459  00035A  502A               	movf	(??_WS_RYGCBM+3)^0,w,c
  1460  00035C  0A80               	xorlw	128
  1461  00035E  582B               	subwfb	(??_WS_RYGCBM+4)^0,w,c
  1462  000360  A0D8               	btfss	status,0,c
  1463  000362  EFB5  F001         	goto	u601
  1464  000366  EFB7  F001         	goto	u600
  1465  00036A                     u601:
  1466  00036A  EF35  F001         	goto	l1422
  1467  00036E                     u600:
  1468  00036E  EF7C  F002         	goto	l1476
  1469  000372                     l1428:
  1470                           
  1471                           ;WS2812b/BitBangWS2812b.c: 121:     {;WS2812b/BitBangWS2812b.c: 122:         WS_dim(0xFF
      +                          , 0x00, 0x00, brightness);
  1472  000372  0E00               	movlw	0
  1473  000374  6E19               	movwf	(WS_dim@A+1)^0,c
  1474  000376  6818               	setf	WS_dim@A^0,c
  1475  000378  0E00               	movlw	0
  1476  00037A  6E1B               	movwf	(WS_dim@B+1)^0,c
  1477  00037C  0E00               	movlw	0
  1478  00037E  6E1A               	movwf	WS_dim@B^0,c
  1479  000380  0E00               	movlw	0
  1480  000382  6E1D               	movwf	(WS_dim@C+1)^0,c
  1481  000384  0E00               	movlw	0
  1482  000386  6E1C               	movwf	WS_dim@C^0,c
  1483  000388  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1484  00038C  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1485  000390  ECA3  F004         	call	_WS_dim	;wreg free
  1486  000394                     
  1487                           ;WS2812b/BitBangWS2812b.c: 123:         b++;
  1488  000394  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1489  000396  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1490  000398                     
  1491                           ;WS2812b/BitBangWS2812b.c: 124:         if(b == length) break;
  1492  000398  5023               	movf	WS_RYGCBM@length^0,w,c
  1493  00039A  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1494  00039C  E107               	bnz	u611
  1495  00039E  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1496  0003A0  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1497  0003A2  A4D8               	btfss	status,2,c
  1498  0003A4  EFD6  F001         	goto	u611
  1499  0003A8  EFD8  F001         	goto	u610
  1500  0003AC                     u611:
  1501  0003AC  EFDA  F001         	goto	l1436
  1502  0003B0                     u610:
  1503  0003B0  EF8B  F002         	goto	l1478
  1504  0003B4                     l1436:
  1505                           
  1506                           ;WS2812b/BitBangWS2812b.c: 125:         WS_dim(0xFF, 0xFF, 0x00, brightness);
  1507  0003B4  0E00               	movlw	0
  1508  0003B6  6E19               	movwf	(WS_dim@A+1)^0,c
  1509  0003B8  6818               	setf	WS_dim@A^0,c
  1510  0003BA  0E00               	movlw	0
  1511  0003BC  6E1B               	movwf	(WS_dim@B+1)^0,c
  1512  0003BE  681A               	setf	WS_dim@B^0,c
  1513  0003C0  0E00               	movlw	0
  1514  0003C2  6E1D               	movwf	(WS_dim@C+1)^0,c
  1515  0003C4  0E00               	movlw	0
  1516  0003C6  6E1C               	movwf	WS_dim@C^0,c
  1517  0003C8  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1518  0003CC  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1519  0003D0  ECA3  F004         	call	_WS_dim	;wreg free
  1520  0003D4                     
  1521                           ;WS2812b/BitBangWS2812b.c: 126:         b++;
  1522  0003D4  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1523  0003D6  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1524  0003D8                     
  1525                           ;WS2812b/BitBangWS2812b.c: 127:         if(b == length) break;
  1526  0003D8  5023               	movf	WS_RYGCBM@length^0,w,c
  1527  0003DA  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1528  0003DC  E107               	bnz	u621
  1529  0003DE  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1530  0003E0  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1531  0003E2  A4D8               	btfss	status,2,c
  1532  0003E4  EFF6  F001         	goto	u621
  1533  0003E8  EFF8  F001         	goto	u620
  1534  0003EC                     u621:
  1535  0003EC  EFFA  F001         	goto	l1444
  1536  0003F0                     u620:
  1537  0003F0  EF8B  F002         	goto	l1478
  1538  0003F4                     l1444:
  1539                           
  1540                           ;WS2812b/BitBangWS2812b.c: 128:         WS_dim(0x00, 0xFF, 0x00, brightness);
  1541  0003F4  0E00               	movlw	0
  1542  0003F6  6E19               	movwf	(WS_dim@A+1)^0,c
  1543  0003F8  0E00               	movlw	0
  1544  0003FA  6E18               	movwf	WS_dim@A^0,c
  1545  0003FC  0E00               	movlw	0
  1546  0003FE  6E1B               	movwf	(WS_dim@B+1)^0,c
  1547  000400  681A               	setf	WS_dim@B^0,c
  1548  000402  0E00               	movlw	0
  1549  000404  6E1D               	movwf	(WS_dim@C+1)^0,c
  1550  000406  0E00               	movlw	0
  1551  000408  6E1C               	movwf	WS_dim@C^0,c
  1552  00040A  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1553  00040E  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1554  000412  ECA3  F004         	call	_WS_dim	;wreg free
  1555  000416                     
  1556                           ;WS2812b/BitBangWS2812b.c: 129:         b++;
  1557  000416  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1558  000418  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1559  00041A                     
  1560                           ;WS2812b/BitBangWS2812b.c: 130:         if(b == length) break;
  1561  00041A  5023               	movf	WS_RYGCBM@length^0,w,c
  1562  00041C  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1563  00041E  E107               	bnz	u631
  1564  000420  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1565  000422  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1566  000424  A4D8               	btfss	status,2,c
  1567  000426  EF17  F002         	goto	u631
  1568  00042A  EF19  F002         	goto	u630
  1569  00042E                     u631:
  1570  00042E  EF1B  F002         	goto	l1452
  1571  000432                     u630:
  1572  000432  EF8B  F002         	goto	l1478
  1573  000436                     l1452:
  1574                           
  1575                           ;WS2812b/BitBangWS2812b.c: 131:         WS_dim(0x00, 0xFF, 0xFF, brightness);
  1576  000436  0E00               	movlw	0
  1577  000438  6E19               	movwf	(WS_dim@A+1)^0,c
  1578  00043A  0E00               	movlw	0
  1579  00043C  6E18               	movwf	WS_dim@A^0,c
  1580  00043E  0E00               	movlw	0
  1581  000440  6E1B               	movwf	(WS_dim@B+1)^0,c
  1582  000442  681A               	setf	WS_dim@B^0,c
  1583  000444  0E00               	movlw	0
  1584  000446  6E1D               	movwf	(WS_dim@C+1)^0,c
  1585  000448  681C               	setf	WS_dim@C^0,c
  1586  00044A  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1587  00044E  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1588  000452  ECA3  F004         	call	_WS_dim	;wreg free
  1589  000456                     
  1590                           ;WS2812b/BitBangWS2812b.c: 132:         b++;
  1591  000456  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1592  000458  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1593  00045A                     
  1594                           ;WS2812b/BitBangWS2812b.c: 133:         if(b == length) break;
  1595  00045A  5023               	movf	WS_RYGCBM@length^0,w,c
  1596  00045C  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1597  00045E  E107               	bnz	u641
  1598  000460  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1599  000462  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1600  000464  A4D8               	btfss	status,2,c
  1601  000466  EF37  F002         	goto	u641
  1602  00046A  EF39  F002         	goto	u640
  1603  00046E                     u641:
  1604  00046E  EF3B  F002         	goto	l1460
  1605  000472                     u640:
  1606  000472  EF8B  F002         	goto	l1478
  1607  000476                     l1460:
  1608                           
  1609                           ;WS2812b/BitBangWS2812b.c: 134:         WS_dim(0x00, 0x00, 0xFF, brightness);
  1610  000476  0E00               	movlw	0
  1611  000478  6E19               	movwf	(WS_dim@A+1)^0,c
  1612  00047A  0E00               	movlw	0
  1613  00047C  6E18               	movwf	WS_dim@A^0,c
  1614  00047E  0E00               	movlw	0
  1615  000480  6E1B               	movwf	(WS_dim@B+1)^0,c
  1616  000482  0E00               	movlw	0
  1617  000484  6E1A               	movwf	WS_dim@B^0,c
  1618  000486  0E00               	movlw	0
  1619  000488  6E1D               	movwf	(WS_dim@C+1)^0,c
  1620  00048A  681C               	setf	WS_dim@C^0,c
  1621  00048C  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1622  000490  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1623  000494  ECA3  F004         	call	_WS_dim	;wreg free
  1624  000498                     
  1625                           ;WS2812b/BitBangWS2812b.c: 135:         b++;
  1626  000498  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1627  00049A  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1628  00049C                     
  1629                           ;WS2812b/BitBangWS2812b.c: 136:         if(b == length) break;
  1630  00049C  5023               	movf	WS_RYGCBM@length^0,w,c
  1631  00049E  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1632  0004A0  E107               	bnz	u651
  1633  0004A2  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1634  0004A4  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1635  0004A6  A4D8               	btfss	status,2,c
  1636  0004A8  EF58  F002         	goto	u651
  1637  0004AC  EF5A  F002         	goto	u650
  1638  0004B0                     u651:
  1639  0004B0  EF5C  F002         	goto	l1468
  1640  0004B4                     u650:
  1641  0004B4  EF8B  F002         	goto	l1478
  1642  0004B8                     l1468:
  1643                           
  1644                           ;WS2812b/BitBangWS2812b.c: 137:         WS_dim(0xFF, 0x00, 0xFF, brightness);
  1645  0004B8  0E00               	movlw	0
  1646  0004BA  6E19               	movwf	(WS_dim@A+1)^0,c
  1647  0004BC  6818               	setf	WS_dim@A^0,c
  1648  0004BE  0E00               	movlw	0
  1649  0004C0  6E1B               	movwf	(WS_dim@B+1)^0,c
  1650  0004C2  0E00               	movlw	0
  1651  0004C4  6E1A               	movwf	WS_dim@B^0,c
  1652  0004C6  0E00               	movlw	0
  1653  0004C8  6E1D               	movwf	(WS_dim@C+1)^0,c
  1654  0004CA  681C               	setf	WS_dim@C^0,c
  1655  0004CC  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1656  0004D0  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1657  0004D4  ECA3  F004         	call	_WS_dim	;wreg free
  1658  0004D8                     
  1659                           ;WS2812b/BitBangWS2812b.c: 138:         b++;
  1660  0004D8  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1661  0004DA  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1662  0004DC                     
  1663                           ;WS2812b/BitBangWS2812b.c: 139:         if(b == length) break;
  1664  0004DC  5023               	movf	WS_RYGCBM@length^0,w,c
  1665  0004DE  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1666  0004E0  E107               	bnz	u661
  1667  0004E2  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1668  0004E4  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1669  0004E6  A4D8               	btfss	status,2,c
  1670  0004E8  EF78  F002         	goto	u661
  1671  0004EC  EF7A  F002         	goto	u660
  1672  0004F0                     u661:
  1673  0004F0  EF7C  F002         	goto	l1476
  1674  0004F4                     u660:
  1675  0004F4  EF8B  F002         	goto	l1478
  1676  0004F8                     l1476:
  1677                           
  1678                           ;WS2812b/BitBangWS2812b.c: 120:     while(b < length)
  1679  0004F8  5023               	movf	WS_RYGCBM@length^0,w,c
  1680  0004FA  5C2C               	subwf	WS_RYGCBM@b^0,w,c
  1681  0004FC  502D               	movf	(WS_RYGCBM@b+1)^0,w,c
  1682  0004FE  0A80               	xorlw	128
  1683  000500  6E27               	movwf	??_WS_RYGCBM^0,c
  1684  000502  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1685  000504  0A80               	xorlw	128
  1686  000506  5827               	subwfb	??_WS_RYGCBM^0,w,c
  1687  000508  A0D8               	btfss	status,0,c
  1688  00050A  EF89  F002         	goto	u671
  1689  00050E  EF8B  F002         	goto	u670
  1690  000512                     u671:
  1691  000512  EFB9  F001         	goto	l1428
  1692  000516                     u670:
  1693  000516                     l1478:
  1694                           
  1695                           ;WS2812b/BitBangWS2812b.c: 141:     _delay((unsigned long)((0.280)*(32000000/4000.0)));
  1696  000516  0E03               	movlw	3
  1697  000518  6E27               	movwf	??_WS_RYGCBM^0,c
  1698  00051A  0EE8               	movlw	232
  1699  00051C                     u1037:
  1700  00051C  2EE8               	decfsz	wreg,f,c
  1701  00051E  D7FE               	bra	u1037
  1702  000520  2E27               	decfsz	??_WS_RYGCBM^0,f,c
  1703  000522  D7FC               	bra	u1037
  1704  000524  0012               	return		;funcret
  1705  000526                     __end_of_WS_RYGCBM:
  1706                           	callstack 0
  1707                           
  1708 ;; *************** function _WS_dim *****************
  1709 ;; Defined at:
  1710 ;;		line 22 in file "WS2812b/BitBangWS2812b.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  A               2   23[COMRAM] int 
  1713 ;;  B               2   25[COMRAM] int 
  1714 ;;  C               2   27[COMRAM] int 
  1715 ;;  brightness      2   29[COMRAM] int 
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;  f               2   32[COMRAM] int 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  1    wreg      void 
  1720 ;; Registers used:
  1721 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1
  1727 ;;      Params:         8       0       0
  1728 ;;      Locals:         2       0       0
  1729 ;;      Temps:          1       0       0
  1730 ;;      Totals:        11       0       0
  1731 ;;Total ram usage:       11 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    5
  1734 ;; This function calls:
  1735 ;;		_WS_Word
  1736 ;;		___wmul
  1737 ;; This function is called by:
  1738 ;;		_WS_RYGCBM
  1739 ;;		_WSWalk
  1740 ;;		_WS_White
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text6
  1745  000946                     __ptext6:
  1746                           	callstack 0
  1747  000946                     _WS_dim:
  1748                           	callstack 24
  1749  000946                     
  1750                           ;WS2812b/BitBangWS2812b.c: 22: void WS_dim(int A, int B, int C, int brightness);WS2812b/
      +                          BitBangWS2812b.c: 23: {;WS2812b/BitBangWS2812b.c: 24:     int f = 255 - 5*brightness;
  1751  000946  C01E  F008         	movff	WS_dim@brightness,___wmul@multiplier
  1752  00094A  C01F  F009         	movff	WS_dim@brightness+1,___wmul@multiplier+1
  1753  00094E  0EFF               	movlw	255
  1754  000950  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
  1755  000952  0EFB               	movlw	251
  1756  000954  6E0A               	movwf	___wmul@multiplicand^0,c
  1757  000956  EC27  F006         	call	___wmul	;wreg free
  1758  00095A  0EFF               	movlw	255
  1759  00095C  2408               	addwf	?___wmul^0,w,c
  1760  00095E  6E21               	movwf	WS_dim@f^0,c
  1761  000960  0E00               	movlw	0
  1762  000962  2009               	addwfc	(?___wmul+1)^0,w,c
  1763  000964  6E22               	movwf	(WS_dim@f+1)^0,c
  1764  000966                     
  1765                           ;WS2812b/BitBangWS2812b.c: 25:     if( A >=f )
  1766  000966  5021               	movf	WS_dim@f^0,w,c
  1767  000968  5C18               	subwf	WS_dim@A^0,w,c
  1768  00096A  5019               	movf	(WS_dim@A+1)^0,w,c
  1769  00096C  0A80               	xorlw	128
  1770  00096E  6E20               	movwf	??_WS_dim^0,c
  1771  000970  5022               	movf	(WS_dim@f+1)^0,w,c
  1772  000972  0A80               	xorlw	128
  1773  000974  5820               	subwfb	??_WS_dim^0,w,c
  1774  000976  A0D8               	btfss	status,0,c
  1775  000978  EFC0  F004         	goto	u571
  1776  00097C  EFC2  F004         	goto	u570
  1777  000980                     u571:
  1778  000980  EFC8  F004         	goto	l151
  1779  000984                     u570:
  1780  000984                     
  1781                           ;WS2812b/BitBangWS2812b.c: 26:     {;WS2812b/BitBangWS2812b.c: 27:         A = A - f;
  1782  000984  5021               	movf	WS_dim@f^0,w,c
  1783  000986  5C18               	subwf	WS_dim@A^0,w,c
  1784  000988  6E18               	movwf	WS_dim@A^0,c
  1785  00098A  5022               	movf	(WS_dim@f+1)^0,w,c
  1786  00098C  5819               	subwfb	(WS_dim@A+1)^0,w,c
  1787  00098E  6E19               	movwf	(WS_dim@A+1)^0,c
  1788  000990                     l151:
  1789                           
  1790                           ;WS2812b/BitBangWS2812b.c: 29:     if( B >=f )
  1791  000990  5021               	movf	WS_dim@f^0,w,c
  1792  000992  5C1A               	subwf	WS_dim@B^0,w,c
  1793  000994  501B               	movf	(WS_dim@B+1)^0,w,c
  1794  000996  0A80               	xorlw	128
  1795  000998  6E20               	movwf	??_WS_dim^0,c
  1796  00099A  5022               	movf	(WS_dim@f+1)^0,w,c
  1797  00099C  0A80               	xorlw	128
  1798  00099E  5820               	subwfb	??_WS_dim^0,w,c
  1799  0009A0  A0D8               	btfss	status,0,c
  1800  0009A2  EFD5  F004         	goto	u581
  1801  0009A6  EFD7  F004         	goto	u580
  1802  0009AA                     u581:
  1803  0009AA  EFDD  F004         	goto	l152
  1804  0009AE                     u580:
  1805  0009AE                     
  1806                           ;WS2812b/BitBangWS2812b.c: 30:     {;WS2812b/BitBangWS2812b.c: 31:         B = B - f;
  1807  0009AE  5021               	movf	WS_dim@f^0,w,c
  1808  0009B0  5C1A               	subwf	WS_dim@B^0,w,c
  1809  0009B2  6E1A               	movwf	WS_dim@B^0,c
  1810  0009B4  5022               	movf	(WS_dim@f+1)^0,w,c
  1811  0009B6  581B               	subwfb	(WS_dim@B+1)^0,w,c
  1812  0009B8  6E1B               	movwf	(WS_dim@B+1)^0,c
  1813  0009BA                     l152:
  1814                           
  1815                           ;WS2812b/BitBangWS2812b.c: 33:     if( C >=f )
  1816  0009BA  5021               	movf	WS_dim@f^0,w,c
  1817  0009BC  5C1C               	subwf	WS_dim@C^0,w,c
  1818  0009BE  501D               	movf	(WS_dim@C+1)^0,w,c
  1819  0009C0  0A80               	xorlw	128
  1820  0009C2  6E20               	movwf	??_WS_dim^0,c
  1821  0009C4  5022               	movf	(WS_dim@f+1)^0,w,c
  1822  0009C6  0A80               	xorlw	128
  1823  0009C8  5820               	subwfb	??_WS_dim^0,w,c
  1824  0009CA  A0D8               	btfss	status,0,c
  1825  0009CC  EFEA  F004         	goto	u591
  1826  0009D0  EFEC  F004         	goto	u590
  1827  0009D4                     u591:
  1828  0009D4  EFF2  F004         	goto	l1412
  1829  0009D8                     u590:
  1830  0009D8                     
  1831                           ;WS2812b/BitBangWS2812b.c: 34:     {;WS2812b/BitBangWS2812b.c: 35:         C = C - f;
  1832  0009D8  5021               	movf	WS_dim@f^0,w,c
  1833  0009DA  5C1C               	subwf	WS_dim@C^0,w,c
  1834  0009DC  6E1C               	movwf	WS_dim@C^0,c
  1835  0009DE  5022               	movf	(WS_dim@f+1)^0,w,c
  1836  0009E0  581D               	subwfb	(WS_dim@C+1)^0,w,c
  1837  0009E2  6E1D               	movwf	(WS_dim@C+1)^0,c
  1838  0009E4                     l1412:
  1839                           
  1840                           ;WS2812b/BitBangWS2812b.c: 37:     WS_Word(A, B, C);
  1841  0009E4  C018  F005         	movff	WS_dim@A,WS_Word@A
  1842  0009E8  C019  F006         	movff	WS_dim@A+1,WS_Word@A+1
  1843  0009EC  C01A  F007         	movff	WS_dim@B,WS_Word@B
  1844  0009F0  C01B  F008         	movff	WS_dim@B+1,WS_Word@B+1
  1845  0009F4  C01C  F009         	movff	WS_dim@C,WS_Word@C
  1846  0009F8  C01D  F00A         	movff	WS_dim@C+1,WS_Word@C+1
  1847  0009FC  EC15  F004         	call	_WS_Word	;wreg free
  1848  000A00  0012               	return		;funcret
  1849  000A02                     __end_of_WS_dim:
  1850                           	callstack 0
  1851                           
  1852 ;; *************** function ___wmul *****************
  1853 ;; Defined at:
  1854 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\Umul16.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  multiplier      2    7[COMRAM] unsigned int 
  1857 ;;  multiplicand    2    9[COMRAM] unsigned int 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;  product         2   11[COMRAM] unsigned int 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  2    7[COMRAM] unsigned int 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, prodl, prodh
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1
  1869 ;;      Params:         4       0       0
  1870 ;;      Locals:         2       0       0
  1871 ;;      Temps:          0       0       0
  1872 ;;      Totals:         6       0       0
  1873 ;;Total ram usage:        6 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    3
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_WS_dim
  1880 ;;		_WSWalk
  1881 ;;		_main
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text7
  1886  000C4E                     __ptext7:
  1887                           	callstack 0
  1888  000C4E                     ___wmul:
  1889                           	callstack 27
  1890  000C4E  5008               	movf	___wmul@multiplier^0,w,c
  1891  000C50  020A               	mulwf	___wmul@multiplicand^0,c
  1892  000C52  CFF3 F00C          	movff	prodl,___wmul@product
  1893  000C56  CFF4 F00D          	movff	prodh,___wmul@product+1
  1894  000C5A  5008               	movf	___wmul@multiplier^0,w,c
  1895  000C5C  020B               	mulwf	(___wmul@multiplicand+1)^0,c
  1896  000C5E  50F3               	movf	243,w,c
  1897  000C60  260D               	addwf	(___wmul@product+1)^0,f,c
  1898  000C62  5009               	movf	(___wmul@multiplier+1)^0,w,c
  1899  000C64  020A               	mulwf	___wmul@multiplicand^0,c
  1900  000C66  50F3               	movf	243,w,c
  1901  000C68  260D               	addwf	(___wmul@product+1)^0,f,c
  1902  000C6A  C00C  F008         	movff	___wmul@product,?___wmul
  1903  000C6E  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  1904  000C72  0012               	return		;funcret
  1905  000C74                     __end_of___wmul:
  1906                           	callstack 0
  1907                           
  1908 ;; *************** function _WS_Word *****************
  1909 ;; Defined at:
  1910 ;;		line 40 in file "WS2812b/BitBangWS2812b.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  A               2    4[COMRAM] int 
  1913 ;;  B               2    6[COMRAM] int 
  1914 ;;  C               2    8[COMRAM] int 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  x               2   17[COMRAM] int 
  1917 ;;  x               2   15[COMRAM] int 
  1918 ;;  x               2   13[COMRAM] int 
  1919 ;;  i               2   21[COMRAM] int 
  1920 ;;  Bx              2   19[COMRAM] int 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1
  1930 ;;      Params:         6       0       0
  1931 ;;      Locals:        10       0       0
  1932 ;;      Temps:          3       0       0
  1933 ;;      Totals:        19       0       0
  1934 ;;Total ram usage:       19 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    4
  1937 ;; This function calls:
  1938 ;;		_WS_Write
  1939 ;; This function is called by:
  1940 ;;		_WS_dim
  1941 ;;		_WSTest
  1942 ;;		_WSLoop
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text8
  1947  00082A                     __ptext8:
  1948                           	callstack 0
  1949  00082A                     _WS_Word:
  1950                           	callstack 24
  1951  00082A                     
  1952                           ;WS2812b/BitBangWS2812b.c: 49:     for(int i=23; i!=-1; i--)
  1953  00082A  0E00               	movlw	0
  1954  00082C  6E17               	movwf	(WS_Word@i+1)^0,c
  1955  00082E  0E17               	movlw	23
  1956  000830  6E16               	movwf	WS_Word@i^0,c
  1957  000832                     l1372:
  1958                           
  1959                           ;WS2812b/BitBangWS2812b.c: 50:     {;WS2812b/BitBangWS2812b.c: 51:         if(i>15)
  1960  000832  BE17               	btfsc	(WS_Word@i+1)^0,7,c
  1961  000834  EF25  F004         	goto	u501
  1962  000838  5017               	movf	(WS_Word@i+1)^0,w,c
  1963  00083A  E109               	bnz	u500
  1964  00083C  0E10               	movlw	16
  1965  00083E  5C16               	subwf	WS_Word@i^0,w,c
  1966  000840  A0D8               	btfss	status,0,c
  1967  000842  EF25  F004         	goto	u501
  1968  000846  EF27  F004         	goto	u500
  1969  00084A                     u501:
  1970  00084A  EF42  F004         	goto	l1376
  1971  00084E                     u500:
  1972  00084E                     
  1973                           ;WS2812b/BitBangWS2812b.c: 52:         {;WS2812b/BitBangWS2812b.c: 53:             int x
      +                           = i - 16;
  1974  00084E  0EF0               	movlw	240
  1975  000850  2416               	addwf	WS_Word@i^0,w,c
  1976  000852  6E0E               	movwf	WS_Word@x^0,c
  1977  000854  0EFF               	movlw	255
  1978  000856  2017               	addwfc	(WS_Word@i+1)^0,w,c
  1979  000858  6E0F               	movwf	(WS_Word@x+1)^0,c
  1980                           
  1981                           ;WS2812b/BitBangWS2812b.c: 54:             Bx = 1 & ( A >> x );
  1982  00085A  C00E  F00B         	movff	WS_Word@x,??_WS_Word
  1983  00085E  C005  F00C         	movff	WS_Word@A,??_WS_Word+1
  1984  000862  C006  F00D         	movff	WS_Word@A+1,??_WS_Word+2
  1985  000866  2A0B               	incf	??_WS_Word^0,f,c
  1986  000868  EF39  F004         	goto	u514
  1987  00086C                     u515:
  1988  00086C  340D               	rlcf	(??_WS_Word+2)^0,w,c
  1989  00086E  320D               	rrcf	(??_WS_Word+2)^0,f,c
  1990  000870  320C               	rrcf	(??_WS_Word+1)^0,f,c
  1991  000872                     u514:
  1992  000872  2E0B               	decfsz	??_WS_Word^0,f,c
  1993  000874  EF36  F004         	goto	u515
  1994  000878  0E01               	movlw	1
  1995  00087A  140C               	andwf	(??_WS_Word+1)^0,w,c
  1996  00087C  6E14               	movwf	WS_Word@Bx^0,c
  1997  00087E  6A15               	clrf	(WS_Word@Bx+1)^0,c
  1998                           
  1999                           ;WS2812b/BitBangWS2812b.c: 55:         }
  2000  000880  EF8F  F004         	goto	l1388
  2001  000884                     l1376:
  2002  000884  BE17               	btfsc	(WS_Word@i+1)^0,7,c
  2003  000886  EF4E  F004         	goto	u521
  2004  00088A  5017               	movf	(WS_Word@i+1)^0,w,c
  2005  00088C  E109               	bnz	u520
  2006  00088E  0E08               	movlw	8
  2007  000890  5C16               	subwf	WS_Word@i^0,w,c
  2008  000892  A0D8               	btfss	status,0,c
  2009  000894  EF4E  F004         	goto	u521
  2010  000898  EF50  F004         	goto	u520
  2011  00089C                     u521:
  2012  00089C  EF6B  F004         	goto	l1380
  2013  0008A0                     u520:
  2014  0008A0                     
  2015                           ;WS2812b/BitBangWS2812b.c: 57:         {;WS2812b/BitBangWS2812b.c: 58:             int x
      +                           = i - 8;
  2016  0008A0  0EF8               	movlw	248
  2017  0008A2  2416               	addwf	WS_Word@i^0,w,c
  2018  0008A4  6E10               	movwf	WS_Word@x_591^0,c
  2019  0008A6  0EFF               	movlw	255
  2020  0008A8  2017               	addwfc	(WS_Word@i+1)^0,w,c
  2021  0008AA  6E11               	movwf	(WS_Word@x_591+1)^0,c
  2022                           
  2023                           ;WS2812b/BitBangWS2812b.c: 59:             Bx = 0b00000001 & ( B >> x );
  2024  0008AC  C010  F00B         	movff	WS_Word@x_591,??_WS_Word
  2025  0008B0  C007  F00C         	movff	WS_Word@B,??_WS_Word+1
  2026  0008B4  C008  F00D         	movff	WS_Word@B+1,??_WS_Word+2
  2027  0008B8  2A0B               	incf	??_WS_Word^0,f,c
  2028  0008BA  EF62  F004         	goto	u534
  2029  0008BE                     u535:
  2030  0008BE  340D               	rlcf	(??_WS_Word+2)^0,w,c
  2031  0008C0  320D               	rrcf	(??_WS_Word+2)^0,f,c
  2032  0008C2  320C               	rrcf	(??_WS_Word+1)^0,f,c
  2033  0008C4                     u534:
  2034  0008C4  2E0B               	decfsz	??_WS_Word^0,f,c
  2035  0008C6  EF5F  F004         	goto	u535
  2036  0008CA  0E01               	movlw	1
  2037  0008CC  140C               	andwf	(??_WS_Word+1)^0,w,c
  2038  0008CE  6E14               	movwf	WS_Word@Bx^0,c
  2039  0008D0  6A15               	clrf	(WS_Word@Bx+1)^0,c
  2040                           
  2041                           ;WS2812b/BitBangWS2812b.c: 60:         }
  2042  0008D2  EF8F  F004         	goto	l1388
  2043  0008D6                     l1380:
  2044  0008D6  BE17               	btfsc	(WS_Word@i+1)^0,7,c
  2045  0008D8  EF70  F004         	goto	u541
  2046  0008DC  EF72  F004         	goto	u540
  2047  0008E0                     u541:
  2048  0008E0  EF8B  F004         	goto	l1386
  2049  0008E4                     u540:
  2050  0008E4                     
  2051                           ;WS2812b/BitBangWS2812b.c: 62:         {;WS2812b/BitBangWS2812b.c: 63:             int x
      +                           = i;
  2052  0008E4  C016  F012         	movff	WS_Word@i,WS_Word@x_592
  2053  0008E8  C017  F013         	movff	WS_Word@i+1,WS_Word@x_592+1
  2054  0008EC                     
  2055                           ;WS2812b/BitBangWS2812b.c: 64:             Bx = 0b00000001 & ( C >> x );
  2056  0008EC  C012  F00B         	movff	WS_Word@x_592,??_WS_Word
  2057  0008F0  C009  F00C         	movff	WS_Word@C,??_WS_Word+1
  2058  0008F4  C00A  F00D         	movff	WS_Word@C+1,??_WS_Word+2
  2059  0008F8  2A0B               	incf	??_WS_Word^0,f,c
  2060  0008FA  EF82  F004         	goto	u554
  2061  0008FE                     u555:
  2062  0008FE  340D               	rlcf	(??_WS_Word+2)^0,w,c
  2063  000900  320D               	rrcf	(??_WS_Word+2)^0,f,c
  2064  000902  320C               	rrcf	(??_WS_Word+1)^0,f,c
  2065  000904                     u554:
  2066  000904  2E0B               	decfsz	??_WS_Word^0,f,c
  2067  000906  EF7F  F004         	goto	u555
  2068  00090A  0E01               	movlw	1
  2069  00090C  140C               	andwf	(??_WS_Word+1)^0,w,c
  2070  00090E  6E14               	movwf	WS_Word@Bx^0,c
  2071  000910  6A15               	clrf	(WS_Word@Bx+1)^0,c
  2072                           
  2073                           ;WS2812b/BitBangWS2812b.c: 65:         }
  2074  000912  EF8F  F004         	goto	l1388
  2075  000916                     l1386:
  2076                           
  2077                           ;WS2812b/BitBangWS2812b.c: 67:         {;WS2812b/BitBangWS2812b.c: 68:             Bx = 
      +                          1;
  2078  000916  0E00               	movlw	0
  2079  000918  6E15               	movwf	(WS_Word@Bx+1)^0,c
  2080  00091A  0E01               	movlw	1
  2081  00091C  6E14               	movwf	WS_Word@Bx^0,c
  2082  00091E                     l1388:
  2083                           
  2084                           ;WS2812b/BitBangWS2812b.c: 70:         WS_Write(Bx);
  2085  00091E  C014  F003         	movff	WS_Word@Bx,WS_Write@A
  2086  000922  C015  F004         	movff	WS_Word@Bx+1,WS_Write@A+1
  2087  000926  EC3A  F006         	call	_WS_Write	;wreg free
  2088  00092A                     
  2089                           ;WS2812b/BitBangWS2812b.c: 71:     }
  2090  00092A  0616               	decf	WS_Word@i^0,f,c
  2091  00092C  A0D8               	btfss	status,0,c
  2092  00092E  0617               	decf	(WS_Word@i+1)^0,f,c
  2093  000930  2816               	incf	WS_Word@i^0,w,c
  2094  000932  E106               	bnz	u561
  2095  000934  2817               	incf	(WS_Word@i+1)^0,w,c
  2096  000936  A4D8               	btfss	status,2,c
  2097  000938  EFA0  F004         	goto	u561
  2098  00093C  EFA2  F004         	goto	u560
  2099  000940                     u561:
  2100  000940  EF19  F004         	goto	l1372
  2101  000944                     u560:
  2102  000944  0012               	return		;funcret
  2103  000946                     __end_of_WS_Word:
  2104                           	callstack 0
  2105                           
  2106 ;; *************** function _WS_Write *****************
  2107 ;; Defined at:
  2108 ;;		line 75 in file "WS2812b/BitBangWS2812b.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  A               2    2[COMRAM] int 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1
  2122 ;;      Params:         2       0       0
  2123 ;;      Locals:         0       0       0
  2124 ;;      Temps:          0       0       0
  2125 ;;      Totals:         2       0       0
  2126 ;;Total ram usage:        2 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_WS_Word
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text9
  2137  000C74                     __ptext9:
  2138                           	callstack 0
  2139  000C74                     _WS_Write:
  2140                           	callstack 24
  2141  000C74                     
  2142                           ;WS2812b/BitBangWS2812b.c: 75: void WS_Write( int A );WS2812b/BitBangWS2812b.c: 76: {;WS
      +                          2812b/BitBangWS2812b.c: 77:     if(A)
  2143  000C74  5003               	movf	WS_Write@A^0,w,c
  2144  000C76  1004               	iorwf	(WS_Write@A+1)^0,w,c
  2145  000C78  B4D8               	btfsc	status,2,c
  2146  000C7A  EF41  F006         	goto	u491
  2147  000C7E  EF43  F006         	goto	u490
  2148  000C82                     u491:
  2149  000C82  EF4A  F006         	goto	l168
  2150  000C86                     u490:
  2151  000C86                     
  2152                           ;WS2812b/BitBangWS2812b.c: 78:     {;WS2812b/BitBangWS2812b.c: 79:         LATAbits.LATA
      +                          2 = 1;
  2153  000C86  8489               	bsf	137,2,c	;volatile
  2154                           
  2155                           ;WS2812b/BitBangWS2812b.c: 80:         __nop();
  2156  000C88  F000               	nop	
  2157                           
  2158                           ;WS2812b/BitBangWS2812b.c: 81:         __nop();
  2159  000C8A  F000               	nop	
  2160                           
  2161                           ;WS2812b/BitBangWS2812b.c: 82:         __nop();
  2162  000C8C  F000               	nop	
  2163                           
  2164                           ;WS2812b/BitBangWS2812b.c: 83:         LATAbits.LATA2 = 0;
  2165  000C8E  9489               	bcf	137,2,c	;volatile
  2166                           
  2167                           ;WS2812b/BitBangWS2812b.c: 84:     }
  2168  000C90  EF4C  F006         	goto	l170
  2169  000C94                     l168:
  2170                           
  2171                           ;WS2812b/BitBangWS2812b.c: 86:     {;WS2812b/BitBangWS2812b.c: 87:         LATAbits.LATA
      +                          2 = 1;
  2172  000C94  8489               	bsf	137,2,c	;volatile
  2173                           
  2174                           ;WS2812b/BitBangWS2812b.c: 88:         LATAbits.LATA2 = 0;
  2175  000C96  9489               	bcf	137,2,c	;volatile
  2176  000C98                     l170:
  2177  000C98  0012               	return		;funcret
  2178  000C9A                     __end_of_WS_Write:
  2179                           	callstack 0
  2180                           
  2181 ;; *************** function _SYSTEM_Initialize *****************
  2182 ;; Defined at:
  2183 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1
  2197 ;;      Params:         0       0       0
  2198 ;;      Locals:         0       0       0
  2199 ;;      Temps:          0       0       0
  2200 ;;      Totals:         0       0       0
  2201 ;;Total ram usage:        0 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    5
  2204 ;; This function calls:
  2205 ;;		_ADC1_Initialize
  2206 ;;		_INTERRUPT_Initialize
  2207 ;;		_OSCILLATOR_Initialize
  2208 ;;		_PIN_MANAGER_Initialize
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text10
  2215  000CD6                     __ptext10:
  2216                           	callstack 0
  2217  000CD6                     _SYSTEM_Initialize:
  2218                           	callstack 25
  2219  000CD6                     
  2220                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
  2221  000CD6  EC87  F006         	call	_INTERRUPT_Initialize	;wreg free
  2222  000CDA                     
  2223                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  2224  000CDA  EC11  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  2225  000CDE                     
  2226                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  2227  000CDE  EC7B  F006         	call	_OSCILLATOR_Initialize	;wreg free
  2228  000CE2                     
  2229                           ;mcc_generated_files/mcc.c: 56:     ADC1_Initialize();
  2230  000CE2  EC4D  F006         	call	_ADC1_Initialize	;wreg free
  2231  000CE6  0012               	return		;funcret
  2232  000CE8                     __end_of_SYSTEM_Initialize:
  2233                           	callstack 0
  2234                           
  2235 ;; *************** function _PIN_MANAGER_Initialize *****************
  2236 ;; Defined at:
  2237 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1
  2251 ;;      Params:         0       0       0
  2252 ;;      Locals:         0       0       0
  2253 ;;      Temps:          0       0       0
  2254 ;;      Totals:         0       0       0
  2255 ;;Total ram usage:        0 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    3
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_SYSTEM_Initialize
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text11
  2266  000C22                     __ptext11:
  2267                           	callstack 0
  2268  000C22                     _PIN_MANAGER_Initialize:
  2269                           	callstack 26
  2270  000C22                     
  2271                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2272  000C22  0E00               	movlw	0
  2273  000C24  6E89               	movwf	137,c	;volatile
  2274                           
  2275                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  2276  000C26  0E00               	movlw	0
  2277  000C28  6E8A               	movwf	138,c	;volatile
  2278                           
  2279                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  2280  000C2A  0E00               	movlw	0
  2281  000C2C  6E8B               	movwf	139,c	;volatile
  2282                           
  2283                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
  2284  000C2E  0E33               	movlw	51
  2285  000C30  6E92               	movwf	146,c	;volatile
  2286                           
  2287                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xF0;
  2288  000C32  0EF0               	movlw	240
  2289  000C34  6E93               	movwf	147,c	;volatile
  2290                           
  2291                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFC;
  2292  000C36  0EFC               	movlw	252
  2293  000C38  6E94               	movwf	148,c	;volatile
  2294                           
  2295                           ;mcc_generated_files/pin_manager.c: 74:     ANSEL = 0xFB;
  2296  000C3A  0EFB               	movlw	251
  2297  000C3C  6E7E               	movwf	126,c	;volatile
  2298                           
  2299                           ;mcc_generated_files/pin_manager.c: 75:     ANSELH = 0x0F;
  2300  000C3E  0E0F               	movlw	15
  2301  000C40  6E7F               	movwf	127,c	;volatile
  2302                           
  2303                           ;mcc_generated_files/pin_manager.c: 80:     WPUB = 0x80;
  2304  000C42  0E80               	movlw	128
  2305  000C44  6E78               	movwf	120,c	;volatile
  2306                           
  2307                           ;mcc_generated_files/pin_manager.c: 81:     WPUA = 0x3A;
  2308  000C46  0E3A               	movlw	58
  2309  000C48  6E77               	movwf	119,c	;volatile
  2310  000C4A                     
  2311                           ;mcc_generated_files/pin_manager.c: 82:     INTCON2bits.nRBPU = 0;
  2312  000C4A  9EF1               	bcf	241,7,c	;volatile
  2313  000C4C  0012               	return		;funcret
  2314  000C4E                     __end_of_PIN_MANAGER_Initialize:
  2315                           	callstack 0
  2316                           
  2317 ;; *************** function _OSCILLATOR_Initialize *****************
  2318 ;; Defined at:
  2319 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, status,2
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1
  2333 ;;      Params:         0       0       0
  2334 ;;      Locals:         0       0       0
  2335 ;;      Temps:          0       0       0
  2336 ;;      Totals:         0       0       0
  2337 ;;Total ram usage:        0 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    3
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_SYSTEM_Initialize
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text12
  2348  000CF6                     __ptext12:
  2349                           	callstack 0
  2350  000CF6                     _OSCILLATOR_Initialize:
  2351                           	callstack 26
  2352  000CF6                     
  2353                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x70;
  2354  000CF6  0E70               	movlw	112
  2355  000CF8  6ED3               	movwf	211,c	;volatile
  2356                           
  2357                           ;mcc_generated_files/mcc.c: 64:     OSCCON2 = 0x04;
  2358  000CFA  0E04               	movlw	4
  2359  000CFC  6ED2               	movwf	210,c	;volatile
  2360                           
  2361                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  2362  000CFE  0E00               	movlw	0
  2363  000D00  6E9B               	movwf	155,c	;volatile
  2364  000D02  0012               	return		;funcret
  2365  000D04                     __end_of_OSCILLATOR_Initialize:
  2366                           	callstack 0
  2367                           
  2368 ;; *************** function _INTERRUPT_Initialize *****************
  2369 ;; Defined at:
  2370 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;		None
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		None
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1
  2384 ;;      Params:         0       0       0
  2385 ;;      Locals:         0       0       0
  2386 ;;      Temps:          0       0       0
  2387 ;;      Totals:         0       0       0
  2388 ;;Total ram usage:        0 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    3
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		_SYSTEM_Initialize
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text13
  2399  000D0E                     __ptext13:
  2400                           	callstack 0
  2401  000D0E                     _INTERRUPT_Initialize:
  2402                           	callstack 26
  2403  000D0E                     
  2404                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
  2405  000D0E  9ED0               	bcf	208,7,c	;volatile
  2406  000D10  0012               	return		;funcret
  2407  000D12                     __end_of_INTERRUPT_Initialize:
  2408                           	callstack 0
  2409                           
  2410 ;; *************** function _ADC1_Initialize *****************
  2411 ;; Defined at:
  2412 ;;		line 62 in file "mcc_generated_files/adc1.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;		None
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;		None
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  1    wreg      void 
  2419 ;; Registers used:
  2420 ;;		wreg, status,2, status,0, cstack
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMRAM   BANK0   BANK1
  2426 ;;      Params:         0       0       0
  2427 ;;      Locals:         0       0       0
  2428 ;;      Temps:          0       0       0
  2429 ;;      Totals:         0       0       0
  2430 ;;Total ram usage:        0 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:    4
  2433 ;; This function calls:
  2434 ;;		_ADC1_SetInterruptHandler
  2435 ;; This function is called by:
  2436 ;;		_SYSTEM_Initialize
  2437 ;;		_main
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text14
  2442  000C9A                     __ptext14:
  2443                           	callstack 0
  2444  000C9A                     _ADC1_Initialize:
  2445                           	callstack 25
  2446  000C9A                     
  2447                           ;mcc_generated_files/adc1.c: 67:     ADCON1 = 0x00;
  2448  000C9A  0E00               	movlw	0
  2449  000C9C  6EC1               	movwf	193,c	;volatile
  2450                           
  2451                           ;mcc_generated_files/adc1.c: 70:     ADCON2 = 0xBE;
  2452  000C9E  0EBE               	movlw	190
  2453  000CA0  6EC0               	movwf	192,c	;volatile
  2454                           
  2455                           ;mcc_generated_files/adc1.c: 73:     ADRESL = 0x00;
  2456  000CA2  0E00               	movlw	0
  2457  000CA4  6EC3               	movwf	195,c	;volatile
  2458                           
  2459                           ;mcc_generated_files/adc1.c: 76:     ADRESH = 0x00;
  2460  000CA6  0E00               	movlw	0
  2461  000CA8  6EC4               	movwf	196,c	;volatile
  2462                           
  2463                           ;mcc_generated_files/adc1.c: 79:     ADCON0 = 0x29;
  2464  000CAA  0E29               	movlw	41
  2465  000CAC  6EC2               	movwf	194,c	;volatile
  2466  000CAE                     
  2467                           ;mcc_generated_files/adc1.c: 82:     PIE1bits.ADIE = 1;
  2468  000CAE  8C9D               	bsf	157,6,c	;volatile
  2469  000CB0                     
  2470                           ;mcc_generated_files/adc1.c: 85:     ADC1_SetInterruptHandler(ADC1_DefaultInterruptHandl
      +                          er);
  2471  000CB0  0E12               	movlw	low _ADC1_DefaultInterruptHandler
  2472  000CB2  6E03               	movwf	ADC1_SetInterruptHandler@InterruptHandler^0,c
  2473  000CB4  0E0D               	movlw	high _ADC1_DefaultInterruptHandler
  2474  000CB6  6E04               	movwf	(ADC1_SetInterruptHandler@InterruptHandler+1)^0,c
  2475  000CB8  EC82  F006         	call	_ADC1_SetInterruptHandler	;wreg free
  2476  000CBC  0012               	return		;funcret
  2477  000CBE                     __end_of_ADC1_Initialize:
  2478                           	callstack 0
  2479                           
  2480 ;; *************** function _ADC1_SetInterruptHandler *****************
  2481 ;; Defined at:
  2482 ;;		line 151 in file "mcc_generated_files/adc1.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  InterruptHan    2    2[COMRAM] PTR FTN()void 
  2485 ;;		 -> ADC1_DefaultInterruptHandler(1), 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;		None
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg, status,2, status,0
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMRAM   BANK0   BANK1
  2497 ;;      Params:         2       0       0
  2498 ;;      Locals:         0       0       0
  2499 ;;      Temps:          0       0       0
  2500 ;;      Totals:         2       0       0
  2501 ;;Total ram usage:        2 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    3
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_ADC1_Initialize
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text15
  2512  000D04                     __ptext15:
  2513                           	callstack 0
  2514  000D04                     _ADC1_SetInterruptHandler:
  2515                           	callstack 25
  2516  000D04                     
  2517                           ;mcc_generated_files/adc1.c: 152:     ADC1_InterruptHandler = InterruptHandler;
  2518  000D04  C003  F041         	movff	ADC1_SetInterruptHandler@InterruptHandler,_ADC1_InterruptHandler
  2519  000D08  C004  F042         	movff	ADC1_SetInterruptHandler@InterruptHandler+1,_ADC1_InterruptHandler+1
  2520  000D0C  0012               	return		;funcret
  2521  000D0E                     __end_of_ADC1_SetInterruptHandler:
  2522                           	callstack 0
  2523                           
  2524 ;; *************** function _ADC1_SelectChannel *****************
  2525 ;; Defined at:
  2526 ;;		line 88 in file "mcc_generated_files/adc1.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;  channel         1    wreg     enum E2449
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  channel         1    3[COMRAM] enum E2449
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1
  2540 ;;      Params:         0       0       0
  2541 ;;      Locals:         1       0       0
  2542 ;;      Temps:          1       0       0
  2543 ;;      Totals:         2       0       0
  2544 ;;Total ram usage:        2 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    3
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text16
  2555  000CBE                     __ptext16:
  2556                           	callstack 0
  2557  000CBE                     _ADC1_SelectChannel:
  2558                           	callstack 27
  2559                           
  2560                           ;incstack = 0
  2561                           ;ADC1_SelectChannel@channel stored from wreg
  2562  000CBE  6E04               	movwf	ADC1_SelectChannel@channel^0,c
  2563  000CC0                     
  2564                           ;mcc_generated_files/adc1.c: 88: void ADC1_SelectChannel(adc_channel_t channel);mcc_gene
      +                          rated_files/adc1.c: 89: {;mcc_generated_files/adc1.c: 91:     ADCON0bits.CHS = channel;
  2565  000CC0  C004  F003         	movff	ADC1_SelectChannel@channel,??_ADC1_SelectChannel
  2566  000CC4  4603               	rlncf	??_ADC1_SelectChannel^0,f,c
  2567  000CC6  4603               	rlncf	??_ADC1_SelectChannel^0,f,c
  2568  000CC8  50C2               	movf	194,w,c	;volatile
  2569  000CCA  1803               	xorwf	??_ADC1_SelectChannel^0,w,c
  2570  000CCC  0BC3               	andlw	-61
  2571  000CCE  1803               	xorwf	??_ADC1_SelectChannel^0,w,c
  2572  000CD0  6EC2               	movwf	194,c	;volatile
  2573  000CD2                     
  2574                           ;mcc_generated_files/adc1.c: 93:     ADCON0bits.ADON = 1;
  2575  000CD2  80C2               	bsf	194,0,c	;volatile
  2576  000CD4  0012               	return		;funcret
  2577  000CD6                     __end_of_ADC1_SelectChannel:
  2578                           	callstack 0
  2579                           
  2580 ;; *************** function _ADC1_GetConversion *****************
  2581 ;; Defined at:
  2582 ;;		line 115 in file "mcc_generated_files/adc1.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  channel         1    wreg     enum E2449
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  channel         1    6[COMRAM] enum E2449
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  2    2[COMRAM] unsigned short 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1
  2596 ;;      Params:         2       0       0
  2597 ;;      Locals:         1       0       0
  2598 ;;      Temps:          2       0       0
  2599 ;;      Totals:         5       0       0
  2600 ;;Total ram usage:        5 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    3
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_main
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text17
  2611  000BB8                     __ptext17:
  2612                           	callstack 0
  2613  000BB8                     _ADC1_GetConversion:
  2614                           	callstack 27
  2615                           
  2616                           ;incstack = 0
  2617                           ;ADC1_GetConversion@channel stored from wreg
  2618  000BB8  6E07               	movwf	ADC1_GetConversion@channel^0,c
  2619  000BBA                     
  2620                           ;mcc_generated_files/adc1.c: 115: adc_result_t ADC1_GetConversion(adc_channel_t channel)
      +                          ;mcc_generated_files/adc1.c: 116: {;mcc_generated_files/adc1.c: 118:     ADCON0bits.CHS 
      +                          = channel;
  2621  000BBA  C007  F005         	movff	ADC1_GetConversion@channel,??_ADC1_GetConversion
  2622  000BBE  4605               	rlncf	??_ADC1_GetConversion^0,f,c
  2623  000BC0  4605               	rlncf	??_ADC1_GetConversion^0,f,c
  2624  000BC2  50C2               	movf	194,w,c	;volatile
  2625  000BC4  1805               	xorwf	??_ADC1_GetConversion^0,w,c
  2626  000BC6  0BC3               	andlw	-61
  2627  000BC8  1805               	xorwf	??_ADC1_GetConversion^0,w,c
  2628  000BCA  6EC2               	movwf	194,c	;volatile
  2629  000BCC                     
  2630                           ;mcc_generated_files/adc1.c: 121:     ADCON0bits.ADON = 1;
  2631  000BCC  80C2               	bsf	194,0,c	;volatile
  2632  000BCE                     
  2633                           ;mcc_generated_files/adc1.c: 124:     ADCON0bits.GO_nDONE = 1;
  2634  000BCE  82C2               	bsf	194,1,c	;volatile
  2635  000BD0                     l92:
  2636                           
  2637                           ;mcc_generated_files/adc1.c: 127:     while (ADCON0bits.GO_nDONE)
  2638  000BD0  B2C2               	btfsc	194,1,c	;volatile
  2639  000BD2  EFED  F005         	goto	u681
  2640  000BD6  EFEF  F005         	goto	u680
  2641  000BDA                     u681:
  2642  000BDA  EFE8  F005         	goto	l92
  2643  000BDE                     u680:
  2644  000BDE                     
  2645                           ;mcc_generated_files/adc1.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  2646  000BDE  50C4               	movf	196,w,c	;volatile
  2647  000BE0  6E06               	movwf	(??_ADC1_GetConversion+1)^0,c
  2648  000BE2  6A05               	clrf	??_ADC1_GetConversion^0,c
  2649  000BE4  50C3               	movf	195,w,c	;volatile
  2650  000BE6  2405               	addwf	??_ADC1_GetConversion^0,w,c
  2651  000BE8  6E03               	movwf	?_ADC1_GetConversion^0,c
  2652  000BEA  0E00               	movlw	0
  2653  000BEC  2006               	addwfc	(??_ADC1_GetConversion+1)^0,w,c
  2654  000BEE  6E04               	movwf	(?_ADC1_GetConversion+1)^0,c
  2655  000BF0  0012               	return		;funcret
  2656  000BF2                     __end_of_ADC1_GetConversion:
  2657                           	callstack 0
  2658                           
  2659 ;; *************** function _INTERRUPT_InterruptManager *****************
  2660 ;; Defined at:
  2661 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1
  2675 ;;      Params:         0       0       0
  2676 ;;      Locals:         0       0       0
  2677 ;;      Temps:          2       0       0
  2678 ;;      Totals:         2       0       0
  2679 ;;Total ram usage:        2 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    2
  2682 ;; This function calls:
  2683 ;;		_ADC1_ISR
  2684 ;; This function is called by:
  2685 ;;		Interrupt level 2
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	intcode
  2690  000008                     __pintcode:
  2691                           	callstack 0
  2692  000008                     _INTERRUPT_InterruptManager:
  2693                           	callstack 23
  2694                           
  2695                           ;incstack = 0
  2696  000008  8243               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2697  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
  2698  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2699  000012                     
  2700                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.PEIE == 1)
  2701  000012  ACF2               	btfss	242,6,c	;volatile
  2702  000014  EF0E  F000         	goto	i2u34_41
  2703  000018  EF10  F000         	goto	i2u34_40
  2704  00001C                     i2u34_41:
  2705  00001C  EF20  F000         	goto	i2l130
  2706  000020                     i2u34_40:
  2707  000020                     
  2708                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  2709  000020  AC9D               	btfss	157,6,c	;volatile
  2710  000022  EF15  F000         	goto	i2u35_41
  2711  000026  EF17  F000         	goto	i2u35_40
  2712  00002A                     i2u35_41:
  2713  00002A  EF20  F000         	goto	i2l130
  2714  00002E                     i2u35_40:
  2715  00002E  AC9E               	btfss	158,6,c	;volatile
  2716  000030  EF1C  F000         	goto	i2u36_41
  2717  000034  EF1E  F000         	goto	i2u36_40
  2718  000038                     i2u36_41:
  2719  000038  EF20  F000         	goto	i2l130
  2720  00003C                     i2u36_40:
  2721  00003C                     
  2722                           ;mcc_generated_files/interrupt_manager.c: 64:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 65:             ADC1_ISR();
  2723  00003C  ECF9  F005         	call	_ADC1_ISR	;wreg free
  2724  000040                     i2l130:
  2725  000040  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2726  000044  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2727  000048  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2728  00004A  0011               	retfie		f
  2729  00004C                     __end_of_INTERRUPT_InterruptManager:
  2730                           	callstack 0
  2731                           
  2732 ;; *************** function _ADC1_ISR *****************
  2733 ;; Defined at:
  2734 ;;		line 140 in file "mcc_generated_files/adc1.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1
  2748 ;;      Params:         0       0       0
  2749 ;;      Locals:         0       0       0
  2750 ;;      Temps:          0       0       0
  2751 ;;      Totals:         0       0       0
  2752 ;;Total ram usage:        0 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    1
  2755 ;; This function calls:
  2756 ;;		Absolute function
  2757 ;;		_ADC1_DefaultInterruptHandler
  2758 ;; This function is called by:
  2759 ;;		_INTERRUPT_InterruptManager
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text19
  2764  000BF2                     __ptext19:
  2765                           	callstack 0
  2766  000BF2                     _ADC1_ISR:
  2767                           	callstack 23
  2768  000BF2                     
  2769                           ;mcc_generated_files/adc1.c: 143:     PIR1bits.ADIF = 0;
  2770  000BF2  9C9E               	bcf	158,6,c	;volatile
  2771  000BF4                     
  2772                           ;mcc_generated_files/adc1.c: 145:  if(ADC1_InterruptHandler)
  2773  000BF4  5041               	movf	_ADC1_InterruptHandler^0,w,c
  2774  000BF6  1042               	iorwf	(_ADC1_InterruptHandler+1)^0,w,c
  2775  000BF8  B4D8               	btfsc	status,2,c
  2776  000BFA  EF01  F006         	goto	i2u21_41
  2777  000BFE  EF03  F006         	goto	i2u21_40
  2778  000C02                     i2u21_41:
  2779  000C02  EF10  F006         	goto	i2l102
  2780  000C06                     i2u21_40:
  2781  000C06                     
  2782                           ;mcc_generated_files/adc1.c: 146:     {;mcc_generated_files/adc1.c: 147:         ADC1_In
      +                          terruptHandler();
  2783  000C06  D802               	call	i2u22_48
  2784  000C08  EF10  F006         	goto	i2u22_49
  2785  000C0C                     i2u22_48:
  2786  000C0C  0005               	push	
  2787  000C0E  6EFA               	movwf	pclath,c
  2788  000C10  5041               	movf	_ADC1_InterruptHandler^0,w,c
  2789  000C12  6EFD               	movwf	tosl,c
  2790  000C14  5042               	movf	(_ADC1_InterruptHandler+1)^0,w,c
  2791  000C16  6EFE               	movwf	tosh,c
  2792  000C18  50F8               	movf	tblptru,w,c
  2793  000C1A  6EFF               	movwf	tosu,c
  2794  000C1C  50FA               	movf	pclath,w,c
  2795  000C1E  0012               	return		;indir
  2796  000C20                     i2u22_49:
  2797  000C20                     i2l102:
  2798  000C20  0012               	return		;funcret
  2799  000C22                     __end_of_ADC1_ISR:
  2800                           	callstack 0
  2801                           
  2802 ;; *************** function _ADC1_DefaultInterruptHandler *****************
  2803 ;; Defined at:
  2804 ;;		line 155 in file "mcc_generated_files/adc1.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;		None
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;		None
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		None
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1
  2818 ;;      Params:         0       0       0
  2819 ;;      Locals:         0       0       0
  2820 ;;      Temps:          0       0       0
  2821 ;;      Totals:         0       0       0
  2822 ;;Total ram usage:        0 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_ADC1_Initialize
  2828 ;;		_ADC1_ISR
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text20
  2833  000D12                     __ptext20:
  2834                           	callstack 0
  2835  000D12                     _ADC1_DefaultInterruptHandler:
  2836                           	callstack 23
  2837  000D12  0012               	return		;funcret
  2838  000D14                     __end_of_ADC1_DefaultInterruptHandler:
  2839                           	callstack 0
  2840                           
  2841                           	psect	text21
  2842  000000                     __ptext21:
  2843                           	callstack 0
  2844  000000                     
  2845                           	psect	rparam
  2846  0000                     
  2847                           	psect	temp
  2848  000043                     btemp:
  2849                           	callstack 0
  2850  000043                     	ds	1
  2851  0000                     int$flags	set	btemp
  2852  0000                     wtemp8	set	btemp+1
  2853  0000                     ttemp5	set	btemp+1
  2854  0000                     ttemp6	set	btemp+4
  2855  0000                     ttemp7	set	btemp+8
  2856                           
  2857                           	psect	idloc
  2858                           
  2859                           ;Config register IDLOC0 @ 0x200000
  2860                           ;	unspecified, using default values
  2861  200000                     	org	2097152
  2862  200000  FF                 	db	255
  2863                           
  2864                           ;Config register IDLOC1 @ 0x200001
  2865                           ;	unspecified, using default values
  2866  200001                     	org	2097153
  2867  200001  FF                 	db	255
  2868                           
  2869                           ;Config register IDLOC2 @ 0x200002
  2870                           ;	unspecified, using default values
  2871  200002                     	org	2097154
  2872  200002  FF                 	db	255
  2873                           
  2874                           ;Config register IDLOC3 @ 0x200003
  2875                           ;	unspecified, using default values
  2876  200003                     	org	2097155
  2877  200003  FF                 	db	255
  2878                           
  2879                           ;Config register IDLOC4 @ 0x200004
  2880                           ;	unspecified, using default values
  2881  200004                     	org	2097156
  2882  200004  FF                 	db	255
  2883                           
  2884                           ;Config register IDLOC5 @ 0x200005
  2885                           ;	unspecified, using default values
  2886  200005                     	org	2097157
  2887  200005  FF                 	db	255
  2888                           
  2889                           ;Config register IDLOC6 @ 0x200006
  2890                           ;	unspecified, using default values
  2891  200006                     	org	2097158
  2892  200006  FF                 	db	255
  2893                           
  2894                           ;Config register IDLOC7 @ 0x200007
  2895                           ;	unspecified, using default values
  2896  200007                     	org	2097159
  2897  200007  FF                 	db	255
  2898                           
  2899                           	psect	config
  2900                           
  2901                           ; Padding undefined space
  2902  300000                     	org	3145728
  2903  300000  FF                 	db	255
  2904                           
  2905                           ;Config register CONFIG1H @ 0x300001
  2906                           ;	Oscillator Selection bits
  2907                           ;	FOSC = IRC, Internal RC oscillator
  2908                           ;	4 X PLL Enable bit
  2909                           ;	PLLEN = OFF, PLL is under software control
  2910                           ;	Primary Clock Enable bit
  2911                           ;	PCLKEN = ON, Primary clock enabled
  2912                           ;	Fail-Safe Clock Monitor Enable
  2913                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2914                           ;	Internal/External Oscillator Switchover bit
  2915                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2916  300001                     	org	3145729
  2917  300001  28                 	db	40
  2918                           
  2919                           ;Config register CONFIG2L @ 0x300002
  2920                           ;	Power-up Timer Enable bit
  2921                           ;	PWRTEN = OFF, PWRT disabled
  2922                           ;	Brown-out Reset Enable bits
  2923                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2924                           ;	Brown Out Reset Voltage bits
  2925                           ;	BORV = 19, VBOR set to 1.9 V nominal
  2926  300002                     	org	3145730
  2927  300002  1F                 	db	31
  2928                           
  2929                           ;Config register CONFIG2H @ 0x300003
  2930                           ;	Watchdog Timer Enable bit
  2931                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  2932                           ;	Watchdog Timer Postscale Select bits
  2933                           ;	WDTPS = 32768, 1:32768
  2934  300003                     	org	3145731
  2935  300003  1E                 	db	30
  2936                           
  2937                           ; Padding undefined space
  2938  300004                     	org	3145732
  2939  300004  FF                 	db	255
  2940                           
  2941                           ;Config register CONFIG3H @ 0x300005
  2942                           ;	HFINTOSC Fast Start-up bit
  2943                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
  2944                           ;	MCLR Pin Enable bit
  2945                           ;	MCLRE = ON, MCLR pin enabled, RA3 input pin disabled
  2946  300005                     	org	3145733
  2947  300005  80                 	db	128
  2948                           
  2949                           ;Config register CONFIG4L @ 0x300006
  2950                           ;	Stack Full/Underflow Reset Enable bit
  2951                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2952                           ;	Single-Supply ICSP Enable bit
  2953                           ;	LVP = OFF, Single-Supply ICSP disabled
  2954                           ;	Boot Block Size Select bit
  2955                           ;	BBSIZ = OFF, 1kW boot block size
  2956                           ;	Extended Instruction Set Enable bit
  2957                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2958                           ;	Background Debugger Enable bit
  2959                           ;	DEBUG = OFF, Background debugger disabled, RA0 and RA1 configured as general purpose I
      +                          /O pins
  2960  300006                     	org	3145734
  2961  300006  81                 	db	129
  2962                           
  2963                           ; Padding undefined space
  2964  300007                     	org	3145735
  2965  300007  FF                 	db	255
  2966                           
  2967                           ;Config register CONFIG5L @ 0x300008
  2968                           ;	Code Protection bit
  2969                           ;	CP0 = OFF, Block 0 not code-protected
  2970                           ;	Code Protection bit
  2971                           ;	CP1 = OFF, Block 1 not code-protected
  2972  300008                     	org	3145736
  2973  300008  03                 	db	3
  2974                           
  2975                           ;Config register CONFIG5H @ 0x300009
  2976                           ;	Boot Block Code Protection bit
  2977                           ;	CPB = OFF, Boot block not code-protected
  2978                           ;	Data EEPROM Code Protection bit
  2979                           ;	CPD = OFF, Data EEPROM not code-protected
  2980  300009                     	org	3145737
  2981  300009  C0                 	db	192
  2982                           
  2983                           ;Config register CONFIG6L @ 0x30000A
  2984                           ;	Write Protection bit
  2985                           ;	WRT0 = OFF, Block 0 not write-protected
  2986                           ;	Write Protection bit
  2987                           ;	WRT1 = OFF, Block 1 not write-protected
  2988  30000A                     	org	3145738
  2989  30000A  03                 	db	3
  2990                           
  2991                           ;Config register CONFIG6H @ 0x30000B
  2992                           ;	Configuration Register Write Protection bit
  2993                           ;	WRTC = OFF, Configuration registers not write-protected
  2994                           ;	Boot Block Write Protection bit
  2995                           ;	WRTB = OFF, Boot block not write-protected
  2996                           ;	Data EEPROM Write Protection bit
  2997                           ;	WRTD = OFF, Data EEPROM not write-protected
  2998  30000B                     	org	3145739
  2999  30000B  E0                 	db	224
  3000                           
  3001                           ;Config register CONFIG7L @ 0x30000C
  3002                           ;	Table Read Protection bit
  3003                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  3004                           ;	Table Read Protection bit
  3005                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  3006  30000C                     	org	3145740
  3007  30000C  03                 	db	3
  3008                           
  3009                           ;Config register CONFIG7H @ 0x30000D
  3010                           ;	Boot Block Table Read Protection bit
  3011                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  3012  30000D                     	org	3145741
  3013  30000D  40                 	db	64
  3014                           tosu	equ	0xFFF
  3015                           tosh	equ	0xFFE
  3016                           tosl	equ	0xFFD
  3017                           stkptr	equ	0xFFC
  3018                           pclatu	equ	0xFFB
  3019                           pclath	equ	0xFFA
  3020                           pcl	equ	0xFF9
  3021                           tblptru	equ	0xFF8
  3022                           tblptrh	equ	0xFF7
  3023                           tblptrl	equ	0xFF6
  3024                           tablat	equ	0xFF5
  3025                           prodh	equ	0xFF4
  3026                           prodl	equ	0xFF3
  3027                           indf0	equ	0xFEF
  3028                           postinc0	equ	0xFEE
  3029                           postdec0	equ	0xFED
  3030                           preinc0	equ	0xFEC
  3031                           plusw0	equ	0xFEB
  3032                           fsr0h	equ	0xFEA
  3033                           fsr0l	equ	0xFE9
  3034                           wreg	equ	0xFE8
  3035                           indf1	equ	0xFE7
  3036                           postinc1	equ	0xFE6
  3037                           postdec1	equ	0xFE5
  3038                           preinc1	equ	0xFE4
  3039                           plusw1	equ	0xFE3
  3040                           fsr1h	equ	0xFE2
  3041                           fsr1l	equ	0xFE1
  3042                           bsr	equ	0xFE0
  3043                           indf2	equ	0xFDF
  3044                           postinc2	equ	0xFDE
  3045                           postdec2	equ	0xFDD
  3046                           preinc2	equ	0xFDC
  3047                           plusw2	equ	0xFDB
  3048                           fsr2h	equ	0xFDA
  3049                           fsr2l	equ	0xFD9
  3050                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    84
    Data        0
    BSS         0
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      66
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    ADC1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC1_DefaultInterruptHandler(), 

    ADC1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ADC1_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_WSSlow
    ___lwdiv->___wmul
    _WSWalk->_WS_dim
    _WSTest->_WS_RYGCBM
    _WSSlow->_WS_RYGCBM
    _WS_RYGCBM->_WS_dim
    _WS_dim->_WS_Word
    ___wmul->_ADC1_GetConversion
    _WS_Word->_WS_Write
    _ADC1_Initialize->_ADC1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   59850
                                             56 COMRAM     8     8      0
                 _ADC1_GetConversion
                    _ADC1_Initialize
                 _ADC1_SelectChannel
                  _SYSTEM_Initialize
                             _WSSlow
                             _WSTest
                             _WSWalk
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     314
                                             13 COMRAM     7     3      4
                 _ADC1_GetConversion (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _WSWalk                                              18    14      4   16316
                                             34 COMRAM    18    14      4
                             _WS_dim
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _WSTest                                               8     4      4   25514
                                             45 COMRAM     8     4      4
                          _WS_RYGCBM
                            _WS_Word
 ---------------------------------------------------------------------------------
 (1) _WSSlow                                              11     5      6   16394
                                             45 COMRAM    11     5      6
                          _WS_RYGCBM
 ---------------------------------------------------------------------------------
 (2) _WS_RYGCBM                                           11     7      4   15942
                                             34 COMRAM    11     7      4
                             _WS_dim
 ---------------------------------------------------------------------------------
 (2) _WS_dim                                              11     3      8   14861
                                             23 COMRAM    11     3      8
                            _WS_Word
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     919
                                              7 COMRAM     6     2      4
                 _ADC1_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (3) _WS_Word                                             19    13      6    9330
                                              4 COMRAM    19    13      6
                           _WS_Write
 ---------------------------------------------------------------------------------
 (4) _WS_Write                                             2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0      98
           _ADC1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _ADC1_SetInterruptHandler                             2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC1_SelectChannel                                   2     2      0      15
                                              2 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC1_GetConversion                                   5     3      2      22
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           2     2      0       0
                                              0 COMRAM     2     2      0
                           _ADC1_ISR
 ---------------------------------------------------------------------------------
 (7) _ADC1_ISR                                             0     0      0       0
                   Absolute function *
       _ADC1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _ADC1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC1_GetConversion
   _ADC1_Initialize
     _ADC1_SetInterruptHandler
   _ADC1_SelectChannel
   _SYSTEM_Initialize
     _ADC1_Initialize
       _ADC1_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _WSSlow
     _WS_RYGCBM
       _WS_dim
         _WS_Word
           _WS_Write
         ___wmul
           _ADC1_GetConversion (ARG)
   _WSTest
     _WS_RYGCBM
       _WS_dim
         _WS_Word
           _WS_Write
         ___wmul
           _ADC1_GetConversion (ARG)
     _WS_Word
       _WS_Write
   _WSWalk
     _WS_dim
       _WS_Word
         _WS_Write
       ___wmul
         _ADC1_GetConversion (ARG)
     ___wmul
       _ADC1_GetConversion (ARG)
   ___lwdiv
     _ADC1_GetConversion (ARG)
     ___wmul (ARG)
       _ADC1_GetConversion (ARG)
   ___wmul
     _ADC1_GetConversion (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC1_ISR
     Absolute function(Fake) *
     _ADC1_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     40      42       1       70.2%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
ABS                  0      0      42       7        0.0%
BIGRAM             1FF      0       0       8        0.0%
DATA                 0      0      42       9        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Dec 08 01:22:39 2020

                                      l20 0D02                                        l17 0CE6  
                                      l47 0C4C                                        l80 0CD4  
                                      l92 0BD0                                        l77 0CBC  
                                      l95 0BF0                       ___wmul@multiplicand 000A  
              __end_of_ADC1_GetConversion 0BF2                                       l200 0B42  
                                     l105 0D0C                                       l121 0D10  
                                     l212 06CC                                       l151 0990  
                                     l152 09BA                                       l170 0C98  
                                     l154 0A00                                       l165 0944  
                                     l261 0758                                       l175 0A54  
                                     l263 075A                                       l168 0C94  
                                     l194 0524                                       l275 0C72  
                                     l179 0AA8                                       l773 0BB6  
                                     l766 0BAE                                       _GIE 007F97  
                                     u500 084E                                       u501 084A  
                                     u520 08A0                                       u600 036E  
                                     u521 089C                                       u601 036A  
                                     u514 0872                                       u610 03B0  
                                     u515 086C                                       u611 03AC  
                                     u540 08E4                                       u620 03F0  
                                     u700 0AA8                                       u541 08E0  
                                     u621 03EC                                       u701 0AA4  
                                     u534 08C4                                       u630 0432  
                                     u710 0AF4                                       u535 08BE  
                                     u631 042E                                       u711 0AF0  
                                     u560 0944                                       u640 0472  
                                     u720 0554                                       u561 0940  
                                     u641 046E                                       u721 0550  
                                     u490 0C86                                       u554 0904  
                                     u570 0984                                       u650 04B4  
                                     u730 0630                                       u491 0C82  
                                     u555 08FE                                       u571 0980  
                                     u651 04B0                                       u731 062C  
                                     u580 09AE                                       u660 04F4  
                                     u740 0654                                       u900 0798  
                                     u581 09AA                                       u661 04F0  
                                     u741 0650                                       u901 0794  
                                     u590 09D8                                       u670 0516  
                                     u750 0672                                       u910 07CC  
                                     u591 09D4                                       u671 0512  
                                     u751 066E                                       u911 07C8  
                                     u680 0BDE                                       u760 06CC  
                                     u681 0BDA                                       u761 06C8  
                                     u690 0A54                                       u770 0B5E  
                                     u691 0A50                                       u771 0B5A  
                                     u780 0B7C                                       u781 0B78  
                                     u790 0B98                                       u870 0730  
                                     u791 0B94                                       u927 0736  
                                     u871 072C                                       u880 074E  
                                     u937 07F8                                       u881 074A  
                                     u890 076E                                       u947 0812  
                                     u891 076A                                       u957 0678  
                                     u967 068A                                       u977 06A0  
                                     u987 0AFA                                       u997 0B0C  
                                     tosl 000FFD                                       wreg 000FE8  
                _ADC1_SetInterruptHandler 0D04                                      l1000 0D0E  
                                    l1002 0C22                                      l1004 0C4A  
                                    l1006 0CF6                                      l1400 0D04  
                                    l1082 0CC0                                      l1410 09D8  
                                    l1402 0946                                      l1084 0CD2  
                                    l1412 09E4                                      l1404 0966  
                                    l1420 0256                                      l1500 0A0E  
                                    l1414 0C9A                                      l1406 0984  
                                    l1430 0394                                      l1422 026A  
                                    l1510 0A74                                      l1502 0A22  
                                    l1416 0CAE                                      l1408 09AE  
                                    l1440 03D8                                      l1432 0398  
                                    l1424 0330                                      l1512 0A84  
                                    l1504 0A32                                      l1520 0AD2  
                                    l1418 0CB0                                      l1362 0C74  
                                    l1426 0338                                      l1514 0A8A  
                                    l1506 0A36                                      l1522 0AD6  
                                    l1530 0526                                      l1364 0C86  
                                    l1380 08D6                                      l1372 0832  
                                    l1460 0476                                      l1452 0436  
                                    l1444 03F4                                      l1436 03B4  
                                    l1428 0372                                      l1508 0A60  
                                    l1524 0AF4                                      l1516 0AAA  
                                    l1700 071A                                      l1390 092A  
                                    l1382 08E4                                      l1374 084E  
                                    l1366 082A                                      l1470 04D8  
                                    l1462 0498                                      l1454 0456  
                                    l1446 0416                                      l1438 03D4  
                                    l1526 0B18                                      l1518 0AB6  
                                    l1550 05F0                                      l1710 0750  
                                    l1702 0722                                      l1480 0CD6  
                                    l1392 0930                                      l1384 08EC  
                                    l1376 0884                                      l1472 04DC  
                                    l1464 049C                                      l1456 045A  
                                    l1448 041A                                      l1528 0B2C  
                                    l1560 0638                                      l1552 0614  
                                    l1544 0542                                      l1536 052E  
                                    l1720 07B8                                      l1712 075C  
                                    l1704 0730                                      l1490 0BCC  
                                    l1482 0CDA                                      l1386 0916  
                                    l1378 08A0                                      l1394 0C4E  
                                    l1554 0618                                      l1546 0554  
                                    l1538 053A                                      l1562 0654  
                                    l1570 0B4C                                      l1730 0806  
                                    l1722 07CC                                      l1714 076E  
                                    l1706 0740                                      l1492 0BCE  
                                    l1484 0CDE                                      l1388 091E  
                                    l1396 0C6A                                      l1468 04B8  
                                    l1476 04F8                                      l1564 0672  
                                    l1548 055C                                      l1580 0B82  
                                    l1572 0B5E                                      l1732 0808  
                                    l1724 07E4                                      l1716 0786  
                                    l1708 074E                                      l1494 0BDE  
                                    l1486 0CE2                                      l1478 0516  
                                    l1566 06AC                                      l1558 0634  
                                    l1582 0B98                                      l1574 0B66  
                                    l1726 07EC                                      l1718 0798  
                                    l1734 0820                                      l1488 0BBA  
                                    l1584 0BA0                                      l1576 0B6E  
                                    l1568 0B44                                      l1728 07EE  
                                    l1498 0A02                                      l1586 0BA2  
                                    l1578 0B7C                                      l1690 06CE  
                                    l1588 0BA8                                      l1692 06D2  
                                    l1694 06DE                                      l1696 06DE  
                                    l1698 06E6                          __end_of_ADC1_ISR 0C22  
                                    u1007 0B36                                      u1017 0A28  
                                    u1027 0A7A                                      u1037 051C  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _WPUA 000F77  
                                    _WPUB 000F78                 ADC1_SelectChannel@channel 0004  
                                    _main 06CE                                      btemp 0043  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 004C                           __end_of_WS_Word 0946  
                            ___param_bank 000000            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 0D04                                     ?_main 0001  
                                   _ANSEL 000F7E                           __end_of___lwdiv 0BB8  
                                   i2l102 0C20                                     i2l130 0040  
                                   i2l108 0D12                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   main@i 003F                                     pclath 000FFA  
                                   tablat 000FF5                                     ttemp5 0044  
                                   ttemp6 0047                                     ttemp7 004B  
                                   status 000FD8                                     wtemp8 0044  
                        WS_dim@brightness 001E                           __initialization 0CE8  
                        __end_of_WS_Write 0C9A                              __end_of_main 082A  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 0039  
                      __size_of_WS_RYGCBM 02D0                             __activetblptr 000002  
                             _WSWalk$1464 0029                               _WSWalk$1465 002B  
                             _WSWalk$1466 002D                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _ANSELH 000F7F                                    i2l1100 0C06  
                                  i2l1210 0020                                    i2l1212 002E  
                                  i2l1214 003C                                    i2l1208 0012  
                                  i2l1096 0BF2                                    i2l1098 0BF4  
                      _ADC1_SelectChannel 0CBE                                    _OSCCON 000FD3  
                               ??_WS_Word 000B                                    _WSWalk 0526  
                                  _WSTest 0AAA                                    _WSSlow 0A02  
                                  _WS_dim 0946                          WSTest@brightness 0030  
                     ?_ADC1_SelectChannel 0001                                    ___wmul 0C4E  
                               ??___lwdiv 0012                                 ?_ADC1_ISR 0001  
                __size_of_ADC1_Initialize 0024                      ??_ADC1_SelectChannel 0003  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
ADC1_SetInterruptHandler@InterruptHandler 0003             __size_of_INTERRUPT_Initialize 0004  
                       _SYSTEM_Initialize 0CD6           fp__ADC1_DefaultInterruptHandler 0000  
           ?_ADC1_DefaultInterruptHandler 0001                                __accesstop 0060  
                 __end_of__initialization 0CE8                         __end_of_WS_RYGCBM 0526  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                          __pcstackCOMRAM 0001                         __end_of_ColorSetB 0255  
                     ??_SYSTEM_Initialize 0005                                ??_ADC1_ISR 0001  
              ??_ADC1_SetInterruptHandler 0005                 __end_of_SYSTEM_Initialize 0CE8  
                               ?_WS_Write 0003                        _ADC1_GetConversion 0BB8  
                              __pnvCOMRAM 0041                                   ?_WSWalk 0023  
                                 ?_WSTest 002E                                   ?_WSSlow 002E  
                     ?_ADC1_GetConversion 0003                                   ?_WS_dim 0018  
                          main@brightness 003D                                   ?___wmul 0008  
                    ??_ADC1_GetConversion 0005                                   _OSCCON2 000FD2  
                                 i2u21_40 0C06                                   i2u21_41 0C02  
                                 i2u22_48 0C0C                                   i2u22_49 0C20  
                                 i2u34_40 0020                                   i2u34_41 001C  
                                 i2u35_40 002E                                   i2u35_41 002A  
                                 i2u36_40 003C                                   i2u36_41 0038  
                                 _OSCTUNE 000F9B                                   WSWalk@a 0031  
                                 WSWalk@b 002F                                   WSWalk@i 0033  
                       ??_ADC1_Initialize 0005                                   WSTest@i 0034  
                                 WSSlow@i 0035                                   WS_dim@A 0018  
                                 WS_dim@B 001A                                   WS_dim@C 001C  
                                 WS_dim@f 0021                                ??_WS_Write 0005  
                                 _WS_Word 082A                           __size_of_WSWalk 01A8  
                         __size_of_WSTest 009A                           __size_of_WSSlow 00A8  
                                 __Hparam 0000            ??_ADC1_DefaultInterruptHandler 0001  
                         __size_of_WS_dim 00BC                                   __Lparam 0000  
                         __size_of___wmul 0026                                   ___lwdiv 0B44  
                            __psmallconst 0200                                   __pcinit 0CE8  
                                 __ramtop 0200                                   __ptext0 06CE  
                                 __ptext1 0B44                                   __ptext2 0526  
                                 __ptext3 0AAA                                   __ptext4 0A02  
                                 __ptext5 0256                                   __ptext6 0946  
                                 __ptext7 0C4E                                   __ptext8 082A  
                                 __ptext9 0C74                     _OSCILLATOR_Initialize 0CF6  
                         WS_RYGCBM@length 0023                  ??_PIN_MANAGER_Initialize 0003  
              __size_of_SYSTEM_Initialize 0012                                   main@tmp 003B  
                    end_of_initialization 0CE8                             __Lmediumconst 0000  
   __end_of_ColorSetB@BitBangWS2812b$F789 022B             _ColorSetB@BitBangWS2812b$F789 0201  
                   _ADC1_InterruptHandler 0041                                 _PORTAbits 000F80  
                       __size_of_ADC1_ISR 0030                                 WS_Word@Bx 0014  
                               WS_Write@A 0003                 ADC1_GetConversion@channel 0007  
                          __end_of_WSWalk 06CE                            __end_of_WSTest 0B44  
                          __end_of_WSSlow 0AAA                                 _WS_RYGCBM 0256  
                          __end_of_WS_dim 0A02              __end_of_INTERRUPT_Initialize 0D12  
                          __end_of___wmul 0C74                                 _ColorSetB 022B  
                  ?_OSCILLATOR_Initialize 0001                       start_initialization 0CE8  
             __size_of_ADC1_SelectChannel 0018           __size_of_PIN_MANAGER_Initialize 002C  
                       __size_of_WS_Write 0026                                  ??_WSWalk 0027  
                                ??_WSTest 0032                                  ??_WSSlow 0034  
                                ??_WS_dim 0020                                ?_WS_RYGCBM 0023  
                                ??___wmul 000C                           _ADC1_Initialize 0C9A  
       __size_of_ADC1_SetInterruptHandler 000A                 ?_ADC1_SetInterruptHandler 0003  
                                ?_WS_Word 0005                          ___lwdiv@dividend 000E  
                  _PIN_MANAGER_Initialize 0C22                                 __pintcode 0008  
                                ?___lwdiv 000E                                  _ADC1_ISR 0BF2  
            ??_INTERRUPT_InterruptManager 0001                          WSWalk@brightness 0025  
                             __smallconst 0200               __size_of_ADC1_GetConversion 003A  
                        ___lwdiv@quotient 0012                      _INTERRUPT_Initialize 0D0E  
                          ___wmul@product 000C                                  _LATAbits 000F89  
                                _LATCbits 000F8B                                  _PIE1bits 000F9D  
     __size_of_INTERRUPT_InterruptManager 0044                   __end_of_ADC1_Initialize 0CBE  
                                _PIR1bits 000F9E                               ??_WS_RYGCBM 0027  
                                _RCONbits 000FD0                                  WS_Word@A 0005  
                                WS_Word@B 0007                                  WS_Word@C 0009  
                                WS_Word@i 0016                                  WS_Word@x 000E  
                     WSSlow@maxBrightness 0030                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0008      __end_of_ADC1_DefaultInterruptHandler 0D14  
   __size_of_ADC1_DefaultInterruptHandler 0002              _ADC1_DefaultInterruptHandler 0D12  
                             _INTCON2bits 000FF1                     ?_INTERRUPT_Initialize 0001  
                                _WS_Write 0C74                          __size_of_WS_Word 011C  
                                __Hrparam 0000                                  __Lrparam 0000  
                     WS_RYGCBM@brightness 0025                   ??_OSCILLATOR_Initialize 0003  
                        __size_of___lwdiv 0074                           ___lwdiv@divisor 0010  
                         ___lwdiv@counter 0014                                  __ptext10 0CD6  
                                __ptext11 0C22                                  __ptext20 0D12  
                                __ptext12 0CF6                                  __ptext21 0000  
                                __ptext13 0D0E                                  __ptext14 0C9A  
                                __ptext15 0D04                                  __ptext16 0CBE  
                                __ptext17 0BB8                                  __ptext19 0BF2  
                     WSSlow@minBrightness 0032                             __size_of_main 015C  
                            WSWalk@length 0023                          ?_ADC1_Initialize 0001  
                                int$flags 0043        __end_of_INTERRUPT_InterruptManager 004C  
              _INTERRUPT_InterruptManager 0008                __end_of_ADC1_SelectChannel 0CD6  
                            WSTest@length 002E          __end_of_ADC1_SetInterruptHandler 0D0E  
                              _INTCONbits 000FF2                    ??_INTERRUPT_Initialize 0003  
                                intlevel2 0000                                WS_RYGCBM@b 002C  
                 ?_PIN_MANAGER_Initialize 0001                              WS_Word@x_591 0010  
                            WS_Word@x_592 0012                               WSSlow@i_606 0037  
                             WSSlow@lengh 002E            __end_of_PIN_MANAGER_Initialize 0C4E  
