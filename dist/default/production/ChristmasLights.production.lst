

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Nov 05 22:47:00 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 05/05/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F14K22 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _INTCONbits	set	4082
    54  0000                     _INTCON2bits	set	4081
    55  0000                     _WPUA	set	3959
    56  0000                     _WPUB	set	3960
    57  0000                     _ANSELH	set	3967
    58  0000                     _ANSEL	set	3966
    59  0000                     _TRISC	set	3988
    60  0000                     _TRISB	set	3987
    61  0000                     _TRISA	set	3986
    62  0000                     _LATC	set	3979
    63  0000                     _LATB	set	3978
    64  0000                     _LATA	set	3977
    65  0000                     _OSCTUNE	set	3995
    66  0000                     _OSCCON2	set	4050
    67  0000                     _OSCCON	set	4051
    68  0000                     _LATAbits	set	3977
    69  0000                     _GIE	set	32663
    70                           
    71                           ; #config settings
    72                           
    73                           	psect	cinit
    74  0031A2                     __pcinit:
    75                           	callstack 0
    76  0031A2                     start_initialization:
    77                           	callstack 0
    78  0031A2                     __initialization:
    79                           	callstack 0
    80  0031A2                     end_of_initialization:
    81                           	callstack 0
    82  0031A2                     __end_of__initialization:
    83                           	callstack 0
    84  0031A2  0100               	movlb	0
    85  0031A4  EFE0  F018         	goto	_main	;jump to C main() function
    86                           
    87                           	psect	cstackCOMRAM
    88  000001                     __pcstackCOMRAM:
    89                           	callstack 0
    90  000001                     WS_Write@A:
    91                           	callstack 0
    92                           
    93                           ; 2 bytes @ 0x0
    94  000001                     	ds	2
    95  000003                     WS_Word@A:
    96                           	callstack 0
    97                           
    98                           ; 2 bytes @ 0x2
    99  000003                     	ds	2
   100  000005                     WS_Word@B:
   101                           	callstack 0
   102                           
   103                           ; 2 bytes @ 0x4
   104  000005                     	ds	2
   105  000007                     WS_Word@C:
   106                           	callstack 0
   107                           
   108                           ; 2 bytes @ 0x6
   109  000007                     	ds	2
   110  000009                     ??_WS_Word:
   111                           
   112                           ; 1 bytes @ 0x8
   113  000009                     	ds	3
   114  00000C                     WS_Word@x:
   115                           	callstack 0
   116                           
   117                           ; 2 bytes @ 0xB
   118  00000C                     	ds	2
   119  00000E                     WS_Word@x_79:
   120                           	callstack 0
   121                           
   122                           ; 2 bytes @ 0xD
   123  00000E                     	ds	2
   124  000010                     WS_Word@x_80:
   125                           	callstack 0
   126                           
   127                           ; 2 bytes @ 0xF
   128  000010                     	ds	2
   129  000012                     WS_Word@Bx:
   130                           	callstack 0
   131                           
   132                           ; 2 bytes @ 0x11
   133  000012                     	ds	2
   134  000014                     WS_Word@i:
   135                           	callstack 0
   136                           
   137                           ; 2 bytes @ 0x13
   138  000014                     	ds	2
   139  000016                     ??_WSLoop:
   140                           
   141                           ; 1 bytes @ 0x15
   142  000016                     	ds	2
   143  000018                     
   144                           ; 1 bytes @ 0x17
   145 ;;
   146 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   147 ;;
   148 ;; *************** function _main *****************
   149 ;; Defined at:
   150 ;;		line 50 in file "main.c"
   151 ;; Parameters:    Size  Location     Type
   152 ;;		None
   153 ;; Auto vars:     Size  Location     Type
   154 ;;		None
   155 ;; Return value:  Size  Location     Type
   156 ;;                  1    wreg      void 
   157 ;; Registers used:
   158 ;;		wreg, status,2, status,0, cstack
   159 ;; Tracked objects:
   160 ;;		On entry : 0/0
   161 ;;		On exit  : 0/0
   162 ;;		Unchanged: 0/0
   163 ;; Data sizes:     COMRAM   BANK0   BANK1
   164 ;;      Params:         0       0       0
   165 ;;      Locals:         0       0       0
   166 ;;      Temps:          0       0       0
   167 ;;      Totals:         0       0       0
   168 ;;Total ram usage:        0 bytes
   169 ;; Hardware stack levels required when called:    3
   170 ;; This function calls:
   171 ;;		_SYSTEM_Initialize
   172 ;;		_WSLoop
   173 ;; This function is called by:
   174 ;;		Startup code after reset
   175 ;; This function uses a non-reentrant model
   176 ;;
   177                           
   178                           	psect	text0
   179  0031C0                     __ptext0:
   180                           	callstack 0
   181  0031C0                     _main:
   182                           	callstack 28
   183  0031C0                     
   184                           ;main.c: 53:     SYSTEM_Initialize();
   185  0031C0  ECD4  F018         	call	_SYSTEM_Initialize	;wreg free
   186  0031C4                     l922:
   187                           
   188                           ;main.c: 72:     {;main.c: 73:         WSLoop();
   189  0031C4  EC9D  F019         	call	_WSLoop	;wreg free
   190  0031C8  EFE2  F018         	goto	l922
   191  0031CC  EF00  F000         	goto	start
   192  0031D0                     __end_of_main:
   193                           	callstack 0
   194                           
   195 ;; *************** function _WSLoop *****************
   196 ;; Defined at:
   197 ;;		line 68 in file "WS2812b/BitBangWS2812b.c"
   198 ;; Parameters:    Size  Location     Type
   199 ;;		None
   200 ;; Auto vars:     Size  Location     Type
   201 ;;		None
   202 ;; Return value:  Size  Location     Type
   203 ;;                  1    wreg      void 
   204 ;; Registers used:
   205 ;;		wreg, status,2, status,0, cstack
   206 ;; Tracked objects:
   207 ;;		On entry : 0/0
   208 ;;		On exit  : 0/0
   209 ;;		Unchanged: 0/0
   210 ;; Data sizes:     COMRAM   BANK0   BANK1
   211 ;;      Params:         0       0       0
   212 ;;      Locals:         0       0       0
   213 ;;      Temps:          2       0       0
   214 ;;      Totals:         2       0       0
   215 ;;Total ram usage:        2 bytes
   216 ;; Hardware stack levels used:    1
   217 ;; Hardware stack levels required when called:    2
   218 ;; This function calls:
   219 ;;		_WS_Word
   220 ;; This function is called by:
   221 ;;		_main
   222 ;; This function uses a non-reentrant model
   223 ;;
   224                           
   225                           	psect	text1
   226  00333A                     __ptext1:
   227                           	callstack 0
   228  00333A                     _WSLoop:
   229                           	callstack 28
   230  00333A                     
   231                           ;WS2812b/BitBangWS2812b.c: 70:     GIE = 0;
   232  00333A  9EF2               	bcf	4082,7,c	;volatile
   233  00333C                     
   234                           ;WS2812b/BitBangWS2812b.c: 72:     WS_Word(0xFF, 0x00, 0x00);
   235  00333C  0E00               	movlw	0
   236  00333E  6E04               	movwf	(WS_Word@A+1)^0,c
   237  003340  6803               	setf	WS_Word@A^0,c
   238  003342  0E00               	movlw	0
   239  003344  6E06               	movwf	(WS_Word@B+1)^0,c
   240  003346  0E00               	movlw	0
   241  003348  6E05               	movwf	WS_Word@B^0,c
   242  00334A  0E00               	movlw	0
   243  00334C  6E08               	movwf	(WS_Word@C+1)^0,c
   244  00334E  0E00               	movlw	0
   245  003350  6E07               	movwf	WS_Word@C^0,c
   246  003352  EC0F  F019         	call	_WS_Word	;wreg free
   247                           
   248                           ;WS2812b/BitBangWS2812b.c: 73:     WS_Word(0x00, 0x09, 0x00);
   249  003356  0E00               	movlw	0
   250  003358  6E04               	movwf	(WS_Word@A+1)^0,c
   251  00335A  0E00               	movlw	0
   252  00335C  6E03               	movwf	WS_Word@A^0,c
   253  00335E  0E00               	movlw	0
   254  003360  6E06               	movwf	(WS_Word@B+1)^0,c
   255  003362  0E09               	movlw	9
   256  003364  6E05               	movwf	WS_Word@B^0,c
   257  003366  0E00               	movlw	0
   258  003368  6E08               	movwf	(WS_Word@C+1)^0,c
   259  00336A  0E00               	movlw	0
   260  00336C  6E07               	movwf	WS_Word@C^0,c
   261  00336E  EC0F  F019         	call	_WS_Word	;wreg free
   262                           
   263                           ;WS2812b/BitBangWS2812b.c: 74:     WS_Word(0x00, 0x00, 0x09);
   264  003372  0E00               	movlw	0
   265  003374  6E04               	movwf	(WS_Word@A+1)^0,c
   266  003376  0E00               	movlw	0
   267  003378  6E03               	movwf	WS_Word@A^0,c
   268  00337A  0E00               	movlw	0
   269  00337C  6E06               	movwf	(WS_Word@B+1)^0,c
   270  00337E  0E00               	movlw	0
   271  003380  6E05               	movwf	WS_Word@B^0,c
   272  003382  0E00               	movlw	0
   273  003384  6E08               	movwf	(WS_Word@C+1)^0,c
   274  003386  0E09               	movlw	9
   275  003388  6E07               	movwf	WS_Word@C^0,c
   276  00338A  EC0F  F019         	call	_WS_Word	;wreg free
   277                           
   278                           ;WS2812b/BitBangWS2812b.c: 75:     WS_Word(0x09, 0x09, 0x00);
   279  00338E  0E00               	movlw	0
   280  003390  6E04               	movwf	(WS_Word@A+1)^0,c
   281  003392  0E09               	movlw	9
   282  003394  6E03               	movwf	WS_Word@A^0,c
   283  003396  0E00               	movlw	0
   284  003398  6E06               	movwf	(WS_Word@B+1)^0,c
   285  00339A  0E09               	movlw	9
   286  00339C  6E05               	movwf	WS_Word@B^0,c
   287  00339E  0E00               	movlw	0
   288  0033A0  6E08               	movwf	(WS_Word@C+1)^0,c
   289  0033A2  0E00               	movlw	0
   290  0033A4  6E07               	movwf	WS_Word@C^0,c
   291  0033A6  EC0F  F019         	call	_WS_Word	;wreg free
   292                           
   293                           ;WS2812b/BitBangWS2812b.c: 76:     WS_Word(0x09, 0x00, 0x09);
   294  0033AA  0E00               	movlw	0
   295  0033AC  6E04               	movwf	(WS_Word@A+1)^0,c
   296  0033AE  0E09               	movlw	9
   297  0033B0  6E03               	movwf	WS_Word@A^0,c
   298  0033B2  0E00               	movlw	0
   299  0033B4  6E06               	movwf	(WS_Word@B+1)^0,c
   300  0033B6  0E00               	movlw	0
   301  0033B8  6E05               	movwf	WS_Word@B^0,c
   302  0033BA  0E00               	movlw	0
   303  0033BC  6E08               	movwf	(WS_Word@C+1)^0,c
   304  0033BE  0E09               	movlw	9
   305  0033C0  6E07               	movwf	WS_Word@C^0,c
   306  0033C2  EC0F  F019         	call	_WS_Word	;wreg free
   307                           
   308                           ;WS2812b/BitBangWS2812b.c: 77:     WS_Word(0x00, 0x09, 0x09);
   309  0033C6  0E00               	movlw	0
   310  0033C8  6E04               	movwf	(WS_Word@A+1)^0,c
   311  0033CA  0E00               	movlw	0
   312  0033CC  6E03               	movwf	WS_Word@A^0,c
   313  0033CE  0E00               	movlw	0
   314  0033D0  6E06               	movwf	(WS_Word@B+1)^0,c
   315  0033D2  0E09               	movlw	9
   316  0033D4  6E05               	movwf	WS_Word@B^0,c
   317  0033D6  0E00               	movlw	0
   318  0033D8  6E08               	movwf	(WS_Word@C+1)^0,c
   319  0033DA  0E09               	movlw	9
   320  0033DC  6E07               	movwf	WS_Word@C^0,c
   321  0033DE  EC0F  F019         	call	_WS_Word	;wreg free
   322                           
   323                           ;WS2812b/BitBangWS2812b.c: 78:     WS_Word(0xFF, 0x00, 0x00);
   324  0033E2  0E00               	movlw	0
   325  0033E4  6E04               	movwf	(WS_Word@A+1)^0,c
   326  0033E6  6803               	setf	WS_Word@A^0,c
   327  0033E8  0E00               	movlw	0
   328  0033EA  6E06               	movwf	(WS_Word@B+1)^0,c
   329  0033EC  0E00               	movlw	0
   330  0033EE  6E05               	movwf	WS_Word@B^0,c
   331  0033F0  0E00               	movlw	0
   332  0033F2  6E08               	movwf	(WS_Word@C+1)^0,c
   333  0033F4  0E00               	movlw	0
   334  0033F6  6E07               	movwf	WS_Word@C^0,c
   335  0033F8  EC0F  F019         	call	_WS_Word	;wreg free
   336                           
   337                           ;WS2812b/BitBangWS2812b.c: 79:     WS_Word(0x00, 0x09, 0x00);
   338  0033FC  0E00               	movlw	0
   339  0033FE  6E04               	movwf	(WS_Word@A+1)^0,c
   340  003400  0E00               	movlw	0
   341  003402  6E03               	movwf	WS_Word@A^0,c
   342  003404  0E00               	movlw	0
   343  003406  6E06               	movwf	(WS_Word@B+1)^0,c
   344  003408  0E09               	movlw	9
   345  00340A  6E05               	movwf	WS_Word@B^0,c
   346  00340C  0E00               	movlw	0
   347  00340E  6E08               	movwf	(WS_Word@C+1)^0,c
   348  003410  0E00               	movlw	0
   349  003412  6E07               	movwf	WS_Word@C^0,c
   350  003414  EC0F  F019         	call	_WS_Word	;wreg free
   351                           
   352                           ;WS2812b/BitBangWS2812b.c: 80:     WS_Word(0x00, 0x00, 0x09);
   353  003418  0E00               	movlw	0
   354  00341A  6E04               	movwf	(WS_Word@A+1)^0,c
   355  00341C  0E00               	movlw	0
   356  00341E  6E03               	movwf	WS_Word@A^0,c
   357  003420  0E00               	movlw	0
   358  003422  6E06               	movwf	(WS_Word@B+1)^0,c
   359  003424  0E00               	movlw	0
   360  003426  6E05               	movwf	WS_Word@B^0,c
   361  003428  0E00               	movlw	0
   362  00342A  6E08               	movwf	(WS_Word@C+1)^0,c
   363  00342C  0E09               	movlw	9
   364  00342E  6E07               	movwf	WS_Word@C^0,c
   365  003430  EC0F  F019         	call	_WS_Word	;wreg free
   366                           
   367                           ;WS2812b/BitBangWS2812b.c: 81:     WS_Word(0x09, 0x09, 0x00);
   368  003434  0E00               	movlw	0
   369  003436  6E04               	movwf	(WS_Word@A+1)^0,c
   370  003438  0E09               	movlw	9
   371  00343A  6E03               	movwf	WS_Word@A^0,c
   372  00343C  0E00               	movlw	0
   373  00343E  6E06               	movwf	(WS_Word@B+1)^0,c
   374  003440  0E09               	movlw	9
   375  003442  6E05               	movwf	WS_Word@B^0,c
   376  003444  0E00               	movlw	0
   377  003446  6E08               	movwf	(WS_Word@C+1)^0,c
   378  003448  0E00               	movlw	0
   379  00344A  6E07               	movwf	WS_Word@C^0,c
   380  00344C  EC0F  F019         	call	_WS_Word	;wreg free
   381                           
   382                           ;WS2812b/BitBangWS2812b.c: 82:     WS_Word(0x09, 0x00, 0x09);
   383  003450  0E00               	movlw	0
   384  003452  6E04               	movwf	(WS_Word@A+1)^0,c
   385  003454  0E09               	movlw	9
   386  003456  6E03               	movwf	WS_Word@A^0,c
   387  003458  0E00               	movlw	0
   388  00345A  6E06               	movwf	(WS_Word@B+1)^0,c
   389  00345C  0E00               	movlw	0
   390  00345E  6E05               	movwf	WS_Word@B^0,c
   391  003460  0E00               	movlw	0
   392  003462  6E08               	movwf	(WS_Word@C+1)^0,c
   393  003464  0E09               	movlw	9
   394  003466  6E07               	movwf	WS_Word@C^0,c
   395  003468  EC0F  F019         	call	_WS_Word	;wreg free
   396                           
   397                           ;WS2812b/BitBangWS2812b.c: 83:     WS_Word(0x00, 0x09, 0x09);
   398  00346C  0E00               	movlw	0
   399  00346E  6E04               	movwf	(WS_Word@A+1)^0,c
   400  003470  0E00               	movlw	0
   401  003472  6E03               	movwf	WS_Word@A^0,c
   402  003474  0E00               	movlw	0
   403  003476  6E06               	movwf	(WS_Word@B+1)^0,c
   404  003478  0E09               	movlw	9
   405  00347A  6E05               	movwf	WS_Word@B^0,c
   406  00347C  0E00               	movlw	0
   407  00347E  6E08               	movwf	(WS_Word@C+1)^0,c
   408  003480  0E09               	movlw	9
   409  003482  6E07               	movwf	WS_Word@C^0,c
   410  003484  EC0F  F019         	call	_WS_Word	;wreg free
   411                           
   412                           ;WS2812b/BitBangWS2812b.c: 84:     WS_Word(0xFF, 0x00, 0x00);
   413  003488  0E00               	movlw	0
   414  00348A  6E04               	movwf	(WS_Word@A+1)^0,c
   415  00348C  6803               	setf	WS_Word@A^0,c
   416  00348E  0E00               	movlw	0
   417  003490  6E06               	movwf	(WS_Word@B+1)^0,c
   418  003492  0E00               	movlw	0
   419  003494  6E05               	movwf	WS_Word@B^0,c
   420  003496  0E00               	movlw	0
   421  003498  6E08               	movwf	(WS_Word@C+1)^0,c
   422  00349A  0E00               	movlw	0
   423  00349C  6E07               	movwf	WS_Word@C^0,c
   424  00349E  EC0F  F019         	call	_WS_Word	;wreg free
   425                           
   426                           ;WS2812b/BitBangWS2812b.c: 85:     WS_Word(0x00, 0x09, 0x00);
   427  0034A2  0E00               	movlw	0
   428  0034A4  6E04               	movwf	(WS_Word@A+1)^0,c
   429  0034A6  0E00               	movlw	0
   430  0034A8  6E03               	movwf	WS_Word@A^0,c
   431  0034AA  0E00               	movlw	0
   432  0034AC  6E06               	movwf	(WS_Word@B+1)^0,c
   433  0034AE  0E09               	movlw	9
   434  0034B0  6E05               	movwf	WS_Word@B^0,c
   435  0034B2  0E00               	movlw	0
   436  0034B4  6E08               	movwf	(WS_Word@C+1)^0,c
   437  0034B6  0E00               	movlw	0
   438  0034B8  6E07               	movwf	WS_Word@C^0,c
   439  0034BA  EC0F  F019         	call	_WS_Word	;wreg free
   440                           
   441                           ;WS2812b/BitBangWS2812b.c: 86:     WS_Word(0x00, 0x00, 0x09);
   442  0034BE  0E00               	movlw	0
   443  0034C0  6E04               	movwf	(WS_Word@A+1)^0,c
   444  0034C2  0E00               	movlw	0
   445  0034C4  6E03               	movwf	WS_Word@A^0,c
   446  0034C6  0E00               	movlw	0
   447  0034C8  6E06               	movwf	(WS_Word@B+1)^0,c
   448  0034CA  0E00               	movlw	0
   449  0034CC  6E05               	movwf	WS_Word@B^0,c
   450  0034CE  0E00               	movlw	0
   451  0034D0  6E08               	movwf	(WS_Word@C+1)^0,c
   452  0034D2  0E09               	movlw	9
   453  0034D4  6E07               	movwf	WS_Word@C^0,c
   454  0034D6  EC0F  F019         	call	_WS_Word	;wreg free
   455                           
   456                           ;WS2812b/BitBangWS2812b.c: 87:     WS_Word(0x09, 0x09, 0x00);
   457  0034DA  0E00               	movlw	0
   458  0034DC  6E04               	movwf	(WS_Word@A+1)^0,c
   459  0034DE  0E09               	movlw	9
   460  0034E0  6E03               	movwf	WS_Word@A^0,c
   461  0034E2  0E00               	movlw	0
   462  0034E4  6E06               	movwf	(WS_Word@B+1)^0,c
   463  0034E6  0E09               	movlw	9
   464  0034E8  6E05               	movwf	WS_Word@B^0,c
   465  0034EA  0E00               	movlw	0
   466  0034EC  6E08               	movwf	(WS_Word@C+1)^0,c
   467  0034EE  0E00               	movlw	0
   468  0034F0  6E07               	movwf	WS_Word@C^0,c
   469  0034F2  EC0F  F019         	call	_WS_Word	;wreg free
   470                           
   471                           ;WS2812b/BitBangWS2812b.c: 88:     WS_Word(0x09, 0x00, 0x09);
   472  0034F6  0E00               	movlw	0
   473  0034F8  6E04               	movwf	(WS_Word@A+1)^0,c
   474  0034FA  0E09               	movlw	9
   475  0034FC  6E03               	movwf	WS_Word@A^0,c
   476  0034FE  0E00               	movlw	0
   477  003500  6E06               	movwf	(WS_Word@B+1)^0,c
   478  003502  0E00               	movlw	0
   479  003504  6E05               	movwf	WS_Word@B^0,c
   480  003506  0E00               	movlw	0
   481  003508  6E08               	movwf	(WS_Word@C+1)^0,c
   482  00350A  0E09               	movlw	9
   483  00350C  6E07               	movwf	WS_Word@C^0,c
   484  00350E  EC0F  F019         	call	_WS_Word	;wreg free
   485                           
   486                           ;WS2812b/BitBangWS2812b.c: 89:     WS_Word(0x00, 0x09, 0x09);
   487  003512  0E00               	movlw	0
   488  003514  6E04               	movwf	(WS_Word@A+1)^0,c
   489  003516  0E00               	movlw	0
   490  003518  6E03               	movwf	WS_Word@A^0,c
   491  00351A  0E00               	movlw	0
   492  00351C  6E06               	movwf	(WS_Word@B+1)^0,c
   493  00351E  0E09               	movlw	9
   494  003520  6E05               	movwf	WS_Word@B^0,c
   495  003522  0E00               	movlw	0
   496  003524  6E08               	movwf	(WS_Word@C+1)^0,c
   497  003526  0E09               	movlw	9
   498  003528  6E07               	movwf	WS_Word@C^0,c
   499  00352A  EC0F  F019         	call	_WS_Word	;wreg free
   500  00352E                     
   501                           ;WS2812b/BitBangWS2812b.c: 91:     _delay((unsigned long)((60.000)*(32000000/4000.0)));
   502  00352E  0E03               	movlw	3
   503  003530  6E17               	movwf	(??_WSLoop+1)^0,c
   504  003532  0E70               	movlw	112
   505  003534  6E16               	movwf	??_WSLoop^0,c
   506  003536  0E5C               	movlw	92
   507  003538                     u177:
   508  003538  2EE8               	decfsz	wreg,f,c
   509  00353A  D7FE               	bra	u177
   510  00353C  2E16               	decfsz	??_WSLoop^0,f,c
   511  00353E  D7FC               	bra	u177
   512  003540  2E17               	decfsz	(??_WSLoop+1)^0,f,c
   513  003542  D7FA               	bra	u177
   514  003544  D000               	nop2	
   515  003546                     
   516                           ;WS2812b/BitBangWS2812b.c: 92:     _delay((unsigned long)((250)*(32000000/4000.0)));
   517  003546  0E0B               	movlw	11
   518  003548  6E17               	movwf	(??_WSLoop+1)^0,c
   519  00354A  0E26               	movlw	38
   520  00354C  6E16               	movwf	??_WSLoop^0,c
   521  00354E  0E5E               	movlw	94
   522  003550                     u187:
   523  003550  2EE8               	decfsz	wreg,f,c
   524  003552  D7FE               	bra	u187
   525  003554  2E16               	decfsz	??_WSLoop^0,f,c
   526  003556  D7FC               	bra	u187
   527  003558  2E17               	decfsz	(??_WSLoop+1)^0,f,c
   528  00355A  D7FA               	bra	u187
   529                           
   530                           ;WS2812b/BitBangWS2812b.c: 94:     WS_Word(0x00, 0x09, 0x09);
   531  00355C  0E00               	movlw	0
   532  00355E  6E04               	movwf	(WS_Word@A+1)^0,c
   533  003560  0E00               	movlw	0
   534  003562  6E03               	movwf	WS_Word@A^0,c
   535  003564  0E00               	movlw	0
   536  003566  6E06               	movwf	(WS_Word@B+1)^0,c
   537  003568  0E09               	movlw	9
   538  00356A  6E05               	movwf	WS_Word@B^0,c
   539  00356C  0E00               	movlw	0
   540  00356E  6E08               	movwf	(WS_Word@C+1)^0,c
   541  003570  0E09               	movlw	9
   542  003572  6E07               	movwf	WS_Word@C^0,c
   543  003574  EC0F  F019         	call	_WS_Word	;wreg free
   544                           
   545                           ;WS2812b/BitBangWS2812b.c: 95:     WS_Word(0xFF, 0x00, 0x00);
   546  003578  0E00               	movlw	0
   547  00357A  6E04               	movwf	(WS_Word@A+1)^0,c
   548  00357C  6803               	setf	WS_Word@A^0,c
   549  00357E  0E00               	movlw	0
   550  003580  6E06               	movwf	(WS_Word@B+1)^0,c
   551  003582  0E00               	movlw	0
   552  003584  6E05               	movwf	WS_Word@B^0,c
   553  003586  0E00               	movlw	0
   554  003588  6E08               	movwf	(WS_Word@C+1)^0,c
   555  00358A  0E00               	movlw	0
   556  00358C  6E07               	movwf	WS_Word@C^0,c
   557  00358E  EC0F  F019         	call	_WS_Word	;wreg free
   558                           
   559                           ;WS2812b/BitBangWS2812b.c: 96:     WS_Word(0x00, 0x09, 0x00);
   560  003592  0E00               	movlw	0
   561  003594  6E04               	movwf	(WS_Word@A+1)^0,c
   562  003596  0E00               	movlw	0
   563  003598  6E03               	movwf	WS_Word@A^0,c
   564  00359A  0E00               	movlw	0
   565  00359C  6E06               	movwf	(WS_Word@B+1)^0,c
   566  00359E  0E09               	movlw	9
   567  0035A0  6E05               	movwf	WS_Word@B^0,c
   568  0035A2  0E00               	movlw	0
   569  0035A4  6E08               	movwf	(WS_Word@C+1)^0,c
   570  0035A6  0E00               	movlw	0
   571  0035A8  6E07               	movwf	WS_Word@C^0,c
   572  0035AA  EC0F  F019         	call	_WS_Word	;wreg free
   573                           
   574                           ;WS2812b/BitBangWS2812b.c: 97:     WS_Word(0x00, 0x00, 0x09);
   575  0035AE  0E00               	movlw	0
   576  0035B0  6E04               	movwf	(WS_Word@A+1)^0,c
   577  0035B2  0E00               	movlw	0
   578  0035B4  6E03               	movwf	WS_Word@A^0,c
   579  0035B6  0E00               	movlw	0
   580  0035B8  6E06               	movwf	(WS_Word@B+1)^0,c
   581  0035BA  0E00               	movlw	0
   582  0035BC  6E05               	movwf	WS_Word@B^0,c
   583  0035BE  0E00               	movlw	0
   584  0035C0  6E08               	movwf	(WS_Word@C+1)^0,c
   585  0035C2  0E09               	movlw	9
   586  0035C4  6E07               	movwf	WS_Word@C^0,c
   587  0035C6  EC0F  F019         	call	_WS_Word	;wreg free
   588                           
   589                           ;WS2812b/BitBangWS2812b.c: 98:     WS_Word(0x09, 0x09, 0x00);
   590  0035CA  0E00               	movlw	0
   591  0035CC  6E04               	movwf	(WS_Word@A+1)^0,c
   592  0035CE  0E09               	movlw	9
   593  0035D0  6E03               	movwf	WS_Word@A^0,c
   594  0035D2  0E00               	movlw	0
   595  0035D4  6E06               	movwf	(WS_Word@B+1)^0,c
   596  0035D6  0E09               	movlw	9
   597  0035D8  6E05               	movwf	WS_Word@B^0,c
   598  0035DA  0E00               	movlw	0
   599  0035DC  6E08               	movwf	(WS_Word@C+1)^0,c
   600  0035DE  0E00               	movlw	0
   601  0035E0  6E07               	movwf	WS_Word@C^0,c
   602  0035E2  EC0F  F019         	call	_WS_Word	;wreg free
   603                           
   604                           ;WS2812b/BitBangWS2812b.c: 99:     WS_Word(0x09, 0x00, 0x09);
   605  0035E6  0E00               	movlw	0
   606  0035E8  6E04               	movwf	(WS_Word@A+1)^0,c
   607  0035EA  0E09               	movlw	9
   608  0035EC  6E03               	movwf	WS_Word@A^0,c
   609  0035EE  0E00               	movlw	0
   610  0035F0  6E06               	movwf	(WS_Word@B+1)^0,c
   611  0035F2  0E00               	movlw	0
   612  0035F4  6E05               	movwf	WS_Word@B^0,c
   613  0035F6  0E00               	movlw	0
   614  0035F8  6E08               	movwf	(WS_Word@C+1)^0,c
   615  0035FA  0E09               	movlw	9
   616  0035FC  6E07               	movwf	WS_Word@C^0,c
   617  0035FE  EC0F  F019         	call	_WS_Word	;wreg free
   618                           
   619                           ;WS2812b/BitBangWS2812b.c: 100:     WS_Word(0x00, 0x09, 0x09);
   620  003602  0E00               	movlw	0
   621  003604  6E04               	movwf	(WS_Word@A+1)^0,c
   622  003606  0E00               	movlw	0
   623  003608  6E03               	movwf	WS_Word@A^0,c
   624  00360A  0E00               	movlw	0
   625  00360C  6E06               	movwf	(WS_Word@B+1)^0,c
   626  00360E  0E09               	movlw	9
   627  003610  6E05               	movwf	WS_Word@B^0,c
   628  003612  0E00               	movlw	0
   629  003614  6E08               	movwf	(WS_Word@C+1)^0,c
   630  003616  0E09               	movlw	9
   631  003618  6E07               	movwf	WS_Word@C^0,c
   632  00361A  EC0F  F019         	call	_WS_Word	;wreg free
   633                           
   634                           ;WS2812b/BitBangWS2812b.c: 101:     WS_Word(0xFF, 0x00, 0x00);
   635  00361E  0E00               	movlw	0
   636  003620  6E04               	movwf	(WS_Word@A+1)^0,c
   637  003622  6803               	setf	WS_Word@A^0,c
   638  003624  0E00               	movlw	0
   639  003626  6E06               	movwf	(WS_Word@B+1)^0,c
   640  003628  0E00               	movlw	0
   641  00362A  6E05               	movwf	WS_Word@B^0,c
   642  00362C  0E00               	movlw	0
   643  00362E  6E08               	movwf	(WS_Word@C+1)^0,c
   644  003630  0E00               	movlw	0
   645  003632  6E07               	movwf	WS_Word@C^0,c
   646  003634  EC0F  F019         	call	_WS_Word	;wreg free
   647                           
   648                           ;WS2812b/BitBangWS2812b.c: 102:     WS_Word(0x00, 0x09, 0x00);
   649  003638  0E00               	movlw	0
   650  00363A  6E04               	movwf	(WS_Word@A+1)^0,c
   651  00363C  0E00               	movlw	0
   652  00363E  6E03               	movwf	WS_Word@A^0,c
   653  003640  0E00               	movlw	0
   654  003642  6E06               	movwf	(WS_Word@B+1)^0,c
   655  003644  0E09               	movlw	9
   656  003646  6E05               	movwf	WS_Word@B^0,c
   657  003648  0E00               	movlw	0
   658  00364A  6E08               	movwf	(WS_Word@C+1)^0,c
   659  00364C  0E00               	movlw	0
   660  00364E  6E07               	movwf	WS_Word@C^0,c
   661  003650  EC0F  F019         	call	_WS_Word	;wreg free
   662                           
   663                           ;WS2812b/BitBangWS2812b.c: 103:     WS_Word(0x00, 0x00, 0x09);
   664  003654  0E00               	movlw	0
   665  003656  6E04               	movwf	(WS_Word@A+1)^0,c
   666  003658  0E00               	movlw	0
   667  00365A  6E03               	movwf	WS_Word@A^0,c
   668  00365C  0E00               	movlw	0
   669  00365E  6E06               	movwf	(WS_Word@B+1)^0,c
   670  003660  0E00               	movlw	0
   671  003662  6E05               	movwf	WS_Word@B^0,c
   672  003664  0E00               	movlw	0
   673  003666  6E08               	movwf	(WS_Word@C+1)^0,c
   674  003668  0E09               	movlw	9
   675  00366A  6E07               	movwf	WS_Word@C^0,c
   676  00366C  EC0F  F019         	call	_WS_Word	;wreg free
   677                           
   678                           ;WS2812b/BitBangWS2812b.c: 104:     WS_Word(0x09, 0x09, 0x00);
   679  003670  0E00               	movlw	0
   680  003672  6E04               	movwf	(WS_Word@A+1)^0,c
   681  003674  0E09               	movlw	9
   682  003676  6E03               	movwf	WS_Word@A^0,c
   683  003678  0E00               	movlw	0
   684  00367A  6E06               	movwf	(WS_Word@B+1)^0,c
   685  00367C  0E09               	movlw	9
   686  00367E  6E05               	movwf	WS_Word@B^0,c
   687  003680  0E00               	movlw	0
   688  003682  6E08               	movwf	(WS_Word@C+1)^0,c
   689  003684  0E00               	movlw	0
   690  003686  6E07               	movwf	WS_Word@C^0,c
   691  003688  EC0F  F019         	call	_WS_Word	;wreg free
   692                           
   693                           ;WS2812b/BitBangWS2812b.c: 105:     WS_Word(0x09, 0x00, 0x09);
   694  00368C  0E00               	movlw	0
   695  00368E  6E04               	movwf	(WS_Word@A+1)^0,c
   696  003690  0E09               	movlw	9
   697  003692  6E03               	movwf	WS_Word@A^0,c
   698  003694  0E00               	movlw	0
   699  003696  6E06               	movwf	(WS_Word@B+1)^0,c
   700  003698  0E00               	movlw	0
   701  00369A  6E05               	movwf	WS_Word@B^0,c
   702  00369C  0E00               	movlw	0
   703  00369E  6E08               	movwf	(WS_Word@C+1)^0,c
   704  0036A0  0E09               	movlw	9
   705  0036A2  6E07               	movwf	WS_Word@C^0,c
   706  0036A4  EC0F  F019         	call	_WS_Word	;wreg free
   707                           
   708                           ;WS2812b/BitBangWS2812b.c: 106:     WS_Word(0x00, 0x09, 0x09);
   709  0036A8  0E00               	movlw	0
   710  0036AA  6E04               	movwf	(WS_Word@A+1)^0,c
   711  0036AC  0E00               	movlw	0
   712  0036AE  6E03               	movwf	WS_Word@A^0,c
   713  0036B0  0E00               	movlw	0
   714  0036B2  6E06               	movwf	(WS_Word@B+1)^0,c
   715  0036B4  0E09               	movlw	9
   716  0036B6  6E05               	movwf	WS_Word@B^0,c
   717  0036B8  0E00               	movlw	0
   718  0036BA  6E08               	movwf	(WS_Word@C+1)^0,c
   719  0036BC  0E09               	movlw	9
   720  0036BE  6E07               	movwf	WS_Word@C^0,c
   721  0036C0  EC0F  F019         	call	_WS_Word	;wreg free
   722                           
   723                           ;WS2812b/BitBangWS2812b.c: 107:     WS_Word(0xFF, 0x00, 0x00);
   724  0036C4  0E00               	movlw	0
   725  0036C6  6E04               	movwf	(WS_Word@A+1)^0,c
   726  0036C8  6803               	setf	WS_Word@A^0,c
   727  0036CA  0E00               	movlw	0
   728  0036CC  6E06               	movwf	(WS_Word@B+1)^0,c
   729  0036CE  0E00               	movlw	0
   730  0036D0  6E05               	movwf	WS_Word@B^0,c
   731  0036D2  0E00               	movlw	0
   732  0036D4  6E08               	movwf	(WS_Word@C+1)^0,c
   733  0036D6  0E00               	movlw	0
   734  0036D8  6E07               	movwf	WS_Word@C^0,c
   735  0036DA  EC0F  F019         	call	_WS_Word	;wreg free
   736                           
   737                           ;WS2812b/BitBangWS2812b.c: 108:     WS_Word(0x00, 0x09, 0x00);
   738  0036DE  0E00               	movlw	0
   739  0036E0  6E04               	movwf	(WS_Word@A+1)^0,c
   740  0036E2  0E00               	movlw	0
   741  0036E4  6E03               	movwf	WS_Word@A^0,c
   742  0036E6  0E00               	movlw	0
   743  0036E8  6E06               	movwf	(WS_Word@B+1)^0,c
   744  0036EA  0E09               	movlw	9
   745  0036EC  6E05               	movwf	WS_Word@B^0,c
   746  0036EE  0E00               	movlw	0
   747  0036F0  6E08               	movwf	(WS_Word@C+1)^0,c
   748  0036F2  0E00               	movlw	0
   749  0036F4  6E07               	movwf	WS_Word@C^0,c
   750  0036F6  EC0F  F019         	call	_WS_Word	;wreg free
   751                           
   752                           ;WS2812b/BitBangWS2812b.c: 109:     WS_Word(0x00, 0x00, 0x09);
   753  0036FA  0E00               	movlw	0
   754  0036FC  6E04               	movwf	(WS_Word@A+1)^0,c
   755  0036FE  0E00               	movlw	0
   756  003700  6E03               	movwf	WS_Word@A^0,c
   757  003702  0E00               	movlw	0
   758  003704  6E06               	movwf	(WS_Word@B+1)^0,c
   759  003706  0E00               	movlw	0
   760  003708  6E05               	movwf	WS_Word@B^0,c
   761  00370A  0E00               	movlw	0
   762  00370C  6E08               	movwf	(WS_Word@C+1)^0,c
   763  00370E  0E09               	movlw	9
   764  003710  6E07               	movwf	WS_Word@C^0,c
   765  003712  EC0F  F019         	call	_WS_Word	;wreg free
   766                           
   767                           ;WS2812b/BitBangWS2812b.c: 110:     WS_Word(0x09, 0x09, 0x00);
   768  003716  0E00               	movlw	0
   769  003718  6E04               	movwf	(WS_Word@A+1)^0,c
   770  00371A  0E09               	movlw	9
   771  00371C  6E03               	movwf	WS_Word@A^0,c
   772  00371E  0E00               	movlw	0
   773  003720  6E06               	movwf	(WS_Word@B+1)^0,c
   774  003722  0E09               	movlw	9
   775  003724  6E05               	movwf	WS_Word@B^0,c
   776  003726  0E00               	movlw	0
   777  003728  6E08               	movwf	(WS_Word@C+1)^0,c
   778  00372A  0E00               	movlw	0
   779  00372C  6E07               	movwf	WS_Word@C^0,c
   780  00372E  EC0F  F019         	call	_WS_Word	;wreg free
   781                           
   782                           ;WS2812b/BitBangWS2812b.c: 111:     WS_Word(0x09, 0x00, 0x09);
   783  003732  0E00               	movlw	0
   784  003734  6E04               	movwf	(WS_Word@A+1)^0,c
   785  003736  0E09               	movlw	9
   786  003738  6E03               	movwf	WS_Word@A^0,c
   787  00373A  0E00               	movlw	0
   788  00373C  6E06               	movwf	(WS_Word@B+1)^0,c
   789  00373E  0E00               	movlw	0
   790  003740  6E05               	movwf	WS_Word@B^0,c
   791  003742  0E00               	movlw	0
   792  003744  6E08               	movwf	(WS_Word@C+1)^0,c
   793  003746  0E09               	movlw	9
   794  003748  6E07               	movwf	WS_Word@C^0,c
   795  00374A  EC0F  F019         	call	_WS_Word	;wreg free
   796  00374E                     
   797                           ;WS2812b/BitBangWS2812b.c: 113:     _delay((unsigned long)((60.000)*(32000000/4000.0)));
   798  00374E  0E03               	movlw	3
   799  003750  6E17               	movwf	(??_WSLoop+1)^0,c
   800  003752  0E70               	movlw	112
   801  003754  6E16               	movwf	??_WSLoop^0,c
   802  003756  0E5C               	movlw	92
   803  003758                     u197:
   804  003758  2EE8               	decfsz	wreg,f,c
   805  00375A  D7FE               	bra	u197
   806  00375C  2E16               	decfsz	??_WSLoop^0,f,c
   807  00375E  D7FC               	bra	u197
   808  003760  2E17               	decfsz	(??_WSLoop+1)^0,f,c
   809  003762  D7FA               	bra	u197
   810  003764  D000               	nop2	
   811  003766                     
   812                           ;WS2812b/BitBangWS2812b.c: 114:     _delay((unsigned long)((250)*(32000000/4000.0)));
   813  003766  0E0B               	movlw	11
   814  003768  6E17               	movwf	(??_WSLoop+1)^0,c
   815  00376A  0E26               	movlw	38
   816  00376C  6E16               	movwf	??_WSLoop^0,c
   817  00376E  0E5E               	movlw	94
   818  003770                     u207:
   819  003770  2EE8               	decfsz	wreg,f,c
   820  003772  D7FE               	bra	u207
   821  003774  2E16               	decfsz	??_WSLoop^0,f,c
   822  003776  D7FC               	bra	u207
   823  003778  2E17               	decfsz	(??_WSLoop+1)^0,f,c
   824  00377A  D7FA               	bra	u207
   825                           
   826                           ;WS2812b/BitBangWS2812b.c: 116:     WS_Word(0x09, 0x00, 0x09);
   827  00377C  0E00               	movlw	0
   828  00377E  6E04               	movwf	(WS_Word@A+1)^0,c
   829  003780  0E09               	movlw	9
   830  003782  6E03               	movwf	WS_Word@A^0,c
   831  003784  0E00               	movlw	0
   832  003786  6E06               	movwf	(WS_Word@B+1)^0,c
   833  003788  0E00               	movlw	0
   834  00378A  6E05               	movwf	WS_Word@B^0,c
   835  00378C  0E00               	movlw	0
   836  00378E  6E08               	movwf	(WS_Word@C+1)^0,c
   837  003790  0E09               	movlw	9
   838  003792  6E07               	movwf	WS_Word@C^0,c
   839  003794  EC0F  F019         	call	_WS_Word	;wreg free
   840                           
   841                           ;WS2812b/BitBangWS2812b.c: 117:     WS_Word(0x00, 0x09, 0x09);
   842  003798  0E00               	movlw	0
   843  00379A  6E04               	movwf	(WS_Word@A+1)^0,c
   844  00379C  0E00               	movlw	0
   845  00379E  6E03               	movwf	WS_Word@A^0,c
   846  0037A0  0E00               	movlw	0
   847  0037A2  6E06               	movwf	(WS_Word@B+1)^0,c
   848  0037A4  0E09               	movlw	9
   849  0037A6  6E05               	movwf	WS_Word@B^0,c
   850  0037A8  0E00               	movlw	0
   851  0037AA  6E08               	movwf	(WS_Word@C+1)^0,c
   852  0037AC  0E09               	movlw	9
   853  0037AE  6E07               	movwf	WS_Word@C^0,c
   854  0037B0  EC0F  F019         	call	_WS_Word	;wreg free
   855                           
   856                           ;WS2812b/BitBangWS2812b.c: 118:     WS_Word(0xFF, 0x00, 0x00);
   857  0037B4  0E00               	movlw	0
   858  0037B6  6E04               	movwf	(WS_Word@A+1)^0,c
   859  0037B8  6803               	setf	WS_Word@A^0,c
   860  0037BA  0E00               	movlw	0
   861  0037BC  6E06               	movwf	(WS_Word@B+1)^0,c
   862  0037BE  0E00               	movlw	0
   863  0037C0  6E05               	movwf	WS_Word@B^0,c
   864  0037C2  0E00               	movlw	0
   865  0037C4  6E08               	movwf	(WS_Word@C+1)^0,c
   866  0037C6  0E00               	movlw	0
   867  0037C8  6E07               	movwf	WS_Word@C^0,c
   868  0037CA  EC0F  F019         	call	_WS_Word	;wreg free
   869                           
   870                           ;WS2812b/BitBangWS2812b.c: 119:     WS_Word(0x00, 0x09, 0x00);
   871  0037CE  0E00               	movlw	0
   872  0037D0  6E04               	movwf	(WS_Word@A+1)^0,c
   873  0037D2  0E00               	movlw	0
   874  0037D4  6E03               	movwf	WS_Word@A^0,c
   875  0037D6  0E00               	movlw	0
   876  0037D8  6E06               	movwf	(WS_Word@B+1)^0,c
   877  0037DA  0E09               	movlw	9
   878  0037DC  6E05               	movwf	WS_Word@B^0,c
   879  0037DE  0E00               	movlw	0
   880  0037E0  6E08               	movwf	(WS_Word@C+1)^0,c
   881  0037E2  0E00               	movlw	0
   882  0037E4  6E07               	movwf	WS_Word@C^0,c
   883  0037E6  EC0F  F019         	call	_WS_Word	;wreg free
   884                           
   885                           ;WS2812b/BitBangWS2812b.c: 120:     WS_Word(0x00, 0x00, 0x09);
   886  0037EA  0E00               	movlw	0
   887  0037EC  6E04               	movwf	(WS_Word@A+1)^0,c
   888  0037EE  0E00               	movlw	0
   889  0037F0  6E03               	movwf	WS_Word@A^0,c
   890  0037F2  0E00               	movlw	0
   891  0037F4  6E06               	movwf	(WS_Word@B+1)^0,c
   892  0037F6  0E00               	movlw	0
   893  0037F8  6E05               	movwf	WS_Word@B^0,c
   894  0037FA  0E00               	movlw	0
   895  0037FC  6E08               	movwf	(WS_Word@C+1)^0,c
   896  0037FE  0E09               	movlw	9
   897  003800  6E07               	movwf	WS_Word@C^0,c
   898  003802  EC0F  F019         	call	_WS_Word	;wreg free
   899                           
   900                           ;WS2812b/BitBangWS2812b.c: 121:     WS_Word(0x09, 0x09, 0x00);
   901  003806  0E00               	movlw	0
   902  003808  6E04               	movwf	(WS_Word@A+1)^0,c
   903  00380A  0E09               	movlw	9
   904  00380C  6E03               	movwf	WS_Word@A^0,c
   905  00380E  0E00               	movlw	0
   906  003810  6E06               	movwf	(WS_Word@B+1)^0,c
   907  003812  0E09               	movlw	9
   908  003814  6E05               	movwf	WS_Word@B^0,c
   909  003816  0E00               	movlw	0
   910  003818  6E08               	movwf	(WS_Word@C+1)^0,c
   911  00381A  0E00               	movlw	0
   912  00381C  6E07               	movwf	WS_Word@C^0,c
   913  00381E  EC0F  F019         	call	_WS_Word	;wreg free
   914                           
   915                           ;WS2812b/BitBangWS2812b.c: 122:     WS_Word(0x09, 0x00, 0x09);
   916  003822  0E00               	movlw	0
   917  003824  6E04               	movwf	(WS_Word@A+1)^0,c
   918  003826  0E09               	movlw	9
   919  003828  6E03               	movwf	WS_Word@A^0,c
   920  00382A  0E00               	movlw	0
   921  00382C  6E06               	movwf	(WS_Word@B+1)^0,c
   922  00382E  0E00               	movlw	0
   923  003830  6E05               	movwf	WS_Word@B^0,c
   924  003832  0E00               	movlw	0
   925  003834  6E08               	movwf	(WS_Word@C+1)^0,c
   926  003836  0E09               	movlw	9
   927  003838  6E07               	movwf	WS_Word@C^0,c
   928  00383A  EC0F  F019         	call	_WS_Word	;wreg free
   929                           
   930                           ;WS2812b/BitBangWS2812b.c: 123:     WS_Word(0x00, 0x09, 0x09);
   931  00383E  0E00               	movlw	0
   932  003840  6E04               	movwf	(WS_Word@A+1)^0,c
   933  003842  0E00               	movlw	0
   934  003844  6E03               	movwf	WS_Word@A^0,c
   935  003846  0E00               	movlw	0
   936  003848  6E06               	movwf	(WS_Word@B+1)^0,c
   937  00384A  0E09               	movlw	9
   938  00384C  6E05               	movwf	WS_Word@B^0,c
   939  00384E  0E00               	movlw	0
   940  003850  6E08               	movwf	(WS_Word@C+1)^0,c
   941  003852  0E09               	movlw	9
   942  003854  6E07               	movwf	WS_Word@C^0,c
   943  003856  EC0F  F019         	call	_WS_Word	;wreg free
   944                           
   945                           ;WS2812b/BitBangWS2812b.c: 124:     WS_Word(0xFF, 0x00, 0x00);
   946  00385A  0E00               	movlw	0
   947  00385C  6E04               	movwf	(WS_Word@A+1)^0,c
   948  00385E  6803               	setf	WS_Word@A^0,c
   949  003860  0E00               	movlw	0
   950  003862  6E06               	movwf	(WS_Word@B+1)^0,c
   951  003864  0E00               	movlw	0
   952  003866  6E05               	movwf	WS_Word@B^0,c
   953  003868  0E00               	movlw	0
   954  00386A  6E08               	movwf	(WS_Word@C+1)^0,c
   955  00386C  0E00               	movlw	0
   956  00386E  6E07               	movwf	WS_Word@C^0,c
   957  003870  EC0F  F019         	call	_WS_Word	;wreg free
   958                           
   959                           ;WS2812b/BitBangWS2812b.c: 125:     WS_Word(0x00, 0x09, 0x00);
   960  003874  0E00               	movlw	0
   961  003876  6E04               	movwf	(WS_Word@A+1)^0,c
   962  003878  0E00               	movlw	0
   963  00387A  6E03               	movwf	WS_Word@A^0,c
   964  00387C  0E00               	movlw	0
   965  00387E  6E06               	movwf	(WS_Word@B+1)^0,c
   966  003880  0E09               	movlw	9
   967  003882  6E05               	movwf	WS_Word@B^0,c
   968  003884  0E00               	movlw	0
   969  003886  6E08               	movwf	(WS_Word@C+1)^0,c
   970  003888  0E00               	movlw	0
   971  00388A  6E07               	movwf	WS_Word@C^0,c
   972  00388C  EC0F  F019         	call	_WS_Word	;wreg free
   973                           
   974                           ;WS2812b/BitBangWS2812b.c: 126:     WS_Word(0x00, 0x00, 0x09);
   975  003890  0E00               	movlw	0
   976  003892  6E04               	movwf	(WS_Word@A+1)^0,c
   977  003894  0E00               	movlw	0
   978  003896  6E03               	movwf	WS_Word@A^0,c
   979  003898  0E00               	movlw	0
   980  00389A  6E06               	movwf	(WS_Word@B+1)^0,c
   981  00389C  0E00               	movlw	0
   982  00389E  6E05               	movwf	WS_Word@B^0,c
   983  0038A0  0E00               	movlw	0
   984  0038A2  6E08               	movwf	(WS_Word@C+1)^0,c
   985  0038A4  0E09               	movlw	9
   986  0038A6  6E07               	movwf	WS_Word@C^0,c
   987  0038A8  EC0F  F019         	call	_WS_Word	;wreg free
   988                           
   989                           ;WS2812b/BitBangWS2812b.c: 127:     WS_Word(0x09, 0x09, 0x00);
   990  0038AC  0E00               	movlw	0
   991  0038AE  6E04               	movwf	(WS_Word@A+1)^0,c
   992  0038B0  0E09               	movlw	9
   993  0038B2  6E03               	movwf	WS_Word@A^0,c
   994  0038B4  0E00               	movlw	0
   995  0038B6  6E06               	movwf	(WS_Word@B+1)^0,c
   996  0038B8  0E09               	movlw	9
   997  0038BA  6E05               	movwf	WS_Word@B^0,c
   998  0038BC  0E00               	movlw	0
   999  0038BE  6E08               	movwf	(WS_Word@C+1)^0,c
  1000  0038C0  0E00               	movlw	0
  1001  0038C2  6E07               	movwf	WS_Word@C^0,c
  1002  0038C4  EC0F  F019         	call	_WS_Word	;wreg free
  1003                           
  1004                           ;WS2812b/BitBangWS2812b.c: 128:     WS_Word(0x09, 0x00, 0x09);
  1005  0038C8  0E00               	movlw	0
  1006  0038CA  6E04               	movwf	(WS_Word@A+1)^0,c
  1007  0038CC  0E09               	movlw	9
  1008  0038CE  6E03               	movwf	WS_Word@A^0,c
  1009  0038D0  0E00               	movlw	0
  1010  0038D2  6E06               	movwf	(WS_Word@B+1)^0,c
  1011  0038D4  0E00               	movlw	0
  1012  0038D6  6E05               	movwf	WS_Word@B^0,c
  1013  0038D8  0E00               	movlw	0
  1014  0038DA  6E08               	movwf	(WS_Word@C+1)^0,c
  1015  0038DC  0E09               	movlw	9
  1016  0038DE  6E07               	movwf	WS_Word@C^0,c
  1017  0038E0  EC0F  F019         	call	_WS_Word	;wreg free
  1018                           
  1019                           ;WS2812b/BitBangWS2812b.c: 129:     WS_Word(0x00, 0x09, 0x09);
  1020  0038E4  0E00               	movlw	0
  1021  0038E6  6E04               	movwf	(WS_Word@A+1)^0,c
  1022  0038E8  0E00               	movlw	0
  1023  0038EA  6E03               	movwf	WS_Word@A^0,c
  1024  0038EC  0E00               	movlw	0
  1025  0038EE  6E06               	movwf	(WS_Word@B+1)^0,c
  1026  0038F0  0E09               	movlw	9
  1027  0038F2  6E05               	movwf	WS_Word@B^0,c
  1028  0038F4  0E00               	movlw	0
  1029  0038F6  6E08               	movwf	(WS_Word@C+1)^0,c
  1030  0038F8  0E09               	movlw	9
  1031  0038FA  6E07               	movwf	WS_Word@C^0,c
  1032  0038FC  EC0F  F019         	call	_WS_Word	;wreg free
  1033                           
  1034                           ;WS2812b/BitBangWS2812b.c: 130:     WS_Word(0xFF, 0x00, 0x00);
  1035  003900  0E00               	movlw	0
  1036  003902  6E04               	movwf	(WS_Word@A+1)^0,c
  1037  003904  6803               	setf	WS_Word@A^0,c
  1038  003906  0E00               	movlw	0
  1039  003908  6E06               	movwf	(WS_Word@B+1)^0,c
  1040  00390A  0E00               	movlw	0
  1041  00390C  6E05               	movwf	WS_Word@B^0,c
  1042  00390E  0E00               	movlw	0
  1043  003910  6E08               	movwf	(WS_Word@C+1)^0,c
  1044  003912  0E00               	movlw	0
  1045  003914  6E07               	movwf	WS_Word@C^0,c
  1046  003916  EC0F  F019         	call	_WS_Word	;wreg free
  1047                           
  1048                           ;WS2812b/BitBangWS2812b.c: 131:     WS_Word(0x00, 0x09, 0x00);
  1049  00391A  0E00               	movlw	0
  1050  00391C  6E04               	movwf	(WS_Word@A+1)^0,c
  1051  00391E  0E00               	movlw	0
  1052  003920  6E03               	movwf	WS_Word@A^0,c
  1053  003922  0E00               	movlw	0
  1054  003924  6E06               	movwf	(WS_Word@B+1)^0,c
  1055  003926  0E09               	movlw	9
  1056  003928  6E05               	movwf	WS_Word@B^0,c
  1057  00392A  0E00               	movlw	0
  1058  00392C  6E08               	movwf	(WS_Word@C+1)^0,c
  1059  00392E  0E00               	movlw	0
  1060  003930  6E07               	movwf	WS_Word@C^0,c
  1061  003932  EC0F  F019         	call	_WS_Word	;wreg free
  1062                           
  1063                           ;WS2812b/BitBangWS2812b.c: 132:     WS_Word(0x00, 0x00, 0x09);
  1064  003936  0E00               	movlw	0
  1065  003938  6E04               	movwf	(WS_Word@A+1)^0,c
  1066  00393A  0E00               	movlw	0
  1067  00393C  6E03               	movwf	WS_Word@A^0,c
  1068  00393E  0E00               	movlw	0
  1069  003940  6E06               	movwf	(WS_Word@B+1)^0,c
  1070  003942  0E00               	movlw	0
  1071  003944  6E05               	movwf	WS_Word@B^0,c
  1072  003946  0E00               	movlw	0
  1073  003948  6E08               	movwf	(WS_Word@C+1)^0,c
  1074  00394A  0E09               	movlw	9
  1075  00394C  6E07               	movwf	WS_Word@C^0,c
  1076  00394E  EC0F  F019         	call	_WS_Word	;wreg free
  1077                           
  1078                           ;WS2812b/BitBangWS2812b.c: 133:     WS_Word(0x09, 0x09, 0x00);
  1079  003952  0E00               	movlw	0
  1080  003954  6E04               	movwf	(WS_Word@A+1)^0,c
  1081  003956  0E09               	movlw	9
  1082  003958  6E03               	movwf	WS_Word@A^0,c
  1083  00395A  0E00               	movlw	0
  1084  00395C  6E06               	movwf	(WS_Word@B+1)^0,c
  1085  00395E  0E09               	movlw	9
  1086  003960  6E05               	movwf	WS_Word@B^0,c
  1087  003962  0E00               	movlw	0
  1088  003964  6E08               	movwf	(WS_Word@C+1)^0,c
  1089  003966  0E00               	movlw	0
  1090  003968  6E07               	movwf	WS_Word@C^0,c
  1091  00396A  EC0F  F019         	call	_WS_Word	;wreg free
  1092  00396E                     
  1093                           ;WS2812b/BitBangWS2812b.c: 135:     _delay((unsigned long)((60.000)*(32000000/4000.0)));
  1094  00396E  0E03               	movlw	3
  1095  003970  6E17               	movwf	(??_WSLoop+1)^0,c
  1096  003972  0E70               	movlw	112
  1097  003974  6E16               	movwf	??_WSLoop^0,c
  1098  003976  0E5C               	movlw	92
  1099  003978                     u217:
  1100  003978  2EE8               	decfsz	wreg,f,c
  1101  00397A  D7FE               	bra	u217
  1102  00397C  2E16               	decfsz	??_WSLoop^0,f,c
  1103  00397E  D7FC               	bra	u217
  1104  003980  2E17               	decfsz	(??_WSLoop+1)^0,f,c
  1105  003982  D7FA               	bra	u217
  1106  003984  D000               	nop2	
  1107  003986                     
  1108                           ;WS2812b/BitBangWS2812b.c: 136:     _delay((unsigned long)((250)*(32000000/4000.0)));
  1109  003986  0E0B               	movlw	11
  1110  003988  6E17               	movwf	(??_WSLoop+1)^0,c
  1111  00398A  0E26               	movlw	38
  1112  00398C  6E16               	movwf	??_WSLoop^0,c
  1113  00398E  0E5E               	movlw	94
  1114  003990                     u227:
  1115  003990  2EE8               	decfsz	wreg,f,c
  1116  003992  D7FE               	bra	u227
  1117  003994  2E16               	decfsz	??_WSLoop^0,f,c
  1118  003996  D7FC               	bra	u227
  1119  003998  2E17               	decfsz	(??_WSLoop+1)^0,f,c
  1120  00399A  D7FA               	bra	u227
  1121                           
  1122                           ;WS2812b/BitBangWS2812b.c: 138:     WS_Word(0x09, 0x09, 0x00);
  1123  00399C  0E00               	movlw	0
  1124  00399E  6E04               	movwf	(WS_Word@A+1)^0,c
  1125  0039A0  0E09               	movlw	9
  1126  0039A2  6E03               	movwf	WS_Word@A^0,c
  1127  0039A4  0E00               	movlw	0
  1128  0039A6  6E06               	movwf	(WS_Word@B+1)^0,c
  1129  0039A8  0E09               	movlw	9
  1130  0039AA  6E05               	movwf	WS_Word@B^0,c
  1131  0039AC  0E00               	movlw	0
  1132  0039AE  6E08               	movwf	(WS_Word@C+1)^0,c
  1133  0039B0  0E00               	movlw	0
  1134  0039B2  6E07               	movwf	WS_Word@C^0,c
  1135  0039B4  EC0F  F019         	call	_WS_Word	;wreg free
  1136                           
  1137                           ;WS2812b/BitBangWS2812b.c: 139:     WS_Word(0x09, 0x00, 0x09);
  1138  0039B8  0E00               	movlw	0
  1139  0039BA  6E04               	movwf	(WS_Word@A+1)^0,c
  1140  0039BC  0E09               	movlw	9
  1141  0039BE  6E03               	movwf	WS_Word@A^0,c
  1142  0039C0  0E00               	movlw	0
  1143  0039C2  6E06               	movwf	(WS_Word@B+1)^0,c
  1144  0039C4  0E00               	movlw	0
  1145  0039C6  6E05               	movwf	WS_Word@B^0,c
  1146  0039C8  0E00               	movlw	0
  1147  0039CA  6E08               	movwf	(WS_Word@C+1)^0,c
  1148  0039CC  0E09               	movlw	9
  1149  0039CE  6E07               	movwf	WS_Word@C^0,c
  1150  0039D0  EC0F  F019         	call	_WS_Word	;wreg free
  1151                           
  1152                           ;WS2812b/BitBangWS2812b.c: 140:     WS_Word(0x00, 0x09, 0x09);
  1153  0039D4  0E00               	movlw	0
  1154  0039D6  6E04               	movwf	(WS_Word@A+1)^0,c
  1155  0039D8  0E00               	movlw	0
  1156  0039DA  6E03               	movwf	WS_Word@A^0,c
  1157  0039DC  0E00               	movlw	0
  1158  0039DE  6E06               	movwf	(WS_Word@B+1)^0,c
  1159  0039E0  0E09               	movlw	9
  1160  0039E2  6E05               	movwf	WS_Word@B^0,c
  1161  0039E4  0E00               	movlw	0
  1162  0039E6  6E08               	movwf	(WS_Word@C+1)^0,c
  1163  0039E8  0E09               	movlw	9
  1164  0039EA  6E07               	movwf	WS_Word@C^0,c
  1165  0039EC  EC0F  F019         	call	_WS_Word	;wreg free
  1166                           
  1167                           ;WS2812b/BitBangWS2812b.c: 141:     WS_Word(0xFF, 0x00, 0x00);
  1168  0039F0  0E00               	movlw	0
  1169  0039F2  6E04               	movwf	(WS_Word@A+1)^0,c
  1170  0039F4  6803               	setf	WS_Word@A^0,c
  1171  0039F6  0E00               	movlw	0
  1172  0039F8  6E06               	movwf	(WS_Word@B+1)^0,c
  1173  0039FA  0E00               	movlw	0
  1174  0039FC  6E05               	movwf	WS_Word@B^0,c
  1175  0039FE  0E00               	movlw	0
  1176  003A00  6E08               	movwf	(WS_Word@C+1)^0,c
  1177  003A02  0E00               	movlw	0
  1178  003A04  6E07               	movwf	WS_Word@C^0,c
  1179  003A06  EC0F  F019         	call	_WS_Word	;wreg free
  1180                           
  1181                           ;WS2812b/BitBangWS2812b.c: 142:     WS_Word(0x00, 0x09, 0x00);
  1182  003A0A  0E00               	movlw	0
  1183  003A0C  6E04               	movwf	(WS_Word@A+1)^0,c
  1184  003A0E  0E00               	movlw	0
  1185  003A10  6E03               	movwf	WS_Word@A^0,c
  1186  003A12  0E00               	movlw	0
  1187  003A14  6E06               	movwf	(WS_Word@B+1)^0,c
  1188  003A16  0E09               	movlw	9
  1189  003A18  6E05               	movwf	WS_Word@B^0,c
  1190  003A1A  0E00               	movlw	0
  1191  003A1C  6E08               	movwf	(WS_Word@C+1)^0,c
  1192  003A1E  0E00               	movlw	0
  1193  003A20  6E07               	movwf	WS_Word@C^0,c
  1194  003A22  EC0F  F019         	call	_WS_Word	;wreg free
  1195                           
  1196                           ;WS2812b/BitBangWS2812b.c: 143:     WS_Word(0x00, 0x00, 0x09);
  1197  003A26  0E00               	movlw	0
  1198  003A28  6E04               	movwf	(WS_Word@A+1)^0,c
  1199  003A2A  0E00               	movlw	0
  1200  003A2C  6E03               	movwf	WS_Word@A^0,c
  1201  003A2E  0E00               	movlw	0
  1202  003A30  6E06               	movwf	(WS_Word@B+1)^0,c
  1203  003A32  0E00               	movlw	0
  1204  003A34  6E05               	movwf	WS_Word@B^0,c
  1205  003A36  0E00               	movlw	0
  1206  003A38  6E08               	movwf	(WS_Word@C+1)^0,c
  1207  003A3A  0E09               	movlw	9
  1208  003A3C  6E07               	movwf	WS_Word@C^0,c
  1209  003A3E  EC0F  F019         	call	_WS_Word	;wreg free
  1210                           
  1211                           ;WS2812b/BitBangWS2812b.c: 144:     WS_Word(0x09, 0x09, 0x00);
  1212  003A42  0E00               	movlw	0
  1213  003A44  6E04               	movwf	(WS_Word@A+1)^0,c
  1214  003A46  0E09               	movlw	9
  1215  003A48  6E03               	movwf	WS_Word@A^0,c
  1216  003A4A  0E00               	movlw	0
  1217  003A4C  6E06               	movwf	(WS_Word@B+1)^0,c
  1218  003A4E  0E09               	movlw	9
  1219  003A50  6E05               	movwf	WS_Word@B^0,c
  1220  003A52  0E00               	movlw	0
  1221  003A54  6E08               	movwf	(WS_Word@C+1)^0,c
  1222  003A56  0E00               	movlw	0
  1223  003A58  6E07               	movwf	WS_Word@C^0,c
  1224  003A5A  EC0F  F019         	call	_WS_Word	;wreg free
  1225                           
  1226                           ;WS2812b/BitBangWS2812b.c: 145:     WS_Word(0x09, 0x00, 0x09);
  1227  003A5E  0E00               	movlw	0
  1228  003A60  6E04               	movwf	(WS_Word@A+1)^0,c
  1229  003A62  0E09               	movlw	9
  1230  003A64  6E03               	movwf	WS_Word@A^0,c
  1231  003A66  0E00               	movlw	0
  1232  003A68  6E06               	movwf	(WS_Word@B+1)^0,c
  1233  003A6A  0E00               	movlw	0
  1234  003A6C  6E05               	movwf	WS_Word@B^0,c
  1235  003A6E  0E00               	movlw	0
  1236  003A70  6E08               	movwf	(WS_Word@C+1)^0,c
  1237  003A72  0E09               	movlw	9
  1238  003A74  6E07               	movwf	WS_Word@C^0,c
  1239  003A76  EC0F  F019         	call	_WS_Word	;wreg free
  1240                           
  1241                           ;WS2812b/BitBangWS2812b.c: 146:     WS_Word(0x00, 0x09, 0x09);
  1242  003A7A  0E00               	movlw	0
  1243  003A7C  6E04               	movwf	(WS_Word@A+1)^0,c
  1244  003A7E  0E00               	movlw	0
  1245  003A80  6E03               	movwf	WS_Word@A^0,c
  1246  003A82  0E00               	movlw	0
  1247  003A84  6E06               	movwf	(WS_Word@B+1)^0,c
  1248  003A86  0E09               	movlw	9
  1249  003A88  6E05               	movwf	WS_Word@B^0,c
  1250  003A8A  0E00               	movlw	0
  1251  003A8C  6E08               	movwf	(WS_Word@C+1)^0,c
  1252  003A8E  0E09               	movlw	9
  1253  003A90  6E07               	movwf	WS_Word@C^0,c
  1254  003A92  EC0F  F019         	call	_WS_Word	;wreg free
  1255                           
  1256                           ;WS2812b/BitBangWS2812b.c: 147:     WS_Word(0xFF, 0x00, 0x00);
  1257  003A96  0E00               	movlw	0
  1258  003A98  6E04               	movwf	(WS_Word@A+1)^0,c
  1259  003A9A  6803               	setf	WS_Word@A^0,c
  1260  003A9C  0E00               	movlw	0
  1261  003A9E  6E06               	movwf	(WS_Word@B+1)^0,c
  1262  003AA0  0E00               	movlw	0
  1263  003AA2  6E05               	movwf	WS_Word@B^0,c
  1264  003AA4  0E00               	movlw	0
  1265  003AA6  6E08               	movwf	(WS_Word@C+1)^0,c
  1266  003AA8  0E00               	movlw	0
  1267  003AAA  6E07               	movwf	WS_Word@C^0,c
  1268  003AAC  EC0F  F019         	call	_WS_Word	;wreg free
  1269                           
  1270                           ;WS2812b/BitBangWS2812b.c: 148:     WS_Word(0x00, 0x09, 0x00);
  1271  003AB0  0E00               	movlw	0
  1272  003AB2  6E04               	movwf	(WS_Word@A+1)^0,c
  1273  003AB4  0E00               	movlw	0
  1274  003AB6  6E03               	movwf	WS_Word@A^0,c
  1275  003AB8  0E00               	movlw	0
  1276  003ABA  6E06               	movwf	(WS_Word@B+1)^0,c
  1277  003ABC  0E09               	movlw	9
  1278  003ABE  6E05               	movwf	WS_Word@B^0,c
  1279  003AC0  0E00               	movlw	0
  1280  003AC2  6E08               	movwf	(WS_Word@C+1)^0,c
  1281  003AC4  0E00               	movlw	0
  1282  003AC6  6E07               	movwf	WS_Word@C^0,c
  1283  003AC8  EC0F  F019         	call	_WS_Word	;wreg free
  1284                           
  1285                           ;WS2812b/BitBangWS2812b.c: 149:     WS_Word(0x00, 0x00, 0x09);
  1286  003ACC  0E00               	movlw	0
  1287  003ACE  6E04               	movwf	(WS_Word@A+1)^0,c
  1288  003AD0  0E00               	movlw	0
  1289  003AD2  6E03               	movwf	WS_Word@A^0,c
  1290  003AD4  0E00               	movlw	0
  1291  003AD6  6E06               	movwf	(WS_Word@B+1)^0,c
  1292  003AD8  0E00               	movlw	0
  1293  003ADA  6E05               	movwf	WS_Word@B^0,c
  1294  003ADC  0E00               	movlw	0
  1295  003ADE  6E08               	movwf	(WS_Word@C+1)^0,c
  1296  003AE0  0E09               	movlw	9
  1297  003AE2  6E07               	movwf	WS_Word@C^0,c
  1298  003AE4  EC0F  F019         	call	_WS_Word	;wreg free
  1299                           
  1300                           ;WS2812b/BitBangWS2812b.c: 150:     WS_Word(0x09, 0x09, 0x00);
  1301  003AE8  0E00               	movlw	0
  1302  003AEA  6E04               	movwf	(WS_Word@A+1)^0,c
  1303  003AEC  0E09               	movlw	9
  1304  003AEE  6E03               	movwf	WS_Word@A^0,c
  1305  003AF0  0E00               	movlw	0
  1306  003AF2  6E06               	movwf	(WS_Word@B+1)^0,c
  1307  003AF4  0E09               	movlw	9
  1308  003AF6  6E05               	movwf	WS_Word@B^0,c
  1309  003AF8  0E00               	movlw	0
  1310  003AFA  6E08               	movwf	(WS_Word@C+1)^0,c
  1311  003AFC  0E00               	movlw	0
  1312  003AFE  6E07               	movwf	WS_Word@C^0,c
  1313  003B00  EC0F  F019         	call	_WS_Word	;wreg free
  1314                           
  1315                           ;WS2812b/BitBangWS2812b.c: 151:     WS_Word(0x09, 0x00, 0x09);
  1316  003B04  0E00               	movlw	0
  1317  003B06  6E04               	movwf	(WS_Word@A+1)^0,c
  1318  003B08  0E09               	movlw	9
  1319  003B0A  6E03               	movwf	WS_Word@A^0,c
  1320  003B0C  0E00               	movlw	0
  1321  003B0E  6E06               	movwf	(WS_Word@B+1)^0,c
  1322  003B10  0E00               	movlw	0
  1323  003B12  6E05               	movwf	WS_Word@B^0,c
  1324  003B14  0E00               	movlw	0
  1325  003B16  6E08               	movwf	(WS_Word@C+1)^0,c
  1326  003B18  0E09               	movlw	9
  1327  003B1A  6E07               	movwf	WS_Word@C^0,c
  1328  003B1C  EC0F  F019         	call	_WS_Word	;wreg free
  1329                           
  1330                           ;WS2812b/BitBangWS2812b.c: 152:     WS_Word(0x00, 0x09, 0x09);
  1331  003B20  0E00               	movlw	0
  1332  003B22  6E04               	movwf	(WS_Word@A+1)^0,c
  1333  003B24  0E00               	movlw	0
  1334  003B26  6E03               	movwf	WS_Word@A^0,c
  1335  003B28  0E00               	movlw	0
  1336  003B2A  6E06               	movwf	(WS_Word@B+1)^0,c
  1337  003B2C  0E09               	movlw	9
  1338  003B2E  6E05               	movwf	WS_Word@B^0,c
  1339  003B30  0E00               	movlw	0
  1340  003B32  6E08               	movwf	(WS_Word@C+1)^0,c
  1341  003B34  0E09               	movlw	9
  1342  003B36  6E07               	movwf	WS_Word@C^0,c
  1343  003B38  EC0F  F019         	call	_WS_Word	;wreg free
  1344                           
  1345                           ;WS2812b/BitBangWS2812b.c: 153:     WS_Word(0xFF, 0x00, 0x00);
  1346  003B3C  0E00               	movlw	0
  1347  003B3E  6E04               	movwf	(WS_Word@A+1)^0,c
  1348  003B40  6803               	setf	WS_Word@A^0,c
  1349  003B42  0E00               	movlw	0
  1350  003B44  6E06               	movwf	(WS_Word@B+1)^0,c
  1351  003B46  0E00               	movlw	0
  1352  003B48  6E05               	movwf	WS_Word@B^0,c
  1353  003B4A  0E00               	movlw	0
  1354  003B4C  6E08               	movwf	(WS_Word@C+1)^0,c
  1355  003B4E  0E00               	movlw	0
  1356  003B50  6E07               	movwf	WS_Word@C^0,c
  1357  003B52  EC0F  F019         	call	_WS_Word	;wreg free
  1358                           
  1359                           ;WS2812b/BitBangWS2812b.c: 154:     WS_Word(0x00, 0x09, 0x00);
  1360  003B56  0E00               	movlw	0
  1361  003B58  6E04               	movwf	(WS_Word@A+1)^0,c
  1362  003B5A  0E00               	movlw	0
  1363  003B5C  6E03               	movwf	WS_Word@A^0,c
  1364  003B5E  0E00               	movlw	0
  1365  003B60  6E06               	movwf	(WS_Word@B+1)^0,c
  1366  003B62  0E09               	movlw	9
  1367  003B64  6E05               	movwf	WS_Word@B^0,c
  1368  003B66  0E00               	movlw	0
  1369  003B68  6E08               	movwf	(WS_Word@C+1)^0,c
  1370  003B6A  0E00               	movlw	0
  1371  003B6C  6E07               	movwf	WS_Word@C^0,c
  1372  003B6E  EC0F  F019         	call	_WS_Word	;wreg free
  1373                           
  1374                           ;WS2812b/BitBangWS2812b.c: 155:     WS_Word(0x00, 0x00, 0x09);
  1375  003B72  0E00               	movlw	0
  1376  003B74  6E04               	movwf	(WS_Word@A+1)^0,c
  1377  003B76  0E00               	movlw	0
  1378  003B78  6E03               	movwf	WS_Word@A^0,c
  1379  003B7A  0E00               	movlw	0
  1380  003B7C  6E06               	movwf	(WS_Word@B+1)^0,c
  1381  003B7E  0E00               	movlw	0
  1382  003B80  6E05               	movwf	WS_Word@B^0,c
  1383  003B82  0E00               	movlw	0
  1384  003B84  6E08               	movwf	(WS_Word@C+1)^0,c
  1385  003B86  0E09               	movlw	9
  1386  003B88  6E07               	movwf	WS_Word@C^0,c
  1387  003B8A  EC0F  F019         	call	_WS_Word	;wreg free
  1388  003B8E                     
  1389                           ;WS2812b/BitBangWS2812b.c: 157:     _delay((unsigned long)((60.000)*(32000000/4000.0)));
  1390  003B8E  0E03               	movlw	3
  1391  003B90  6E17               	movwf	(??_WSLoop+1)^0,c
  1392  003B92  0E70               	movlw	112
  1393  003B94  6E16               	movwf	??_WSLoop^0,c
  1394  003B96  0E5C               	movlw	92
  1395  003B98                     u237:
  1396  003B98  2EE8               	decfsz	wreg,f,c
  1397  003B9A  D7FE               	bra	u237
  1398  003B9C  2E16               	decfsz	??_WSLoop^0,f,c
  1399  003B9E  D7FC               	bra	u237
  1400  003BA0  2E17               	decfsz	(??_WSLoop+1)^0,f,c
  1401  003BA2  D7FA               	bra	u237
  1402  003BA4  D000               	nop2	
  1403  003BA6                     
  1404                           ;WS2812b/BitBangWS2812b.c: 158:     _delay((unsigned long)((250)*(32000000/4000.0)));
  1405  003BA6  0E0B               	movlw	11
  1406  003BA8  6E17               	movwf	(??_WSLoop+1)^0,c
  1407  003BAA  0E26               	movlw	38
  1408  003BAC  6E16               	movwf	??_WSLoop^0,c
  1409  003BAE  0E5E               	movlw	94
  1410  003BB0                     u247:
  1411  003BB0  2EE8               	decfsz	wreg,f,c
  1412  003BB2  D7FE               	bra	u247
  1413  003BB4  2E16               	decfsz	??_WSLoop^0,f,c
  1414  003BB6  D7FC               	bra	u247
  1415  003BB8  2E17               	decfsz	(??_WSLoop+1)^0,f,c
  1416  003BBA  D7FA               	bra	u247
  1417                           
  1418                           ;WS2812b/BitBangWS2812b.c: 160:     WS_Word(0x00, 0x00, 0x09);
  1419  003BBC  0E00               	movlw	0
  1420  003BBE  6E04               	movwf	(WS_Word@A+1)^0,c
  1421  003BC0  0E00               	movlw	0
  1422  003BC2  6E03               	movwf	WS_Word@A^0,c
  1423  003BC4  0E00               	movlw	0
  1424  003BC6  6E06               	movwf	(WS_Word@B+1)^0,c
  1425  003BC8  0E00               	movlw	0
  1426  003BCA  6E05               	movwf	WS_Word@B^0,c
  1427  003BCC  0E00               	movlw	0
  1428  003BCE  6E08               	movwf	(WS_Word@C+1)^0,c
  1429  003BD0  0E09               	movlw	9
  1430  003BD2  6E07               	movwf	WS_Word@C^0,c
  1431  003BD4  EC0F  F019         	call	_WS_Word	;wreg free
  1432                           
  1433                           ;WS2812b/BitBangWS2812b.c: 161:     WS_Word(0x09, 0x09, 0x00);
  1434  003BD8  0E00               	movlw	0
  1435  003BDA  6E04               	movwf	(WS_Word@A+1)^0,c
  1436  003BDC  0E09               	movlw	9
  1437  003BDE  6E03               	movwf	WS_Word@A^0,c
  1438  003BE0  0E00               	movlw	0
  1439  003BE2  6E06               	movwf	(WS_Word@B+1)^0,c
  1440  003BE4  0E09               	movlw	9
  1441  003BE6  6E05               	movwf	WS_Word@B^0,c
  1442  003BE8  0E00               	movlw	0
  1443  003BEA  6E08               	movwf	(WS_Word@C+1)^0,c
  1444  003BEC  0E00               	movlw	0
  1445  003BEE  6E07               	movwf	WS_Word@C^0,c
  1446  003BF0  EC0F  F019         	call	_WS_Word	;wreg free
  1447                           
  1448                           ;WS2812b/BitBangWS2812b.c: 162:     WS_Word(0x09, 0x00, 0x09);
  1449  003BF4  0E00               	movlw	0
  1450  003BF6  6E04               	movwf	(WS_Word@A+1)^0,c
  1451  003BF8  0E09               	movlw	9
  1452  003BFA  6E03               	movwf	WS_Word@A^0,c
  1453  003BFC  0E00               	movlw	0
  1454  003BFE  6E06               	movwf	(WS_Word@B+1)^0,c
  1455  003C00  0E00               	movlw	0
  1456  003C02  6E05               	movwf	WS_Word@B^0,c
  1457  003C04  0E00               	movlw	0
  1458  003C06  6E08               	movwf	(WS_Word@C+1)^0,c
  1459  003C08  0E09               	movlw	9
  1460  003C0A  6E07               	movwf	WS_Word@C^0,c
  1461  003C0C  EC0F  F019         	call	_WS_Word	;wreg free
  1462                           
  1463                           ;WS2812b/BitBangWS2812b.c: 163:     WS_Word(0x00, 0x09, 0x09);
  1464  003C10  0E00               	movlw	0
  1465  003C12  6E04               	movwf	(WS_Word@A+1)^0,c
  1466  003C14  0E00               	movlw	0
  1467  003C16  6E03               	movwf	WS_Word@A^0,c
  1468  003C18  0E00               	movlw	0
  1469  003C1A  6E06               	movwf	(WS_Word@B+1)^0,c
  1470  003C1C  0E09               	movlw	9
  1471  003C1E  6E05               	movwf	WS_Word@B^0,c
  1472  003C20  0E00               	movlw	0
  1473  003C22  6E08               	movwf	(WS_Word@C+1)^0,c
  1474  003C24  0E09               	movlw	9
  1475  003C26  6E07               	movwf	WS_Word@C^0,c
  1476  003C28  EC0F  F019         	call	_WS_Word	;wreg free
  1477                           
  1478                           ;WS2812b/BitBangWS2812b.c: 164:     WS_Word(0xFF, 0x00, 0x00);
  1479  003C2C  0E00               	movlw	0
  1480  003C2E  6E04               	movwf	(WS_Word@A+1)^0,c
  1481  003C30  6803               	setf	WS_Word@A^0,c
  1482  003C32  0E00               	movlw	0
  1483  003C34  6E06               	movwf	(WS_Word@B+1)^0,c
  1484  003C36  0E00               	movlw	0
  1485  003C38  6E05               	movwf	WS_Word@B^0,c
  1486  003C3A  0E00               	movlw	0
  1487  003C3C  6E08               	movwf	(WS_Word@C+1)^0,c
  1488  003C3E  0E00               	movlw	0
  1489  003C40  6E07               	movwf	WS_Word@C^0,c
  1490  003C42  EC0F  F019         	call	_WS_Word	;wreg free
  1491                           
  1492                           ;WS2812b/BitBangWS2812b.c: 165:     WS_Word(0x00, 0x09, 0x00);
  1493  003C46  0E00               	movlw	0
  1494  003C48  6E04               	movwf	(WS_Word@A+1)^0,c
  1495  003C4A  0E00               	movlw	0
  1496  003C4C  6E03               	movwf	WS_Word@A^0,c
  1497  003C4E  0E00               	movlw	0
  1498  003C50  6E06               	movwf	(WS_Word@B+1)^0,c
  1499  003C52  0E09               	movlw	9
  1500  003C54  6E05               	movwf	WS_Word@B^0,c
  1501  003C56  0E00               	movlw	0
  1502  003C58  6E08               	movwf	(WS_Word@C+1)^0,c
  1503  003C5A  0E00               	movlw	0
  1504  003C5C  6E07               	movwf	WS_Word@C^0,c
  1505  003C5E  EC0F  F019         	call	_WS_Word	;wreg free
  1506                           
  1507                           ;WS2812b/BitBangWS2812b.c: 166:     WS_Word(0x00, 0x00, 0x09);
  1508  003C62  0E00               	movlw	0
  1509  003C64  6E04               	movwf	(WS_Word@A+1)^0,c
  1510  003C66  0E00               	movlw	0
  1511  003C68  6E03               	movwf	WS_Word@A^0,c
  1512  003C6A  0E00               	movlw	0
  1513  003C6C  6E06               	movwf	(WS_Word@B+1)^0,c
  1514  003C6E  0E00               	movlw	0
  1515  003C70  6E05               	movwf	WS_Word@B^0,c
  1516  003C72  0E00               	movlw	0
  1517  003C74  6E08               	movwf	(WS_Word@C+1)^0,c
  1518  003C76  0E09               	movlw	9
  1519  003C78  6E07               	movwf	WS_Word@C^0,c
  1520  003C7A  EC0F  F019         	call	_WS_Word	;wreg free
  1521                           
  1522                           ;WS2812b/BitBangWS2812b.c: 167:     WS_Word(0x09, 0x09, 0x00);
  1523  003C7E  0E00               	movlw	0
  1524  003C80  6E04               	movwf	(WS_Word@A+1)^0,c
  1525  003C82  0E09               	movlw	9
  1526  003C84  6E03               	movwf	WS_Word@A^0,c
  1527  003C86  0E00               	movlw	0
  1528  003C88  6E06               	movwf	(WS_Word@B+1)^0,c
  1529  003C8A  0E09               	movlw	9
  1530  003C8C  6E05               	movwf	WS_Word@B^0,c
  1531  003C8E  0E00               	movlw	0
  1532  003C90  6E08               	movwf	(WS_Word@C+1)^0,c
  1533  003C92  0E00               	movlw	0
  1534  003C94  6E07               	movwf	WS_Word@C^0,c
  1535  003C96  EC0F  F019         	call	_WS_Word	;wreg free
  1536                           
  1537                           ;WS2812b/BitBangWS2812b.c: 168:     WS_Word(0x09, 0x00, 0x09);
  1538  003C9A  0E00               	movlw	0
  1539  003C9C  6E04               	movwf	(WS_Word@A+1)^0,c
  1540  003C9E  0E09               	movlw	9
  1541  003CA0  6E03               	movwf	WS_Word@A^0,c
  1542  003CA2  0E00               	movlw	0
  1543  003CA4  6E06               	movwf	(WS_Word@B+1)^0,c
  1544  003CA6  0E00               	movlw	0
  1545  003CA8  6E05               	movwf	WS_Word@B^0,c
  1546  003CAA  0E00               	movlw	0
  1547  003CAC  6E08               	movwf	(WS_Word@C+1)^0,c
  1548  003CAE  0E09               	movlw	9
  1549  003CB0  6E07               	movwf	WS_Word@C^0,c
  1550  003CB2  EC0F  F019         	call	_WS_Word	;wreg free
  1551                           
  1552                           ;WS2812b/BitBangWS2812b.c: 169:     WS_Word(0x00, 0x09, 0x09);
  1553  003CB6  0E00               	movlw	0
  1554  003CB8  6E04               	movwf	(WS_Word@A+1)^0,c
  1555  003CBA  0E00               	movlw	0
  1556  003CBC  6E03               	movwf	WS_Word@A^0,c
  1557  003CBE  0E00               	movlw	0
  1558  003CC0  6E06               	movwf	(WS_Word@B+1)^0,c
  1559  003CC2  0E09               	movlw	9
  1560  003CC4  6E05               	movwf	WS_Word@B^0,c
  1561  003CC6  0E00               	movlw	0
  1562  003CC8  6E08               	movwf	(WS_Word@C+1)^0,c
  1563  003CCA  0E09               	movlw	9
  1564  003CCC  6E07               	movwf	WS_Word@C^0,c
  1565  003CCE  EC0F  F019         	call	_WS_Word	;wreg free
  1566                           
  1567                           ;WS2812b/BitBangWS2812b.c: 170:     WS_Word(0xFF, 0x00, 0x00);
  1568  003CD2  0E00               	movlw	0
  1569  003CD4  6E04               	movwf	(WS_Word@A+1)^0,c
  1570  003CD6  6803               	setf	WS_Word@A^0,c
  1571  003CD8  0E00               	movlw	0
  1572  003CDA  6E06               	movwf	(WS_Word@B+1)^0,c
  1573  003CDC  0E00               	movlw	0
  1574  003CDE  6E05               	movwf	WS_Word@B^0,c
  1575  003CE0  0E00               	movlw	0
  1576  003CE2  6E08               	movwf	(WS_Word@C+1)^0,c
  1577  003CE4  0E00               	movlw	0
  1578  003CE6  6E07               	movwf	WS_Word@C^0,c
  1579  003CE8  EC0F  F019         	call	_WS_Word	;wreg free
  1580                           
  1581                           ;WS2812b/BitBangWS2812b.c: 171:     WS_Word(0x00, 0x09, 0x00);
  1582  003CEC  0E00               	movlw	0
  1583  003CEE  6E04               	movwf	(WS_Word@A+1)^0,c
  1584  003CF0  0E00               	movlw	0
  1585  003CF2  6E03               	movwf	WS_Word@A^0,c
  1586  003CF4  0E00               	movlw	0
  1587  003CF6  6E06               	movwf	(WS_Word@B+1)^0,c
  1588  003CF8  0E09               	movlw	9
  1589  003CFA  6E05               	movwf	WS_Word@B^0,c
  1590  003CFC  0E00               	movlw	0
  1591  003CFE  6E08               	movwf	(WS_Word@C+1)^0,c
  1592  003D00  0E00               	movlw	0
  1593  003D02  6E07               	movwf	WS_Word@C^0,c
  1594  003D04  EC0F  F019         	call	_WS_Word	;wreg free
  1595                           
  1596                           ;WS2812b/BitBangWS2812b.c: 172:     WS_Word(0x00, 0x00, 0x09);
  1597  003D08  0E00               	movlw	0
  1598  003D0A  6E04               	movwf	(WS_Word@A+1)^0,c
  1599  003D0C  0E00               	movlw	0
  1600  003D0E  6E03               	movwf	WS_Word@A^0,c
  1601  003D10  0E00               	movlw	0
  1602  003D12  6E06               	movwf	(WS_Word@B+1)^0,c
  1603  003D14  0E00               	movlw	0
  1604  003D16  6E05               	movwf	WS_Word@B^0,c
  1605  003D18  0E00               	movlw	0
  1606  003D1A  6E08               	movwf	(WS_Word@C+1)^0,c
  1607  003D1C  0E09               	movlw	9
  1608  003D1E  6E07               	movwf	WS_Word@C^0,c
  1609  003D20  EC0F  F019         	call	_WS_Word	;wreg free
  1610                           
  1611                           ;WS2812b/BitBangWS2812b.c: 173:     WS_Word(0x09, 0x09, 0x00);
  1612  003D24  0E00               	movlw	0
  1613  003D26  6E04               	movwf	(WS_Word@A+1)^0,c
  1614  003D28  0E09               	movlw	9
  1615  003D2A  6E03               	movwf	WS_Word@A^0,c
  1616  003D2C  0E00               	movlw	0
  1617  003D2E  6E06               	movwf	(WS_Word@B+1)^0,c
  1618  003D30  0E09               	movlw	9
  1619  003D32  6E05               	movwf	WS_Word@B^0,c
  1620  003D34  0E00               	movlw	0
  1621  003D36  6E08               	movwf	(WS_Word@C+1)^0,c
  1622  003D38  0E00               	movlw	0
  1623  003D3A  6E07               	movwf	WS_Word@C^0,c
  1624  003D3C  EC0F  F019         	call	_WS_Word	;wreg free
  1625                           
  1626                           ;WS2812b/BitBangWS2812b.c: 174:     WS_Word(0x09, 0x00, 0x09);
  1627  003D40  0E00               	movlw	0
  1628  003D42  6E04               	movwf	(WS_Word@A+1)^0,c
  1629  003D44  0E09               	movlw	9
  1630  003D46  6E03               	movwf	WS_Word@A^0,c
  1631  003D48  0E00               	movlw	0
  1632  003D4A  6E06               	movwf	(WS_Word@B+1)^0,c
  1633  003D4C  0E00               	movlw	0
  1634  003D4E  6E05               	movwf	WS_Word@B^0,c
  1635  003D50  0E00               	movlw	0
  1636  003D52  6E08               	movwf	(WS_Word@C+1)^0,c
  1637  003D54  0E09               	movlw	9
  1638  003D56  6E07               	movwf	WS_Word@C^0,c
  1639  003D58  EC0F  F019         	call	_WS_Word	;wreg free
  1640                           
  1641                           ;WS2812b/BitBangWS2812b.c: 175:     WS_Word(0x00, 0x09, 0x09);
  1642  003D5C  0E00               	movlw	0
  1643  003D5E  6E04               	movwf	(WS_Word@A+1)^0,c
  1644  003D60  0E00               	movlw	0
  1645  003D62  6E03               	movwf	WS_Word@A^0,c
  1646  003D64  0E00               	movlw	0
  1647  003D66  6E06               	movwf	(WS_Word@B+1)^0,c
  1648  003D68  0E09               	movlw	9
  1649  003D6A  6E05               	movwf	WS_Word@B^0,c
  1650  003D6C  0E00               	movlw	0
  1651  003D6E  6E08               	movwf	(WS_Word@C+1)^0,c
  1652  003D70  0E09               	movlw	9
  1653  003D72  6E07               	movwf	WS_Word@C^0,c
  1654  003D74  EC0F  F019         	call	_WS_Word	;wreg free
  1655                           
  1656                           ;WS2812b/BitBangWS2812b.c: 176:     WS_Word(0xFF, 0x00, 0x00);
  1657  003D78  0E00               	movlw	0
  1658  003D7A  6E04               	movwf	(WS_Word@A+1)^0,c
  1659  003D7C  6803               	setf	WS_Word@A^0,c
  1660  003D7E  0E00               	movlw	0
  1661  003D80  6E06               	movwf	(WS_Word@B+1)^0,c
  1662  003D82  0E00               	movlw	0
  1663  003D84  6E05               	movwf	WS_Word@B^0,c
  1664  003D86  0E00               	movlw	0
  1665  003D88  6E08               	movwf	(WS_Word@C+1)^0,c
  1666  003D8A  0E00               	movlw	0
  1667  003D8C  6E07               	movwf	WS_Word@C^0,c
  1668  003D8E  EC0F  F019         	call	_WS_Word	;wreg free
  1669                           
  1670                           ;WS2812b/BitBangWS2812b.c: 177:     WS_Word(0x00, 0x09, 0x00);
  1671  003D92  0E00               	movlw	0
  1672  003D94  6E04               	movwf	(WS_Word@A+1)^0,c
  1673  003D96  0E00               	movlw	0
  1674  003D98  6E03               	movwf	WS_Word@A^0,c
  1675  003D9A  0E00               	movlw	0
  1676  003D9C  6E06               	movwf	(WS_Word@B+1)^0,c
  1677  003D9E  0E09               	movlw	9
  1678  003DA0  6E05               	movwf	WS_Word@B^0,c
  1679  003DA2  0E00               	movlw	0
  1680  003DA4  6E08               	movwf	(WS_Word@C+1)^0,c
  1681  003DA6  0E00               	movlw	0
  1682  003DA8  6E07               	movwf	WS_Word@C^0,c
  1683  003DAA  EC0F  F019         	call	_WS_Word	;wreg free
  1684  003DAE                     
  1685                           ;WS2812b/BitBangWS2812b.c: 179:     _delay((unsigned long)((60.000)*(32000000/4000.0)));
  1686  003DAE  0E03               	movlw	3
  1687  003DB0  6E17               	movwf	(??_WSLoop+1)^0,c
  1688  003DB2  0E70               	movlw	112
  1689  003DB4  6E16               	movwf	??_WSLoop^0,c
  1690  003DB6  0E5C               	movlw	92
  1691  003DB8                     u257:
  1692  003DB8  2EE8               	decfsz	wreg,f,c
  1693  003DBA  D7FE               	bra	u257
  1694  003DBC  2E16               	decfsz	??_WSLoop^0,f,c
  1695  003DBE  D7FC               	bra	u257
  1696  003DC0  2E17               	decfsz	(??_WSLoop+1)^0,f,c
  1697  003DC2  D7FA               	bra	u257
  1698  003DC4  D000               	nop2	
  1699  003DC6                     
  1700                           ;WS2812b/BitBangWS2812b.c: 180:     _delay((unsigned long)((250)*(32000000/4000.0)));
  1701  003DC6  0E0B               	movlw	11
  1702  003DC8  6E17               	movwf	(??_WSLoop+1)^0,c
  1703  003DCA  0E26               	movlw	38
  1704  003DCC  6E16               	movwf	??_WSLoop^0,c
  1705  003DCE  0E5E               	movlw	94
  1706  003DD0                     u267:
  1707  003DD0  2EE8               	decfsz	wreg,f,c
  1708  003DD2  D7FE               	bra	u267
  1709  003DD4  2E16               	decfsz	??_WSLoop^0,f,c
  1710  003DD6  D7FC               	bra	u267
  1711  003DD8  2E17               	decfsz	(??_WSLoop+1)^0,f,c
  1712  003DDA  D7FA               	bra	u267
  1713                           
  1714                           ;WS2812b/BitBangWS2812b.c: 182:     WS_Word(0x00, 0x09, 0x00);
  1715  003DDC  0E00               	movlw	0
  1716  003DDE  6E04               	movwf	(WS_Word@A+1)^0,c
  1717  003DE0  0E00               	movlw	0
  1718  003DE2  6E03               	movwf	WS_Word@A^0,c
  1719  003DE4  0E00               	movlw	0
  1720  003DE6  6E06               	movwf	(WS_Word@B+1)^0,c
  1721  003DE8  0E09               	movlw	9
  1722  003DEA  6E05               	movwf	WS_Word@B^0,c
  1723  003DEC  0E00               	movlw	0
  1724  003DEE  6E08               	movwf	(WS_Word@C+1)^0,c
  1725  003DF0  0E00               	movlw	0
  1726  003DF2  6E07               	movwf	WS_Word@C^0,c
  1727  003DF4  EC0F  F019         	call	_WS_Word	;wreg free
  1728                           
  1729                           ;WS2812b/BitBangWS2812b.c: 183:     WS_Word(0x00, 0x00, 0x09);
  1730  003DF8  0E00               	movlw	0
  1731  003DFA  6E04               	movwf	(WS_Word@A+1)^0,c
  1732  003DFC  0E00               	movlw	0
  1733  003DFE  6E03               	movwf	WS_Word@A^0,c
  1734  003E00  0E00               	movlw	0
  1735  003E02  6E06               	movwf	(WS_Word@B+1)^0,c
  1736  003E04  0E00               	movlw	0
  1737  003E06  6E05               	movwf	WS_Word@B^0,c
  1738  003E08  0E00               	movlw	0
  1739  003E0A  6E08               	movwf	(WS_Word@C+1)^0,c
  1740  003E0C  0E09               	movlw	9
  1741  003E0E  6E07               	movwf	WS_Word@C^0,c
  1742  003E10  EC0F  F019         	call	_WS_Word	;wreg free
  1743                           
  1744                           ;WS2812b/BitBangWS2812b.c: 184:     WS_Word(0x09, 0x09, 0x00);
  1745  003E14  0E00               	movlw	0
  1746  003E16  6E04               	movwf	(WS_Word@A+1)^0,c
  1747  003E18  0E09               	movlw	9
  1748  003E1A  6E03               	movwf	WS_Word@A^0,c
  1749  003E1C  0E00               	movlw	0
  1750  003E1E  6E06               	movwf	(WS_Word@B+1)^0,c
  1751  003E20  0E09               	movlw	9
  1752  003E22  6E05               	movwf	WS_Word@B^0,c
  1753  003E24  0E00               	movlw	0
  1754  003E26  6E08               	movwf	(WS_Word@C+1)^0,c
  1755  003E28  0E00               	movlw	0
  1756  003E2A  6E07               	movwf	WS_Word@C^0,c
  1757  003E2C  EC0F  F019         	call	_WS_Word	;wreg free
  1758                           
  1759                           ;WS2812b/BitBangWS2812b.c: 185:     WS_Word(0x09, 0x00, 0x09);
  1760  003E30  0E00               	movlw	0
  1761  003E32  6E04               	movwf	(WS_Word@A+1)^0,c
  1762  003E34  0E09               	movlw	9
  1763  003E36  6E03               	movwf	WS_Word@A^0,c
  1764  003E38  0E00               	movlw	0
  1765  003E3A  6E06               	movwf	(WS_Word@B+1)^0,c
  1766  003E3C  0E00               	movlw	0
  1767  003E3E  6E05               	movwf	WS_Word@B^0,c
  1768  003E40  0E00               	movlw	0
  1769  003E42  6E08               	movwf	(WS_Word@C+1)^0,c
  1770  003E44  0E09               	movlw	9
  1771  003E46  6E07               	movwf	WS_Word@C^0,c
  1772  003E48  EC0F  F019         	call	_WS_Word	;wreg free
  1773                           
  1774                           ;WS2812b/BitBangWS2812b.c: 186:     WS_Word(0x00, 0x09, 0x09);
  1775  003E4C  0E00               	movlw	0
  1776  003E4E  6E04               	movwf	(WS_Word@A+1)^0,c
  1777  003E50  0E00               	movlw	0
  1778  003E52  6E03               	movwf	WS_Word@A^0,c
  1779  003E54  0E00               	movlw	0
  1780  003E56  6E06               	movwf	(WS_Word@B+1)^0,c
  1781  003E58  0E09               	movlw	9
  1782  003E5A  6E05               	movwf	WS_Word@B^0,c
  1783  003E5C  0E00               	movlw	0
  1784  003E5E  6E08               	movwf	(WS_Word@C+1)^0,c
  1785  003E60  0E09               	movlw	9
  1786  003E62  6E07               	movwf	WS_Word@C^0,c
  1787  003E64  EC0F  F019         	call	_WS_Word	;wreg free
  1788                           
  1789                           ;WS2812b/BitBangWS2812b.c: 187:     WS_Word(0xFF, 0x00, 0x00);
  1790  003E68  0E00               	movlw	0
  1791  003E6A  6E04               	movwf	(WS_Word@A+1)^0,c
  1792  003E6C  6803               	setf	WS_Word@A^0,c
  1793  003E6E  0E00               	movlw	0
  1794  003E70  6E06               	movwf	(WS_Word@B+1)^0,c
  1795  003E72  0E00               	movlw	0
  1796  003E74  6E05               	movwf	WS_Word@B^0,c
  1797  003E76  0E00               	movlw	0
  1798  003E78  6E08               	movwf	(WS_Word@C+1)^0,c
  1799  003E7A  0E00               	movlw	0
  1800  003E7C  6E07               	movwf	WS_Word@C^0,c
  1801  003E7E  EC0F  F019         	call	_WS_Word	;wreg free
  1802                           
  1803                           ;WS2812b/BitBangWS2812b.c: 188:     WS_Word(0x00, 0x09, 0x00);
  1804  003E82  0E00               	movlw	0
  1805  003E84  6E04               	movwf	(WS_Word@A+1)^0,c
  1806  003E86  0E00               	movlw	0
  1807  003E88  6E03               	movwf	WS_Word@A^0,c
  1808  003E8A  0E00               	movlw	0
  1809  003E8C  6E06               	movwf	(WS_Word@B+1)^0,c
  1810  003E8E  0E09               	movlw	9
  1811  003E90  6E05               	movwf	WS_Word@B^0,c
  1812  003E92  0E00               	movlw	0
  1813  003E94  6E08               	movwf	(WS_Word@C+1)^0,c
  1814  003E96  0E00               	movlw	0
  1815  003E98  6E07               	movwf	WS_Word@C^0,c
  1816  003E9A  EC0F  F019         	call	_WS_Word	;wreg free
  1817                           
  1818                           ;WS2812b/BitBangWS2812b.c: 189:     WS_Word(0x00, 0x00, 0x09);
  1819  003E9E  0E00               	movlw	0
  1820  003EA0  6E04               	movwf	(WS_Word@A+1)^0,c
  1821  003EA2  0E00               	movlw	0
  1822  003EA4  6E03               	movwf	WS_Word@A^0,c
  1823  003EA6  0E00               	movlw	0
  1824  003EA8  6E06               	movwf	(WS_Word@B+1)^0,c
  1825  003EAA  0E00               	movlw	0
  1826  003EAC  6E05               	movwf	WS_Word@B^0,c
  1827  003EAE  0E00               	movlw	0
  1828  003EB0  6E08               	movwf	(WS_Word@C+1)^0,c
  1829  003EB2  0E09               	movlw	9
  1830  003EB4  6E07               	movwf	WS_Word@C^0,c
  1831  003EB6  EC0F  F019         	call	_WS_Word	;wreg free
  1832                           
  1833                           ;WS2812b/BitBangWS2812b.c: 190:     WS_Word(0x09, 0x09, 0x00);
  1834  003EBA  0E00               	movlw	0
  1835  003EBC  6E04               	movwf	(WS_Word@A+1)^0,c
  1836  003EBE  0E09               	movlw	9
  1837  003EC0  6E03               	movwf	WS_Word@A^0,c
  1838  003EC2  0E00               	movlw	0
  1839  003EC4  6E06               	movwf	(WS_Word@B+1)^0,c
  1840  003EC6  0E09               	movlw	9
  1841  003EC8  6E05               	movwf	WS_Word@B^0,c
  1842  003ECA  0E00               	movlw	0
  1843  003ECC  6E08               	movwf	(WS_Word@C+1)^0,c
  1844  003ECE  0E00               	movlw	0
  1845  003ED0  6E07               	movwf	WS_Word@C^0,c
  1846  003ED2  EC0F  F019         	call	_WS_Word	;wreg free
  1847                           
  1848                           ;WS2812b/BitBangWS2812b.c: 191:     WS_Word(0x09, 0x00, 0x09);
  1849  003ED6  0E00               	movlw	0
  1850  003ED8  6E04               	movwf	(WS_Word@A+1)^0,c
  1851  003EDA  0E09               	movlw	9
  1852  003EDC  6E03               	movwf	WS_Word@A^0,c
  1853  003EDE  0E00               	movlw	0
  1854  003EE0  6E06               	movwf	(WS_Word@B+1)^0,c
  1855  003EE2  0E00               	movlw	0
  1856  003EE4  6E05               	movwf	WS_Word@B^0,c
  1857  003EE6  0E00               	movlw	0
  1858  003EE8  6E08               	movwf	(WS_Word@C+1)^0,c
  1859  003EEA  0E09               	movlw	9
  1860  003EEC  6E07               	movwf	WS_Word@C^0,c
  1861  003EEE  EC0F  F019         	call	_WS_Word	;wreg free
  1862                           
  1863                           ;WS2812b/BitBangWS2812b.c: 192:     WS_Word(0x00, 0x09, 0x09);
  1864  003EF2  0E00               	movlw	0
  1865  003EF4  6E04               	movwf	(WS_Word@A+1)^0,c
  1866  003EF6  0E00               	movlw	0
  1867  003EF8  6E03               	movwf	WS_Word@A^0,c
  1868  003EFA  0E00               	movlw	0
  1869  003EFC  6E06               	movwf	(WS_Word@B+1)^0,c
  1870  003EFE  0E09               	movlw	9
  1871  003F00  6E05               	movwf	WS_Word@B^0,c
  1872  003F02  0E00               	movlw	0
  1873  003F04  6E08               	movwf	(WS_Word@C+1)^0,c
  1874  003F06  0E09               	movlw	9
  1875  003F08  6E07               	movwf	WS_Word@C^0,c
  1876  003F0A  EC0F  F019         	call	_WS_Word	;wreg free
  1877                           
  1878                           ;WS2812b/BitBangWS2812b.c: 193:     WS_Word(0xFF, 0x00, 0x00);
  1879  003F0E  0E00               	movlw	0
  1880  003F10  6E04               	movwf	(WS_Word@A+1)^0,c
  1881  003F12  6803               	setf	WS_Word@A^0,c
  1882  003F14  0E00               	movlw	0
  1883  003F16  6E06               	movwf	(WS_Word@B+1)^0,c
  1884  003F18  0E00               	movlw	0
  1885  003F1A  6E05               	movwf	WS_Word@B^0,c
  1886  003F1C  0E00               	movlw	0
  1887  003F1E  6E08               	movwf	(WS_Word@C+1)^0,c
  1888  003F20  0E00               	movlw	0
  1889  003F22  6E07               	movwf	WS_Word@C^0,c
  1890  003F24  EC0F  F019         	call	_WS_Word	;wreg free
  1891                           
  1892                           ;WS2812b/BitBangWS2812b.c: 194:     WS_Word(0x00, 0x09, 0x00);
  1893  003F28  0E00               	movlw	0
  1894  003F2A  6E04               	movwf	(WS_Word@A+1)^0,c
  1895  003F2C  0E00               	movlw	0
  1896  003F2E  6E03               	movwf	WS_Word@A^0,c
  1897  003F30  0E00               	movlw	0
  1898  003F32  6E06               	movwf	(WS_Word@B+1)^0,c
  1899  003F34  0E09               	movlw	9
  1900  003F36  6E05               	movwf	WS_Word@B^0,c
  1901  003F38  0E00               	movlw	0
  1902  003F3A  6E08               	movwf	(WS_Word@C+1)^0,c
  1903  003F3C  0E00               	movlw	0
  1904  003F3E  6E07               	movwf	WS_Word@C^0,c
  1905  003F40  EC0F  F019         	call	_WS_Word	;wreg free
  1906                           
  1907                           ;WS2812b/BitBangWS2812b.c: 195:     WS_Word(0x00, 0x00, 0x09);
  1908  003F44  0E00               	movlw	0
  1909  003F46  6E04               	movwf	(WS_Word@A+1)^0,c
  1910  003F48  0E00               	movlw	0
  1911  003F4A  6E03               	movwf	WS_Word@A^0,c
  1912  003F4C  0E00               	movlw	0
  1913  003F4E  6E06               	movwf	(WS_Word@B+1)^0,c
  1914  003F50  0E00               	movlw	0
  1915  003F52  6E05               	movwf	WS_Word@B^0,c
  1916  003F54  0E00               	movlw	0
  1917  003F56  6E08               	movwf	(WS_Word@C+1)^0,c
  1918  003F58  0E09               	movlw	9
  1919  003F5A  6E07               	movwf	WS_Word@C^0,c
  1920  003F5C  EC0F  F019         	call	_WS_Word	;wreg free
  1921                           
  1922                           ;WS2812b/BitBangWS2812b.c: 196:     WS_Word(0x09, 0x09, 0x00);
  1923  003F60  0E00               	movlw	0
  1924  003F62  6E04               	movwf	(WS_Word@A+1)^0,c
  1925  003F64  0E09               	movlw	9
  1926  003F66  6E03               	movwf	WS_Word@A^0,c
  1927  003F68  0E00               	movlw	0
  1928  003F6A  6E06               	movwf	(WS_Word@B+1)^0,c
  1929  003F6C  0E09               	movlw	9
  1930  003F6E  6E05               	movwf	WS_Word@B^0,c
  1931  003F70  0E00               	movlw	0
  1932  003F72  6E08               	movwf	(WS_Word@C+1)^0,c
  1933  003F74  0E00               	movlw	0
  1934  003F76  6E07               	movwf	WS_Word@C^0,c
  1935  003F78  EC0F  F019         	call	_WS_Word	;wreg free
  1936                           
  1937                           ;WS2812b/BitBangWS2812b.c: 197:     WS_Word(0x09, 0x00, 0x09);
  1938  003F7C  0E00               	movlw	0
  1939  003F7E  6E04               	movwf	(WS_Word@A+1)^0,c
  1940  003F80  0E09               	movlw	9
  1941  003F82  6E03               	movwf	WS_Word@A^0,c
  1942  003F84  0E00               	movlw	0
  1943  003F86  6E06               	movwf	(WS_Word@B+1)^0,c
  1944  003F88  0E00               	movlw	0
  1945  003F8A  6E05               	movwf	WS_Word@B^0,c
  1946  003F8C  0E00               	movlw	0
  1947  003F8E  6E08               	movwf	(WS_Word@C+1)^0,c
  1948  003F90  0E09               	movlw	9
  1949  003F92  6E07               	movwf	WS_Word@C^0,c
  1950  003F94  EC0F  F019         	call	_WS_Word	;wreg free
  1951                           
  1952                           ;WS2812b/BitBangWS2812b.c: 198:     WS_Word(0x00, 0x09, 0x09);
  1953  003F98  0E00               	movlw	0
  1954  003F9A  6E04               	movwf	(WS_Word@A+1)^0,c
  1955  003F9C  0E00               	movlw	0
  1956  003F9E  6E03               	movwf	WS_Word@A^0,c
  1957  003FA0  0E00               	movlw	0
  1958  003FA2  6E06               	movwf	(WS_Word@B+1)^0,c
  1959  003FA4  0E09               	movlw	9
  1960  003FA6  6E05               	movwf	WS_Word@B^0,c
  1961  003FA8  0E00               	movlw	0
  1962  003FAA  6E08               	movwf	(WS_Word@C+1)^0,c
  1963  003FAC  0E09               	movlw	9
  1964  003FAE  6E07               	movwf	WS_Word@C^0,c
  1965  003FB0  EC0F  F019         	call	_WS_Word	;wreg free
  1966                           
  1967                           ;WS2812b/BitBangWS2812b.c: 199:     WS_Word(0xFF, 0x00, 0x00);
  1968  003FB4  0E00               	movlw	0
  1969  003FB6  6E04               	movwf	(WS_Word@A+1)^0,c
  1970  003FB8  6803               	setf	WS_Word@A^0,c
  1971  003FBA  0E00               	movlw	0
  1972  003FBC  6E06               	movwf	(WS_Word@B+1)^0,c
  1973  003FBE  0E00               	movlw	0
  1974  003FC0  6E05               	movwf	WS_Word@B^0,c
  1975  003FC2  0E00               	movlw	0
  1976  003FC4  6E08               	movwf	(WS_Word@C+1)^0,c
  1977  003FC6  0E00               	movlw	0
  1978  003FC8  6E07               	movwf	WS_Word@C^0,c
  1979  003FCA  EC0F  F019         	call	_WS_Word	;wreg free
  1980  003FCE                     
  1981                           ;WS2812b/BitBangWS2812b.c: 201:     _delay((unsigned long)((60.000)*(32000000/4000.0)));
  1982  003FCE  0E03               	movlw	3
  1983  003FD0  6E17               	movwf	(??_WSLoop+1)^0,c
  1984  003FD2  0E70               	movlw	112
  1985  003FD4  6E16               	movwf	??_WSLoop^0,c
  1986  003FD6  0E5C               	movlw	92
  1987  003FD8                     u277:
  1988  003FD8  2EE8               	decfsz	wreg,f,c
  1989  003FDA  D7FE               	bra	u277
  1990  003FDC  2E16               	decfsz	??_WSLoop^0,f,c
  1991  003FDE  D7FC               	bra	u277
  1992  003FE0  2E17               	decfsz	(??_WSLoop+1)^0,f,c
  1993  003FE2  D7FA               	bra	u277
  1994  003FE4  D000               	nop2	
  1995  003FE6                     
  1996                           ;WS2812b/BitBangWS2812b.c: 202:     _delay((unsigned long)((250)*(32000000/4000.0)));
  1997  003FE6  0E0B               	movlw	11
  1998  003FE8  6E17               	movwf	(??_WSLoop+1)^0,c
  1999  003FEA  0E26               	movlw	38
  2000  003FEC  6E16               	movwf	??_WSLoop^0,c
  2001  003FEE  0E5E               	movlw	94
  2002  003FF0                     u287:
  2003  003FF0  2EE8               	decfsz	wreg,f,c
  2004  003FF2  D7FE               	bra	u287
  2005  003FF4  2E16               	decfsz	??_WSLoop^0,f,c
  2006  003FF6  D7FC               	bra	u287
  2007  003FF8  2E17               	decfsz	(??_WSLoop+1)^0,f,c
  2008  003FFA  D7FA               	bra	u287
  2009  003FFC                     
  2010                           ;WS2812b/BitBangWS2812b.c: 205:     GIE =1;
  2011  003FFC  8EF2               	bsf	4082,7,c	;volatile
  2012  003FFE  0012               	return		;funcret
  2013  004000                     __end_of_WSLoop:
  2014                           	callstack 0
  2015                           
  2016 ;; *************** function _WS_Word *****************
  2017 ;; Defined at:
  2018 ;;		line 10 in file "WS2812b/BitBangWS2812b.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  A               2    2[COMRAM] int 
  2021 ;;  B               2    4[COMRAM] int 
  2022 ;;  C               2    6[COMRAM] int 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  x               2   15[COMRAM] int 
  2025 ;;  x               2   13[COMRAM] int 
  2026 ;;  x               2   11[COMRAM] int 
  2027 ;;  i               2   19[COMRAM] int 
  2028 ;;  Bx              2   17[COMRAM] int 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0, cstack
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1
  2038 ;;      Params:         6       0       0
  2039 ;;      Locals:        10       0       0
  2040 ;;      Temps:          3       0       0
  2041 ;;      Totals:        19       0       0
  2042 ;;Total ram usage:       19 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    1
  2045 ;; This function calls:
  2046 ;;		_WS_Write
  2047 ;; This function is called by:
  2048 ;;		_WSLoop
  2049 ;;		_WS_White
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text2
  2054  00321E                     __ptext2:
  2055                           	callstack 0
  2056  00321E                     _WS_Word:
  2057                           	callstack 28
  2058  00321E                     
  2059                           ;WS2812b/BitBangWS2812b.c: 19:     for(int i=23; i!=-1; i--)
  2060  00321E  0E00               	movlw	0
  2061  003220  6E15               	movwf	(WS_Word@i+1)^0,c
  2062  003222  0E17               	movlw	23
  2063  003224  6E14               	movwf	WS_Word@i^0,c
  2064  003226                     l862:
  2065                           
  2066                           ;WS2812b/BitBangWS2812b.c: 20:     {;WS2812b/BitBangWS2812b.c: 21:         if(i>15)
  2067  003226  BE15               	btfsc	(WS_Word@i+1)^0,7,c
  2068  003228  EF1F  F019         	goto	u101
  2069  00322C  5015               	movf	(WS_Word@i+1)^0,w,c
  2070  00322E  E109               	bnz	u100
  2071  003230  0E10               	movlw	16
  2072  003232  5C14               	subwf	WS_Word@i^0,w,c
  2073  003234  A0D8               	btfss	status,0,c
  2074  003236  EF1F  F019         	goto	u101
  2075  00323A  EF21  F019         	goto	u100
  2076  00323E                     u101:
  2077  00323E  EF3C  F019         	goto	l866
  2078  003242                     u100:
  2079  003242                     
  2080                           ;WS2812b/BitBangWS2812b.c: 22:         {;WS2812b/BitBangWS2812b.c: 23:             int x
      +                           = i - 16;
  2081  003242  0EF0               	movlw	240
  2082  003244  2414               	addwf	WS_Word@i^0,w,c
  2083  003246  6E0C               	movwf	WS_Word@x^0,c
  2084  003248  0EFF               	movlw	255
  2085  00324A  2015               	addwfc	(WS_Word@i+1)^0,w,c
  2086  00324C  6E0D               	movwf	(WS_Word@x+1)^0,c
  2087                           
  2088                           ;WS2812b/BitBangWS2812b.c: 24:             Bx = 1 & ( B >> x );
  2089  00324E  C00C  F009         	movff	WS_Word@x,??_WS_Word
  2090  003252  C005  F00A         	movff	WS_Word@B,??_WS_Word+1
  2091  003256  C006  F00B         	movff	WS_Word@B+1,??_WS_Word+2
  2092  00325A  2A09               	incf	??_WS_Word^0,f,c
  2093  00325C  EF33  F019         	goto	u114
  2094  003260                     u115:
  2095  003260  340B               	rlcf	(??_WS_Word+2)^0,w,c
  2096  003262  320B               	rrcf	(??_WS_Word+2)^0,f,c
  2097  003264  320A               	rrcf	(??_WS_Word+1)^0,f,c
  2098  003266                     u114:
  2099  003266  2E09               	decfsz	??_WS_Word^0,f,c
  2100  003268  EF30  F019         	goto	u115
  2101  00326C  0E01               	movlw	1
  2102  00326E  140A               	andwf	(??_WS_Word+1)^0,w,c
  2103  003270  6E12               	movwf	WS_Word@Bx^0,c
  2104  003272  6A13               	clrf	(WS_Word@Bx+1)^0,c
  2105                           
  2106                           ;WS2812b/BitBangWS2812b.c: 25:         }
  2107  003274  EF89  F019         	goto	l878
  2108  003278                     l866:
  2109  003278  BE15               	btfsc	(WS_Word@i+1)^0,7,c
  2110  00327A  EF48  F019         	goto	u121
  2111  00327E  5015               	movf	(WS_Word@i+1)^0,w,c
  2112  003280  E109               	bnz	u120
  2113  003282  0E08               	movlw	8
  2114  003284  5C14               	subwf	WS_Word@i^0,w,c
  2115  003286  A0D8               	btfss	status,0,c
  2116  003288  EF48  F019         	goto	u121
  2117  00328C  EF4A  F019         	goto	u120
  2118  003290                     u121:
  2119  003290  EF65  F019         	goto	l870
  2120  003294                     u120:
  2121  003294                     
  2122                           ;WS2812b/BitBangWS2812b.c: 27:         {;WS2812b/BitBangWS2812b.c: 28:             int x
      +                           = i - 8;
  2123  003294  0EF8               	movlw	248
  2124  003296  2414               	addwf	WS_Word@i^0,w,c
  2125  003298  6E0E               	movwf	WS_Word@x_79^0,c
  2126  00329A  0EFF               	movlw	255
  2127  00329C  2015               	addwfc	(WS_Word@i+1)^0,w,c
  2128  00329E  6E0F               	movwf	(WS_Word@x_79+1)^0,c
  2129                           
  2130                           ;WS2812b/BitBangWS2812b.c: 29:             Bx = 0b00000001 & ( A >> x );
  2131  0032A0  C00E  F009         	movff	WS_Word@x_79,??_WS_Word
  2132  0032A4  C003  F00A         	movff	WS_Word@A,??_WS_Word+1
  2133  0032A8  C004  F00B         	movff	WS_Word@A+1,??_WS_Word+2
  2134  0032AC  2A09               	incf	??_WS_Word^0,f,c
  2135  0032AE  EF5C  F019         	goto	u134
  2136  0032B2                     u135:
  2137  0032B2  340B               	rlcf	(??_WS_Word+2)^0,w,c
  2138  0032B4  320B               	rrcf	(??_WS_Word+2)^0,f,c
  2139  0032B6  320A               	rrcf	(??_WS_Word+1)^0,f,c
  2140  0032B8                     u134:
  2141  0032B8  2E09               	decfsz	??_WS_Word^0,f,c
  2142  0032BA  EF59  F019         	goto	u135
  2143  0032BE  0E01               	movlw	1
  2144  0032C0  140A               	andwf	(??_WS_Word+1)^0,w,c
  2145  0032C2  6E12               	movwf	WS_Word@Bx^0,c
  2146  0032C4  6A13               	clrf	(WS_Word@Bx+1)^0,c
  2147                           
  2148                           ;WS2812b/BitBangWS2812b.c: 30:         }
  2149  0032C6  EF89  F019         	goto	l878
  2150  0032CA                     l870:
  2151  0032CA  BE15               	btfsc	(WS_Word@i+1)^0,7,c
  2152  0032CC  EF6A  F019         	goto	u141
  2153  0032D0  EF6C  F019         	goto	u140
  2154  0032D4                     u141:
  2155  0032D4  EF85  F019         	goto	l876
  2156  0032D8                     u140:
  2157  0032D8                     
  2158                           ;WS2812b/BitBangWS2812b.c: 32:         {;WS2812b/BitBangWS2812b.c: 33:             int x
      +                           = i;
  2159  0032D8  C014  F010         	movff	WS_Word@i,WS_Word@x_80
  2160  0032DC  C015  F011         	movff	WS_Word@i+1,WS_Word@x_80+1
  2161  0032E0                     
  2162                           ;WS2812b/BitBangWS2812b.c: 34:             Bx = 0b00000001 & ( C >> x );
  2163  0032E0  C010  F009         	movff	WS_Word@x_80,??_WS_Word
  2164  0032E4  C007  F00A         	movff	WS_Word@C,??_WS_Word+1
  2165  0032E8  C008  F00B         	movff	WS_Word@C+1,??_WS_Word+2
  2166  0032EC  2A09               	incf	??_WS_Word^0,f,c
  2167  0032EE  EF7C  F019         	goto	u154
  2168  0032F2                     u155:
  2169  0032F2  340B               	rlcf	(??_WS_Word+2)^0,w,c
  2170  0032F4  320B               	rrcf	(??_WS_Word+2)^0,f,c
  2171  0032F6  320A               	rrcf	(??_WS_Word+1)^0,f,c
  2172  0032F8                     u154:
  2173  0032F8  2E09               	decfsz	??_WS_Word^0,f,c
  2174  0032FA  EF79  F019         	goto	u155
  2175  0032FE  0E01               	movlw	1
  2176  003300  140A               	andwf	(??_WS_Word+1)^0,w,c
  2177  003302  6E12               	movwf	WS_Word@Bx^0,c
  2178  003304  6A13               	clrf	(WS_Word@Bx+1)^0,c
  2179                           
  2180                           ;WS2812b/BitBangWS2812b.c: 35:         }
  2181  003306  EF89  F019         	goto	l878
  2182  00330A                     l876:
  2183                           
  2184                           ;WS2812b/BitBangWS2812b.c: 37:         {;WS2812b/BitBangWS2812b.c: 38:             Bx = 
      +                          1;
  2185  00330A  0E00               	movlw	0
  2186  00330C  6E13               	movwf	(WS_Word@Bx+1)^0,c
  2187  00330E  0E01               	movlw	1
  2188  003310  6E12               	movwf	WS_Word@Bx^0,c
  2189  003312                     l878:
  2190                           
  2191                           ;WS2812b/BitBangWS2812b.c: 40:         WS_Write(Bx);
  2192  003312  C012  F001         	movff	WS_Word@Bx,WS_Write@A
  2193  003316  C013  F002         	movff	WS_Word@Bx+1,WS_Write@A+1
  2194  00331A  ECE8  F018         	call	_WS_Write	;wreg free
  2195  00331E                     
  2196                           ;WS2812b/BitBangWS2812b.c: 41:     }
  2197  00331E  0614               	decf	WS_Word@i^0,f,c
  2198  003320  A0D8               	btfss	status,0,c
  2199  003322  0615               	decf	(WS_Word@i+1)^0,f,c
  2200  003324  2814               	incf	WS_Word@i^0,w,c
  2201  003326  E106               	bnz	u161
  2202  003328  2815               	incf	(WS_Word@i+1)^0,w,c
  2203  00332A  A4D8               	btfss	status,2,c
  2204  00332C  EF9A  F019         	goto	u161
  2205  003330  EF9C  F019         	goto	u160
  2206  003334                     u161:
  2207  003334  EF13  F019         	goto	l862
  2208  003338                     u160:
  2209  003338  0012               	return		;funcret
  2210  00333A                     __end_of_WS_Word:
  2211                           	callstack 0
  2212                           
  2213 ;; *************** function _WS_Write *****************
  2214 ;; Defined at:
  2215 ;;		line 45 in file "WS2812b/BitBangWS2812b.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  A               2    0[COMRAM] int 
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1
  2229 ;;      Params:         2       0       0
  2230 ;;      Locals:         0       0       0
  2231 ;;      Temps:          0       0       0
  2232 ;;      Totals:         2       0       0
  2233 ;;Total ram usage:        2 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; This function calls:
  2236 ;;		Nothing
  2237 ;; This function is called by:
  2238 ;;		_WS_Word
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text3
  2243  0031D0                     __ptext3:
  2244                           	callstack 0
  2245  0031D0                     _WS_Write:
  2246                           	callstack 28
  2247  0031D0                     
  2248                           ;WS2812b/BitBangWS2812b.c: 45: void WS_Write( int A );WS2812b/BitBangWS2812b.c: 46: {;WS
      +                          2812b/BitBangWS2812b.c: 47:     if(A)
  2249  0031D0  5001               	movf	WS_Write@A^0,w,c
  2250  0031D2  1002               	iorwf	(WS_Write@A+1)^0,w,c
  2251  0031D4  B4D8               	btfsc	status,2,c
  2252  0031D6  EFEF  F018         	goto	u91
  2253  0031DA  EFF1  F018         	goto	u90
  2254  0031DE                     u91:
  2255  0031DE  EFF8  F018         	goto	l24
  2256  0031E2                     u90:
  2257  0031E2                     
  2258                           ;WS2812b/BitBangWS2812b.c: 48:     {;WS2812b/BitBangWS2812b.c: 49:         LATAbits.LATA
      +                          2 = 1;
  2259  0031E2  8489               	bsf	137,2,c	;volatile
  2260                           
  2261                           ;WS2812b/BitBangWS2812b.c: 50:         __nop();
  2262  0031E4  F000               	nop	
  2263                           
  2264                           ;WS2812b/BitBangWS2812b.c: 51:         __nop();
  2265  0031E6  F000               	nop	
  2266                           
  2267                           ;WS2812b/BitBangWS2812b.c: 52:         __nop();
  2268  0031E8  F000               	nop	
  2269                           
  2270                           ;WS2812b/BitBangWS2812b.c: 53:         LATAbits.LATA2 = 0;
  2271  0031EA  9489               	bcf	137,2,c	;volatile
  2272                           
  2273                           ;WS2812b/BitBangWS2812b.c: 54:     }
  2274  0031EC  EFFA  F018         	goto	l26
  2275  0031F0                     l24:
  2276                           
  2277                           ;WS2812b/BitBangWS2812b.c: 56:     {;WS2812b/BitBangWS2812b.c: 57:         LATAbits.LATA
      +                          2 = 1;
  2278  0031F0  8489               	bsf	137,2,c	;volatile
  2279                           
  2280                           ;WS2812b/BitBangWS2812b.c: 58:         LATAbits.LATA2 = 0;
  2281  0031F2  9489               	bcf	137,2,c	;volatile
  2282  0031F4                     l26:
  2283  0031F4  0012               	return		;funcret
  2284  0031F6                     __end_of_WS_Write:
  2285                           	callstack 0
  2286                           
  2287 ;; *************** function _SYSTEM_Initialize *****************
  2288 ;; Defined at:
  2289 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;		None
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;		None
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  1    wreg      void 
  2296 ;; Registers used:
  2297 ;;		wreg, status,2, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1
  2303 ;;      Params:         0       0       0
  2304 ;;      Locals:         0       0       0
  2305 ;;      Temps:          0       0       0
  2306 ;;      Totals:         0       0       0
  2307 ;;Total ram usage:        0 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    1
  2310 ;; This function calls:
  2311 ;;		_OSCILLATOR_Initialize
  2312 ;;		_PIN_MANAGER_Initialize
  2313 ;; This function is called by:
  2314 ;;		_main
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text4
  2319  0031A8                     __ptext4:
  2320                           	callstack 0
  2321  0031A8                     _SYSTEM_Initialize:
  2322                           	callstack 29
  2323  0031A8                     
  2324                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  2325  0031A8  ECFB  F018         	call	_PIN_MANAGER_Initialize	;wreg free
  2326                           
  2327                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  2328  0031AC  ECD9  F018         	call	_OSCILLATOR_Initialize	;wreg free
  2329  0031B0  0012               	return		;funcret
  2330  0031B2                     __end_of_SYSTEM_Initialize:
  2331                           	callstack 0
  2332                           
  2333 ;; *************** function _PIN_MANAGER_Initialize *****************
  2334 ;; Defined at:
  2335 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;		None
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg, status,2
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1
  2349 ;;      Params:         0       0       0
  2350 ;;      Locals:         0       0       0
  2351 ;;      Temps:          0       0       0
  2352 ;;      Totals:         0       0       0
  2353 ;;Total ram usage:        0 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_SYSTEM_Initialize
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text5
  2363  0031F6                     __ptext5:
  2364                           	callstack 0
  2365  0031F6                     _PIN_MANAGER_Initialize:
  2366                           	callstack 29
  2367  0031F6                     
  2368                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2369  0031F6  0E00               	movlw	0
  2370  0031F8  6E89               	movwf	137,c	;volatile
  2371                           
  2372                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  2373  0031FA  0E00               	movlw	0
  2374  0031FC  6E8A               	movwf	138,c	;volatile
  2375                           
  2376                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  2377  0031FE  0E00               	movlw	0
  2378  003200  6E8B               	movwf	139,c	;volatile
  2379                           
  2380                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
  2381  003202  0E33               	movlw	51
  2382  003204  6E92               	movwf	146,c	;volatile
  2383                           
  2384                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xF0;
  2385  003206  0EF0               	movlw	240
  2386  003208  6E93               	movwf	147,c	;volatile
  2387  00320A                     
  2388                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFF;
  2389  00320A  6894               	setf	148,c	;volatile
  2390  00320C                     
  2391                           ;mcc_generated_files/pin_manager.c: 74:     ANSEL = 0xFF;
  2392  00320C  687E               	setf	126,c	;volatile
  2393                           
  2394                           ;mcc_generated_files/pin_manager.c: 75:     ANSELH = 0x0F;
  2395  00320E  0E0F               	movlw	15
  2396  003210  6E7F               	movwf	127,c	;volatile
  2397                           
  2398                           ;mcc_generated_files/pin_manager.c: 80:     WPUB = 0x00;
  2399  003212  0E00               	movlw	0
  2400  003214  6E78               	movwf	120,c	;volatile
  2401                           
  2402                           ;mcc_generated_files/pin_manager.c: 81:     WPUA = 0x00;
  2403  003216  0E00               	movlw	0
  2404  003218  6E77               	movwf	119,c	;volatile
  2405  00321A                     
  2406                           ;mcc_generated_files/pin_manager.c: 82:     INTCON2bits.nRBPU = 1;
  2407  00321A  8EF1               	bsf	241,7,c	;volatile
  2408  00321C  0012               	return		;funcret
  2409  00321E                     __end_of_PIN_MANAGER_Initialize:
  2410                           	callstack 0
  2411                           
  2412 ;; *************** function _OSCILLATOR_Initialize *****************
  2413 ;; Defined at:
  2414 ;;		line 57 in file "mcc_generated_files/mcc.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;		None
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, status,2
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1
  2428 ;;      Params:         0       0       0
  2429 ;;      Locals:         0       0       0
  2430 ;;      Temps:          0       0       0
  2431 ;;      Totals:         0       0       0
  2432 ;;Total ram usage:        0 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_SYSTEM_Initialize
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text6
  2442  0031B2                     __ptext6:
  2443                           	callstack 0
  2444  0031B2                     _OSCILLATOR_Initialize:
  2445                           	callstack 29
  2446  0031B2                     
  2447                           ;mcc_generated_files/mcc.c: 60:     OSCCON = 0x70;
  2448  0031B2  0E70               	movlw	112
  2449  0031B4  6ED3               	movwf	211,c	;volatile
  2450                           
  2451                           ;mcc_generated_files/mcc.c: 62:     OSCCON2 = 0x04;
  2452  0031B6  0E04               	movlw	4
  2453  0031B8  6ED2               	movwf	210,c	;volatile
  2454                           
  2455                           ;mcc_generated_files/mcc.c: 64:     OSCTUNE = 0x00;
  2456  0031BA  0E00               	movlw	0
  2457  0031BC  6E9B               	movwf	155,c	;volatile
  2458  0031BE  0012               	return		;funcret
  2459  0031C0                     __end_of_OSCILLATOR_Initialize:
  2460                           	callstack 0
  2461  0000                     
  2462                           	psect	rparam
  2463  0000                     
  2464                           	psect	idloc
  2465                           
  2466                           ;Config register IDLOC0 @ 0x200000
  2467                           ;	unspecified, using default values
  2468  200000                     	org	2097152
  2469  200000  FF                 	db	255
  2470                           
  2471                           ;Config register IDLOC1 @ 0x200001
  2472                           ;	unspecified, using default values
  2473  200001                     	org	2097153
  2474  200001  FF                 	db	255
  2475                           
  2476                           ;Config register IDLOC2 @ 0x200002
  2477                           ;	unspecified, using default values
  2478  200002                     	org	2097154
  2479  200002  FF                 	db	255
  2480                           
  2481                           ;Config register IDLOC3 @ 0x200003
  2482                           ;	unspecified, using default values
  2483  200003                     	org	2097155
  2484  200003  FF                 	db	255
  2485                           
  2486                           ;Config register IDLOC4 @ 0x200004
  2487                           ;	unspecified, using default values
  2488  200004                     	org	2097156
  2489  200004  FF                 	db	255
  2490                           
  2491                           ;Config register IDLOC5 @ 0x200005
  2492                           ;	unspecified, using default values
  2493  200005                     	org	2097157
  2494  200005  FF                 	db	255
  2495                           
  2496                           ;Config register IDLOC6 @ 0x200006
  2497                           ;	unspecified, using default values
  2498  200006                     	org	2097158
  2499  200006  FF                 	db	255
  2500                           
  2501                           ;Config register IDLOC7 @ 0x200007
  2502                           ;	unspecified, using default values
  2503  200007                     	org	2097159
  2504  200007  FF                 	db	255
  2505                           
  2506                           	psect	config
  2507                           
  2508                           ; Padding undefined space
  2509  300000                     	org	3145728
  2510  300000  FF                 	db	255
  2511                           
  2512                           ;Config register CONFIG1H @ 0x300001
  2513                           ;	Oscillator Selection bits
  2514                           ;	FOSC = IRC, Internal RC oscillator
  2515                           ;	4 X PLL Enable bit
  2516                           ;	PLLEN = OFF, PLL is under software control
  2517                           ;	Primary Clock Enable bit
  2518                           ;	PCLKEN = ON, Primary clock enabled
  2519                           ;	Fail-Safe Clock Monitor Enable
  2520                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2521                           ;	Internal/External Oscillator Switchover bit
  2522                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2523  300001                     	org	3145729
  2524  300001  28                 	db	40
  2525                           
  2526                           ;Config register CONFIG2L @ 0x300002
  2527                           ;	Power-up Timer Enable bit
  2528                           ;	PWRTEN = OFF, PWRT disabled
  2529                           ;	Brown-out Reset Enable bits
  2530                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2531                           ;	Brown Out Reset Voltage bits
  2532                           ;	BORV = 19, VBOR set to 1.9 V nominal
  2533  300002                     	org	3145730
  2534  300002  1F                 	db	31
  2535                           
  2536                           ;Config register CONFIG2H @ 0x300003
  2537                           ;	Watchdog Timer Enable bit
  2538                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  2539                           ;	Watchdog Timer Postscale Select bits
  2540                           ;	WDTPS = 32768, 1:32768
  2541  300003                     	org	3145731
  2542  300003  1E                 	db	30
  2543                           
  2544                           ; Padding undefined space
  2545  300004                     	org	3145732
  2546  300004  FF                 	db	255
  2547                           
  2548                           ;Config register CONFIG3H @ 0x300005
  2549                           ;	HFINTOSC Fast Start-up bit
  2550                           ;	HFOFST = ON, HFINTOSC starts clocking the CPU without waiting for the oscillator to st
      +                          ablize.
  2551                           ;	MCLR Pin Enable bit
  2552                           ;	MCLRE = ON, MCLR pin enabled, RA3 input pin disabled
  2553  300005                     	org	3145733
  2554  300005  88                 	db	136
  2555                           
  2556                           ;Config register CONFIG4L @ 0x300006
  2557                           ;	Stack Full/Underflow Reset Enable bit
  2558                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2559                           ;	Single-Supply ICSP Enable bit
  2560                           ;	LVP = ON, Single-Supply ICSP enabled
  2561                           ;	Boot Block Size Select bit
  2562                           ;	BBSIZ = OFF, 1kW boot block size
  2563                           ;	Extended Instruction Set Enable bit
  2564                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2565                           ;	Background Debugger Enable bit
  2566                           ;	DEBUG = OFF, Background debugger disabled, RA0 and RA1 configured as general purpose I
      +                          /O pins
  2567  300006                     	org	3145734
  2568  300006  85                 	db	133
  2569                           
  2570                           ; Padding undefined space
  2571  300007                     	org	3145735
  2572  300007  FF                 	db	255
  2573                           
  2574                           ;Config register CONFIG5L @ 0x300008
  2575                           ;	Code Protection bit
  2576                           ;	CP0 = OFF, Block 0 not code-protected
  2577                           ;	Code Protection bit
  2578                           ;	CP1 = OFF, Block 1 not code-protected
  2579  300008                     	org	3145736
  2580  300008  03                 	db	3
  2581                           
  2582                           ;Config register CONFIG5H @ 0x300009
  2583                           ;	Boot Block Code Protection bit
  2584                           ;	CPB = OFF, Boot block not code-protected
  2585                           ;	Data EEPROM Code Protection bit
  2586                           ;	CPD = OFF, Data EEPROM not code-protected
  2587  300009                     	org	3145737
  2588  300009  C0                 	db	192
  2589                           
  2590                           ;Config register CONFIG6L @ 0x30000A
  2591                           ;	Write Protection bit
  2592                           ;	WRT0 = OFF, Block 0 not write-protected
  2593                           ;	Write Protection bit
  2594                           ;	WRT1 = OFF, Block 1 not write-protected
  2595  30000A                     	org	3145738
  2596  30000A  03                 	db	3
  2597                           
  2598                           ;Config register CONFIG6H @ 0x30000B
  2599                           ;	Configuration Register Write Protection bit
  2600                           ;	WRTC = OFF, Configuration registers not write-protected
  2601                           ;	Boot Block Write Protection bit
  2602                           ;	WRTB = OFF, Boot block not write-protected
  2603                           ;	Data EEPROM Write Protection bit
  2604                           ;	WRTD = OFF, Data EEPROM not write-protected
  2605  30000B                     	org	3145739
  2606  30000B  E0                 	db	224
  2607                           
  2608                           ;Config register CONFIG7L @ 0x30000C
  2609                           ;	Table Read Protection bit
  2610                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  2611                           ;	Table Read Protection bit
  2612                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  2613  30000C                     	org	3145740
  2614  30000C  03                 	db	3
  2615                           
  2616                           ;Config register CONFIG7H @ 0x30000D
  2617                           ;	Boot Block Table Read Protection bit
  2618                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  2619  30000D                     	org	3145741
  2620  30000D  40                 	db	64
  2621                           tosu	equ	0xFFF
  2622                           tosh	equ	0xFFE
  2623                           tosl	equ	0xFFD
  2624                           stkptr	equ	0xFFC
  2625                           pclatu	equ	0xFFB
  2626                           pclath	equ	0xFFA
  2627                           pcl	equ	0xFF9
  2628                           tblptru	equ	0xFF8
  2629                           tblptrh	equ	0xFF7
  2630                           tblptrl	equ	0xFF6
  2631                           tablat	equ	0xFF5
  2632                           prodh	equ	0xFF4
  2633                           prodl	equ	0xFF3
  2634                           indf0	equ	0xFEF
  2635                           postinc0	equ	0xFEE
  2636                           postdec0	equ	0xFED
  2637                           preinc0	equ	0xFEC
  2638                           plusw0	equ	0xFEB
  2639                           fsr0h	equ	0xFEA
  2640                           fsr0l	equ	0xFE9
  2641                           wreg	equ	0xFE8
  2642                           indf1	equ	0xFE7
  2643                           postinc1	equ	0xFE6
  2644                           postdec1	equ	0xFE5
  2645                           preinc1	equ	0xFE4
  2646                           plusw1	equ	0xFE3
  2647                           fsr1h	equ	0xFE2
  2648                           fsr1l	equ	0xFE1
  2649                           bsr	equ	0xFE0
  2650                           indf2	equ	0xFDF
  2651                           postinc2	equ	0xFDE
  2652                           postdec2	equ	0xFDD
  2653                           preinc2	equ	0xFDC
  2654                           plusw2	equ	0xFDB
  2655                           fsr2h	equ	0xFDA
  2656                           fsr2l	equ	0xFD9
  2657                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      23
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_WSLoop
    _WSLoop->_WS_Word
    _WS_Word->_WS_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26430
                  _SYSTEM_Initialize
                             _WSLoop
 ---------------------------------------------------------------------------------
 (1) _WSLoop                                               2     2      0   26430
                                             21 COMRAM     2     2      0
                            _WS_Word
 ---------------------------------------------------------------------------------
 (2) _WS_Word                                             19    13      6   26430
                                              2 COMRAM    19    13      6
                           _WS_Write
 ---------------------------------------------------------------------------------
 (3) _WS_Write                                             2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _WSLoop
     _WS_Word
       _WS_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     17      17       1       24.2%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
ABS                  0      0       0       7        0.0%
BIGRAM             1FF      0       0       8        0.0%
DATA                 0      0       0       9        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Nov 05 22:47:00 2020

                             l21 3338                               l24 31F0  
                             l26 31F4                               l45 31B0  
                             l29 3FFE                               l48 31BE  
                             l87 321C                               u90 31E2  
                             u91 31DE                              l800 320A  
                            l802 320C                              l804 321A  
                            l900 3B8E                              l806 31B2  
                            l910 3FE6                              l902 3BA6  
                            l912 3FFC                              l904 3DAE  
                            l920 31C0                              l906 3DC6  
                            l922 31C4                              l852 31D0  
                            l908 3FCE                              l838 31A8  
                            l854 31E2                              l870 32CA  
                            l862 3226                              l880 331E  
                            l872 32D8                              l864 3242  
                            l856 321E                              l882 3324  
                            l874 32E0                              l866 3278  
                            l890 3546                              l876 330A  
                            l868 3294                              l892 374E  
                            l884 333A                              l798 31F6  
                            l878 3312                              l894 3766  
                            l886 333C                              l896 396E  
                            l888 352E                              l898 3986  
                            _GIE 007F97                              u100 3242  
                            u101 323E                              u120 3294  
                            u121 3290                              u114 3266  
                            u115 3260                              u140 32D8  
                            u141 32D4                              u134 32B8  
                            u135 32B2                              u207 3770  
                            u160 3338                              u161 3334  
                            u217 3978                              u154 32F8  
                            u155 32F2                              u227 3990  
                            u237 3B98                              u247 3BB0  
                            u257 3DB8                              u177 3538  
                            u267 3DD0                              u187 3550  
                            u277 3FD8                              u197 3758  
                            u287 3FF0                              wreg 000FE8  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _WPUA 000F77  
                           _WPUB 000F78                             _main 31C0  
                           start 0000                  __end_of_WS_Word 333A  
                   ___param_bank 000000   __size_of_OSCILLATOR_Initialize 000E  
  __end_of_OSCILLATOR_Initialize 31C0                            ?_main 0001  
                          _ANSEL 000F7E                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          status 000FD8                  __initialization 31A2  
               __end_of_WS_Write 31F6                     __end_of_main 31D0  
                         ??_main 0018                    __activetblptr 000000  
                         _ANSELH 000F7F                           _OSCCON 000FD3  
                      ??_WS_Word 0009                           _WSLoop 333A  
              _SYSTEM_Initialize 31A8                       __accesstop 0060  
        __end_of__initialization 31A2               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
            ??_SYSTEM_Initialize 0001        __end_of_SYSTEM_Initialize 31B2  
                      ?_WS_Write 0001                          ?_WSLoop 0001  
                        _OSCCON2 000FD2                          _OSCTUNE 000F9B  
                     ??_WS_Write 0003                          _WS_Word 321E  
                __size_of_WSLoop 0CC6                          __Hparam 0000  
                        __Lparam 0000                          __pcinit 31A2  
                        __ramtop 0200                          __ptext0 31C0  
                        __ptext1 333A                          __ptext2 321E  
                        __ptext3 31D0                          __ptext4 31A8  
                        __ptext5 31F6                          __ptext6 31B2  
          _OSCILLATOR_Initialize 31B2         ??_PIN_MANAGER_Initialize 0001  
     __size_of_SYSTEM_Initialize 000A             end_of_initialization 31A2  
                      WS_Word@Bx 0012                        WS_Write@A 0001  
                 __end_of_WSLoop 4000           ?_OSCILLATOR_Initialize 0001  
            start_initialization 31A2  __size_of_PIN_MANAGER_Initialize 0028  
              __size_of_WS_Write 0026                         ??_WSLoop 0016  
                       ?_WS_Word 0003           _PIN_MANAGER_Initialize 31F6  
                       _LATAbits 000F89                         WS_Word@A 0003  
                       WS_Word@B 0005                         WS_Word@C 0007  
                       WS_Word@i 0014                         WS_Word@x 000C  
                    _INTCON2bits 000FF1                         _WS_Write 31D0  
               __size_of_WS_Word 011C                         __Hrparam 0000  
                       __Lrparam 0000          ??_OSCILLATOR_Initialize 0001  
                  __size_of_main 0010                       _INTCONbits 000FF2  
        ?_PIN_MANAGER_Initialize 0001                      WS_Word@x_80 0010  
                    WS_Word@x_79 000E   __end_of_PIN_MANAGER_Initialize 321E  
