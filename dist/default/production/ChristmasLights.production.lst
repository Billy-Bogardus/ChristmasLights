

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Nov 17 23:41:56 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 05/05/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F14K22 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	nvCOMRAM
    66  000030                     __pnvCOMRAM:
    67                           	callstack 0
    68  000030                     _ADC1_InterruptHandler:
    69                           	callstack 0
    70  000030                     	ds	2
    71  0000                     _RCONbits	set	4048
    72  0000                     _PIR1bits	set	3998
    73  0000                     _ADCON0bits	set	4034
    74  0000                     _PIE1bits	set	3997
    75  0000                     _ADCON0	set	4034
    76  0000                     _ADRESH	set	4036
    77  0000                     _ADRESL	set	4035
    78  0000                     _ADCON2	set	4032
    79  0000                     _ADCON1	set	4033
    80  0000                     _LATAbits	set	3977
    81  0000                     _INTCONbits	set	4082
    82  0000                     _INTCON2bits	set	4081
    83  0000                     _WPUA	set	3959
    84  0000                     _WPUB	set	3960
    85  0000                     _ANSELH	set	3967
    86  0000                     _ANSEL	set	3966
    87  0000                     _TRISC	set	3988
    88  0000                     _TRISB	set	3987
    89  0000                     _TRISA	set	3986
    90  0000                     _LATC	set	3979
    91  0000                     _LATB	set	3978
    92  0000                     _LATA	set	3977
    93  0000                     _OSCTUNE	set	3995
    94  0000                     _OSCCON2	set	4050
    95  0000                     _OSCCON	set	4051
    96  0000                     _GIE	set	32663
    97                           
    98                           ; #config settings
    99                           
   100                           	psect	cinit
   101  000692                     __pcinit:
   102                           	callstack 0
   103  000692                     start_initialization:
   104                           	callstack 0
   105  000692                     __initialization:
   106                           	callstack 0
   107  000692                     end_of_initialization:
   108                           	callstack 0
   109  000692                     __end_of__initialization:
   110                           	callstack 0
   111  000692  9032               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   112  000694  9232               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   113  000696  0E00               	movlw	low (__Lmediumconst shr (0+16))
   114  000698  6EF8               	movwf	tblptru,c
   115  00069A  0100               	movlb	0
   116  00069C  EF30  F003         	goto	_main	;jump to C main() function
   117                           
   118                           	psect	cstackCOMRAM
   119  000001                     __pcstackCOMRAM:
   120                           	callstack 0
   121  000001                     ??_INTERRUPT_InterruptManager:
   122                           
   123                           ; 1 bytes @ 0x0
   124  000001                     	ds	2
   125  000003                     WS_Write@A:
   126                           	callstack 0
   127  000003                     ADC1_SetInterruptHandler@InterruptHandler:
   128                           	callstack 0
   129                           
   130                           ; 2 bytes @ 0x2
   131  000003                     	ds	2
   132  000005                     WS_Word@A:
   133                           	callstack 0
   134                           
   135                           ; 2 bytes @ 0x4
   136  000005                     	ds	2
   137  000007                     WS_Word@B:
   138                           	callstack 0
   139                           
   140                           ; 2 bytes @ 0x6
   141  000007                     	ds	2
   142  000009                     WS_Word@C:
   143                           	callstack 0
   144                           
   145                           ; 2 bytes @ 0x8
   146  000009                     	ds	2
   147  00000B                     ??_WS_Word:
   148                           
   149                           ; 1 bytes @ 0xA
   150  00000B                     	ds	3
   151  00000E                     WS_Word@x:
   152                           	callstack 0
   153                           
   154                           ; 2 bytes @ 0xD
   155  00000E                     	ds	2
   156  000010                     WS_Word@x_241:
   157                           	callstack 0
   158                           
   159                           ; 2 bytes @ 0xF
   160  000010                     	ds	2
   161  000012                     WS_Word@x_242:
   162                           	callstack 0
   163                           
   164                           ; 2 bytes @ 0x11
   165  000012                     	ds	2
   166  000014                     WS_Word@Bx:
   167                           	callstack 0
   168                           
   169                           ; 2 bytes @ 0x13
   170  000014                     	ds	2
   171  000016                     WS_Word@i:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x15
   175  000016                     	ds	2
   176  000018                     WS_dim@A:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0x17
   180  000018                     	ds	2
   181  00001A                     WS_dim@B:
   182                           	callstack 0
   183                           
   184                           ; 2 bytes @ 0x19
   185  00001A                     	ds	2
   186  00001C                     WS_dim@C:
   187                           	callstack 0
   188                           
   189                           ; 2 bytes @ 0x1B
   190  00001C                     	ds	2
   191  00001E                     WS_dim@brightness:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x1D
   195  00001E                     	ds	2
   196  000020                     ??_WS_dim:
   197                           
   198                           ; 1 bytes @ 0x1F
   199  000020                     	ds	3
   200  000023                     WSTest@length:
   201                           	callstack 0
   202                           
   203                           ; 2 bytes @ 0x22
   204  000023                     	ds	2
   205  000025                     WSTest@brightness:
   206                           	callstack 0
   207                           
   208                           ; 2 bytes @ 0x24
   209  000025                     	ds	2
   210  000027                     ??_WSTest:
   211                           
   212                           ; 1 bytes @ 0x26
   213  000027                     	ds	5
   214  00002C                     WSTest@i:
   215                           	callstack 0
   216                           
   217                           ; 2 bytes @ 0x2B
   218  00002C                     	ds	2
   219  00002E                     WSTest@b:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x2D
   223  00002E                     	ds	2
   224  000030                     
   225                           ; 1 bytes @ 0x2F
   226 ;;
   227 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   228 ;;
   229 ;; *************** function _main *****************
   230 ;; Defined at:
   231 ;;		line 50 in file "main.c"
   232 ;; Parameters:    Size  Location     Type
   233 ;;		None
   234 ;; Auto vars:     Size  Location     Type
   235 ;;		None
   236 ;; Return value:  Size  Location     Type
   237 ;;                  1    wreg      void 
   238 ;; Registers used:
   239 ;;		wreg, status,2, status,0, cstack
   240 ;; Tracked objects:
   241 ;;		On entry : 0/0
   242 ;;		On exit  : 0/0
   243 ;;		Unchanged: 0/0
   244 ;; Data sizes:     COMRAM   BANK0   BANK1
   245 ;;      Params:         0       0       0
   246 ;;      Locals:         0       0       0
   247 ;;      Temps:          0       0       0
   248 ;;      Totals:         0       0       0
   249 ;;Total ram usage:        0 bytes
   250 ;; Hardware stack levels required when called:    7
   251 ;; This function calls:
   252 ;;		_SYSTEM_Initialize
   253 ;;		_WSTest
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text0
   260  000660                     __ptext0:
   261                           	callstack 0
   262  000660                     _main:
   263                           	callstack 24
   264  000660                     
   265                           ;main.c: 53:     SYSTEM_Initialize();
   266  000660  EC40  F003         	call	_SYSTEM_Initialize	;wreg free
   267  000664                     l127:
   268                           
   269                           ;main.c: 70:     {;main.c: 71:         WSTest(100,2);
   270  000664  0E00               	movlw	0
   271  000666  6E24               	movwf	(WSTest@length+1)^0,c
   272  000668  0E64               	movlw	100
   273  00066A  6E23               	movwf	WSTest@length^0,c
   274  00066C  0E00               	movlw	0
   275  00066E  6E26               	movwf	(WSTest@brightness+1)^0,c
   276  000670  0E02               	movlw	2
   277  000672  6E25               	movwf	WSTest@brightness^0,c
   278  000674  EC3C  F000         	call	_WSTest	;wreg free
   279  000678  EF32  F003         	goto	l127
   280  00067C  EF3A  F000         	goto	start
   281  000680                     __end_of_main:
   282                           	callstack 0
   283                           
   284 ;; *************** function _WSTest *****************
   285 ;; Defined at:
   286 ;;		line 77 in file "WS2812b/BitBangWS2812b.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;  length          2   34[COMRAM] int 
   289 ;;  brightness      2   36[COMRAM] int 
   290 ;; Auto vars:     Size  Location     Type
   291 ;;  i               2   43[COMRAM] int 
   292 ;;  b               2   45[COMRAM] int 
   293 ;; Return value:  Size  Location     Type
   294 ;;                  1    wreg      void 
   295 ;; Registers used:
   296 ;;		wreg, status,2, status,0, cstack
   297 ;; Tracked objects:
   298 ;;		On entry : 0/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMRAM   BANK0   BANK1
   302 ;;      Params:         4       0       0
   303 ;;      Locals:         4       0       0
   304 ;;      Temps:          5       0       0
   305 ;;      Totals:        13       0       0
   306 ;;Total ram usage:       13 bytes
   307 ;; Hardware stack levels used:    1
   308 ;; Hardware stack levels required when called:    6
   309 ;; This function calls:
   310 ;;		_WS_Word
   311 ;;		_WS_dim
   312 ;; This function is called by:
   313 ;;		_main
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           	psect	text1
   318  000078                     __ptext1:
   319                           	callstack 0
   320  000078                     _WSTest:
   321                           	callstack 24
   322  000078                     
   323                           ;WS2812b/BitBangWS2812b.c: 77: void WSTest(int length, int brightness);WS2812b/BitBangWS
      +                          2812b.c: 78: {;WS2812b/BitBangWS2812b.c: 80:     for(int i = 0; i<length; i++)
   324  000078  0E00               	movlw	0
   325  00007A  6E2D               	movwf	(WSTest@i+1)^0,c
   326  00007C  0E00               	movlw	0
   327  00007E  6E2C               	movwf	WSTest@i^0,c
   328  000080  EF52  F000         	goto	l1234
   329  000084                     l1230:
   330                           
   331                           ;WS2812b/BitBangWS2812b.c: 81:     {;WS2812b/BitBangWS2812b.c: 82:         WS_Word(0x00,
      +                           0x00, 0x00);
   332  000084  0E00               	movlw	0
   333  000086  6E06               	movwf	(WS_Word@A+1)^0,c
   334  000088  0E00               	movlw	0
   335  00008A  6E05               	movwf	WS_Word@A^0,c
   336  00008C  0E00               	movlw	0
   337  00008E  6E08               	movwf	(WS_Word@B+1)^0,c
   338  000090  0E00               	movlw	0
   339  000092  6E07               	movwf	WS_Word@B^0,c
   340  000094  0E00               	movlw	0
   341  000096  6E0A               	movwf	(WS_Word@C+1)^0,c
   342  000098  0E00               	movlw	0
   343  00009A  6E09               	movwf	WS_Word@C^0,c
   344  00009C  ECEC  F001         	call	_WS_Word	;wreg free
   345  0000A0                     
   346                           ;WS2812b/BitBangWS2812b.c: 83:     }
   347  0000A0  4A2C               	infsnz	WSTest@i^0,f,c
   348  0000A2  2A2D               	incf	(WSTest@i+1)^0,f,c
   349  0000A4                     l1234:
   350  0000A4  5023               	movf	WSTest@length^0,w,c
   351  0000A6  5C2C               	subwf	WSTest@i^0,w,c
   352  0000A8  502D               	movf	(WSTest@i+1)^0,w,c
   353  0000AA  0A80               	xorlw	128
   354  0000AC  6E27               	movwf	??_WSTest^0,c
   355  0000AE  5024               	movf	(WSTest@length+1)^0,w,c
   356  0000B0  0A80               	xorlw	128
   357  0000B2  5827               	subwfb	??_WSTest^0,w,c
   358  0000B4  A0D8               	btfss	status,0,c
   359  0000B6  EF5F  F000         	goto	u501
   360  0000BA  EF61  F000         	goto	u500
   361  0000BE                     u501:
   362  0000BE  EF42  F000         	goto	l1230
   363  0000C2                     u500:
   364  0000C2                     
   365                           ;WS2812b/BitBangWS2812b.c: 84:     _delay((unsigned long)((60.000)*(32000000/4000.0)));
   366  0000C2  0E03               	movlw	3
   367  0000C4  6E28               	movwf	(??_WSTest+1)^0,c
   368  0000C6  0E70               	movlw	112
   369  0000C8  6E27               	movwf	??_WSTest^0,c
   370  0000CA  0E5C               	movlw	92
   371  0000CC                     u657:
   372  0000CC  2EE8               	decfsz	wreg,f,c
   373  0000CE  D7FE               	bra	u657
   374  0000D0  2E27               	decfsz	??_WSTest^0,f,c
   375  0000D2  D7FC               	bra	u657
   376  0000D4  2E28               	decfsz	(??_WSTest+1)^0,f,c
   377  0000D6  D7FA               	bra	u657
   378  0000D8  D000               	nop2	
   379                           
   380                           ;WS2812b/BitBangWS2812b.c: 85:     _delay((unsigned long)((250)*(32000000/4000.0)));
   381  0000DA  0E0B               	movlw	11
   382  0000DC  6E28               	movwf	(??_WSTest+1)^0,c
   383  0000DE  0E26               	movlw	38
   384  0000E0  6E27               	movwf	??_WSTest^0,c
   385  0000E2  0E5E               	movlw	94
   386  0000E4                     u667:
   387  0000E4  2EE8               	decfsz	wreg,f,c
   388  0000E6  D7FE               	bra	u667
   389  0000E8  2E27               	decfsz	??_WSTest^0,f,c
   390  0000EA  D7FC               	bra	u667
   391  0000EC  2E28               	decfsz	(??_WSTest+1)^0,f,c
   392  0000EE  D7FA               	bra	u667
   393  0000F0                     
   394                           ;WS2812b/BitBangWS2812b.c: 87:     for(b = 0; b<length-6; b+=6 )
   395  0000F0  0E00               	movlw	0
   396  0000F2  6E2F               	movwf	(WSTest@b+1)^0,c
   397  0000F4  0E00               	movlw	0
   398  0000F6  6E2E               	movwf	WSTest@b^0,c
   399  0000F8  EFE5  F000         	goto	l1246
   400  0000FC                     l1242:
   401                           
   402                           ;WS2812b/BitBangWS2812b.c: 88:     {;WS2812b/BitBangWS2812b.c: 89:         WS_dim(0xFF, 
      +                          0x00, 0x00, brightness);
   403  0000FC  0E00               	movlw	0
   404  0000FE  6E19               	movwf	(WS_dim@A+1)^0,c
   405  000100  6818               	setf	WS_dim@A^0,c
   406  000102  0E00               	movlw	0
   407  000104  6E1B               	movwf	(WS_dim@B+1)^0,c
   408  000106  0E00               	movlw	0
   409  000108  6E1A               	movwf	WS_dim@B^0,c
   410  00010A  0E00               	movlw	0
   411  00010C  6E1D               	movwf	(WS_dim@C+1)^0,c
   412  00010E  0E00               	movlw	0
   413  000110  6E1C               	movwf	WS_dim@C^0,c
   414  000112  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   415  000116  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   416  00011A  EC7A  F002         	call	_WS_dim	;wreg free
   417                           
   418                           ;WS2812b/BitBangWS2812b.c: 90:         WS_dim(0xFF, 0xFF, 0x00, brightness);
   419  00011E  0E00               	movlw	0
   420  000120  6E19               	movwf	(WS_dim@A+1)^0,c
   421  000122  6818               	setf	WS_dim@A^0,c
   422  000124  0E00               	movlw	0
   423  000126  6E1B               	movwf	(WS_dim@B+1)^0,c
   424  000128  681A               	setf	WS_dim@B^0,c
   425  00012A  0E00               	movlw	0
   426  00012C  6E1D               	movwf	(WS_dim@C+1)^0,c
   427  00012E  0E00               	movlw	0
   428  000130  6E1C               	movwf	WS_dim@C^0,c
   429  000132  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   430  000136  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   431  00013A  EC7A  F002         	call	_WS_dim	;wreg free
   432                           
   433                           ;WS2812b/BitBangWS2812b.c: 91:         WS_dim(0x00, 0xFF, 0x00, brightness);
   434  00013E  0E00               	movlw	0
   435  000140  6E19               	movwf	(WS_dim@A+1)^0,c
   436  000142  0E00               	movlw	0
   437  000144  6E18               	movwf	WS_dim@A^0,c
   438  000146  0E00               	movlw	0
   439  000148  6E1B               	movwf	(WS_dim@B+1)^0,c
   440  00014A  681A               	setf	WS_dim@B^0,c
   441  00014C  0E00               	movlw	0
   442  00014E  6E1D               	movwf	(WS_dim@C+1)^0,c
   443  000150  0E00               	movlw	0
   444  000152  6E1C               	movwf	WS_dim@C^0,c
   445  000154  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   446  000158  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   447  00015C  EC7A  F002         	call	_WS_dim	;wreg free
   448                           
   449                           ;WS2812b/BitBangWS2812b.c: 92:         WS_dim(0x00, 0xFF, 0xFF, brightness);
   450  000160  0E00               	movlw	0
   451  000162  6E19               	movwf	(WS_dim@A+1)^0,c
   452  000164  0E00               	movlw	0
   453  000166  6E18               	movwf	WS_dim@A^0,c
   454  000168  0E00               	movlw	0
   455  00016A  6E1B               	movwf	(WS_dim@B+1)^0,c
   456  00016C  681A               	setf	WS_dim@B^0,c
   457  00016E  0E00               	movlw	0
   458  000170  6E1D               	movwf	(WS_dim@C+1)^0,c
   459  000172  681C               	setf	WS_dim@C^0,c
   460  000174  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   461  000178  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   462  00017C  EC7A  F002         	call	_WS_dim	;wreg free
   463                           
   464                           ;WS2812b/BitBangWS2812b.c: 93:         WS_dim(0x00, 0x00, 0xFF, brightness);
   465  000180  0E00               	movlw	0
   466  000182  6E19               	movwf	(WS_dim@A+1)^0,c
   467  000184  0E00               	movlw	0
   468  000186  6E18               	movwf	WS_dim@A^0,c
   469  000188  0E00               	movlw	0
   470  00018A  6E1B               	movwf	(WS_dim@B+1)^0,c
   471  00018C  0E00               	movlw	0
   472  00018E  6E1A               	movwf	WS_dim@B^0,c
   473  000190  0E00               	movlw	0
   474  000192  6E1D               	movwf	(WS_dim@C+1)^0,c
   475  000194  681C               	setf	WS_dim@C^0,c
   476  000196  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   477  00019A  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   478  00019E  EC7A  F002         	call	_WS_dim	;wreg free
   479                           
   480                           ;WS2812b/BitBangWS2812b.c: 94:         WS_dim(0xFF, 0x00, 0xFF, brightness);
   481  0001A2  0E00               	movlw	0
   482  0001A4  6E19               	movwf	(WS_dim@A+1)^0,c
   483  0001A6  6818               	setf	WS_dim@A^0,c
   484  0001A8  0E00               	movlw	0
   485  0001AA  6E1B               	movwf	(WS_dim@B+1)^0,c
   486  0001AC  0E00               	movlw	0
   487  0001AE  6E1A               	movwf	WS_dim@B^0,c
   488  0001B0  0E00               	movlw	0
   489  0001B2  6E1D               	movwf	(WS_dim@C+1)^0,c
   490  0001B4  681C               	setf	WS_dim@C^0,c
   491  0001B6  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   492  0001BA  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   493  0001BE  EC7A  F002         	call	_WS_dim	;wreg free
   494  0001C2                     
   495                           ;WS2812b/BitBangWS2812b.c: 95:     }
   496  0001C2  0E06               	movlw	6
   497  0001C4  262E               	addwf	WSTest@b^0,f,c
   498  0001C6  0E00               	movlw	0
   499  0001C8  222F               	addwfc	(WSTest@b+1)^0,f,c
   500  0001CA                     l1246:
   501  0001CA  0EFA               	movlw	250
   502  0001CC  6E27               	movwf	??_WSTest^0,c
   503  0001CE  0EFF               	movlw	255
   504  0001D0  6E28               	movwf	(??_WSTest+1)^0,c
   505  0001D2  C023  F029         	movff	WSTest@length,??_WSTest+2
   506  0001D6  C024  F02A         	movff	WSTest@length+1,??_WSTest+3
   507  0001DA  5027               	movf	??_WSTest^0,w,c
   508  0001DC  2629               	addwf	(??_WSTest+2)^0,f,c
   509  0001DE  5028               	movf	(??_WSTest+1)^0,w,c
   510  0001E0  222A               	addwfc	(??_WSTest+3)^0,f,c
   511  0001E2  5029               	movf	(??_WSTest+2)^0,w,c
   512  0001E4  5C2E               	subwf	WSTest@b^0,w,c
   513  0001E6  502F               	movf	(WSTest@b+1)^0,w,c
   514  0001E8  0A80               	xorlw	128
   515  0001EA  6E2B               	movwf	(??_WSTest+4)^0,c
   516  0001EC  502A               	movf	(??_WSTest+3)^0,w,c
   517  0001EE  0A80               	xorlw	128
   518  0001F0  582B               	subwfb	(??_WSTest+4)^0,w,c
   519  0001F2  A0D8               	btfss	status,0,c
   520  0001F4  EFFE  F000         	goto	u511
   521  0001F8  EF00  F001         	goto	u510
   522  0001FC                     u511:
   523  0001FC  EF7E  F000         	goto	l1242
   524  000200                     u510:
   525  000200  EFC5  F001         	goto	l1296
   526  000204                     l1248:
   527                           
   528                           ;WS2812b/BitBangWS2812b.c: 97:     {;WS2812b/BitBangWS2812b.c: 98:         WS_dim(0xFF, 
      +                          0x00, 0x00, brightness);
   529  000204  0E00               	movlw	0
   530  000206  6E19               	movwf	(WS_dim@A+1)^0,c
   531  000208  6818               	setf	WS_dim@A^0,c
   532  00020A  0E00               	movlw	0
   533  00020C  6E1B               	movwf	(WS_dim@B+1)^0,c
   534  00020E  0E00               	movlw	0
   535  000210  6E1A               	movwf	WS_dim@B^0,c
   536  000212  0E00               	movlw	0
   537  000214  6E1D               	movwf	(WS_dim@C+1)^0,c
   538  000216  0E00               	movlw	0
   539  000218  6E1C               	movwf	WS_dim@C^0,c
   540  00021A  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   541  00021E  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   542  000222  EC7A  F002         	call	_WS_dim	;wreg free
   543  000226                     
   544                           ;WS2812b/BitBangWS2812b.c: 99:         b++;
   545  000226  4A2E               	infsnz	WSTest@b^0,f,c
   546  000228  2A2F               	incf	(WSTest@b+1)^0,f,c
   547  00022A                     
   548                           ;WS2812b/BitBangWS2812b.c: 100:         if(b == length) break;
   549  00022A  5023               	movf	WSTest@length^0,w,c
   550  00022C  182E               	xorwf	WSTest@b^0,w,c
   551  00022E  E107               	bnz	u521
   552  000230  5024               	movf	(WSTest@length+1)^0,w,c
   553  000232  182F               	xorwf	(WSTest@b+1)^0,w,c
   554  000234  A4D8               	btfss	status,2,c
   555  000236  EF1F  F001         	goto	u521
   556  00023A  EF21  F001         	goto	u520
   557  00023E                     u521:
   558  00023E  EF23  F001         	goto	l1256
   559  000242                     u520:
   560  000242  EFD4  F001         	goto	l1298
   561  000246                     l1256:
   562                           
   563                           ;WS2812b/BitBangWS2812b.c: 101:         WS_dim(0xFF, 0xFF, 0x00, brightness);
   564  000246  0E00               	movlw	0
   565  000248  6E19               	movwf	(WS_dim@A+1)^0,c
   566  00024A  6818               	setf	WS_dim@A^0,c
   567  00024C  0E00               	movlw	0
   568  00024E  6E1B               	movwf	(WS_dim@B+1)^0,c
   569  000250  681A               	setf	WS_dim@B^0,c
   570  000252  0E00               	movlw	0
   571  000254  6E1D               	movwf	(WS_dim@C+1)^0,c
   572  000256  0E00               	movlw	0
   573  000258  6E1C               	movwf	WS_dim@C^0,c
   574  00025A  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   575  00025E  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   576  000262  EC7A  F002         	call	_WS_dim	;wreg free
   577  000266                     
   578                           ;WS2812b/BitBangWS2812b.c: 102:         b++;
   579  000266  4A2E               	infsnz	WSTest@b^0,f,c
   580  000268  2A2F               	incf	(WSTest@b+1)^0,f,c
   581  00026A                     
   582                           ;WS2812b/BitBangWS2812b.c: 103:         if(b == length) break;
   583  00026A  5023               	movf	WSTest@length^0,w,c
   584  00026C  182E               	xorwf	WSTest@b^0,w,c
   585  00026E  E107               	bnz	u531
   586  000270  5024               	movf	(WSTest@length+1)^0,w,c
   587  000272  182F               	xorwf	(WSTest@b+1)^0,w,c
   588  000274  A4D8               	btfss	status,2,c
   589  000276  EF3F  F001         	goto	u531
   590  00027A  EF41  F001         	goto	u530
   591  00027E                     u531:
   592  00027E  EF43  F001         	goto	l1264
   593  000282                     u530:
   594  000282  EFD4  F001         	goto	l1298
   595  000286                     l1264:
   596                           
   597                           ;WS2812b/BitBangWS2812b.c: 104:         WS_dim(0x00, 0xFF, 0x00, brightness);
   598  000286  0E00               	movlw	0
   599  000288  6E19               	movwf	(WS_dim@A+1)^0,c
   600  00028A  0E00               	movlw	0
   601  00028C  6E18               	movwf	WS_dim@A^0,c
   602  00028E  0E00               	movlw	0
   603  000290  6E1B               	movwf	(WS_dim@B+1)^0,c
   604  000292  681A               	setf	WS_dim@B^0,c
   605  000294  0E00               	movlw	0
   606  000296  6E1D               	movwf	(WS_dim@C+1)^0,c
   607  000298  0E00               	movlw	0
   608  00029A  6E1C               	movwf	WS_dim@C^0,c
   609  00029C  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   610  0002A0  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   611  0002A4  EC7A  F002         	call	_WS_dim	;wreg free
   612  0002A8                     
   613                           ;WS2812b/BitBangWS2812b.c: 105:         b++;
   614  0002A8  4A2E               	infsnz	WSTest@b^0,f,c
   615  0002AA  2A2F               	incf	(WSTest@b+1)^0,f,c
   616  0002AC                     
   617                           ;WS2812b/BitBangWS2812b.c: 106:         if(b == length) break;
   618  0002AC  5023               	movf	WSTest@length^0,w,c
   619  0002AE  182E               	xorwf	WSTest@b^0,w,c
   620  0002B0  E107               	bnz	u541
   621  0002B2  5024               	movf	(WSTest@length+1)^0,w,c
   622  0002B4  182F               	xorwf	(WSTest@b+1)^0,w,c
   623  0002B6  A4D8               	btfss	status,2,c
   624  0002B8  EF60  F001         	goto	u541
   625  0002BC  EF62  F001         	goto	u540
   626  0002C0                     u541:
   627  0002C0  EF64  F001         	goto	l1272
   628  0002C4                     u540:
   629  0002C4  EFD4  F001         	goto	l1298
   630  0002C8                     l1272:
   631                           
   632                           ;WS2812b/BitBangWS2812b.c: 107:         WS_dim(0x00, 0xFF, 0xFF, brightness);
   633  0002C8  0E00               	movlw	0
   634  0002CA  6E19               	movwf	(WS_dim@A+1)^0,c
   635  0002CC  0E00               	movlw	0
   636  0002CE  6E18               	movwf	WS_dim@A^0,c
   637  0002D0  0E00               	movlw	0
   638  0002D2  6E1B               	movwf	(WS_dim@B+1)^0,c
   639  0002D4  681A               	setf	WS_dim@B^0,c
   640  0002D6  0E00               	movlw	0
   641  0002D8  6E1D               	movwf	(WS_dim@C+1)^0,c
   642  0002DA  681C               	setf	WS_dim@C^0,c
   643  0002DC  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   644  0002E0  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   645  0002E4  EC7A  F002         	call	_WS_dim	;wreg free
   646  0002E8                     
   647                           ;WS2812b/BitBangWS2812b.c: 108:         b++;
   648  0002E8  4A2E               	infsnz	WSTest@b^0,f,c
   649  0002EA  2A2F               	incf	(WSTest@b+1)^0,f,c
   650  0002EC                     
   651                           ;WS2812b/BitBangWS2812b.c: 109:         if(b == length) break;
   652  0002EC  5023               	movf	WSTest@length^0,w,c
   653  0002EE  182E               	xorwf	WSTest@b^0,w,c
   654  0002F0  E107               	bnz	u551
   655  0002F2  5024               	movf	(WSTest@length+1)^0,w,c
   656  0002F4  182F               	xorwf	(WSTest@b+1)^0,w,c
   657  0002F6  A4D8               	btfss	status,2,c
   658  0002F8  EF80  F001         	goto	u551
   659  0002FC  EF82  F001         	goto	u550
   660  000300                     u551:
   661  000300  EF84  F001         	goto	l1280
   662  000304                     u550:
   663  000304  EFD4  F001         	goto	l1298
   664  000308                     l1280:
   665                           
   666                           ;WS2812b/BitBangWS2812b.c: 110:         WS_dim(0x00, 0x00, 0xFF, brightness);
   667  000308  0E00               	movlw	0
   668  00030A  6E19               	movwf	(WS_dim@A+1)^0,c
   669  00030C  0E00               	movlw	0
   670  00030E  6E18               	movwf	WS_dim@A^0,c
   671  000310  0E00               	movlw	0
   672  000312  6E1B               	movwf	(WS_dim@B+1)^0,c
   673  000314  0E00               	movlw	0
   674  000316  6E1A               	movwf	WS_dim@B^0,c
   675  000318  0E00               	movlw	0
   676  00031A  6E1D               	movwf	(WS_dim@C+1)^0,c
   677  00031C  681C               	setf	WS_dim@C^0,c
   678  00031E  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   679  000322  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   680  000326  EC7A  F002         	call	_WS_dim	;wreg free
   681  00032A                     
   682                           ;WS2812b/BitBangWS2812b.c: 111:         b++;
   683  00032A  4A2E               	infsnz	WSTest@b^0,f,c
   684  00032C  2A2F               	incf	(WSTest@b+1)^0,f,c
   685  00032E                     
   686                           ;WS2812b/BitBangWS2812b.c: 112:         if(b == length) break;
   687  00032E  5023               	movf	WSTest@length^0,w,c
   688  000330  182E               	xorwf	WSTest@b^0,w,c
   689  000332  E107               	bnz	u561
   690  000334  5024               	movf	(WSTest@length+1)^0,w,c
   691  000336  182F               	xorwf	(WSTest@b+1)^0,w,c
   692  000338  A4D8               	btfss	status,2,c
   693  00033A  EFA1  F001         	goto	u561
   694  00033E  EFA3  F001         	goto	u560
   695  000342                     u561:
   696  000342  EFA5  F001         	goto	l1288
   697  000346                     u560:
   698  000346  EFD4  F001         	goto	l1298
   699  00034A                     l1288:
   700                           
   701                           ;WS2812b/BitBangWS2812b.c: 113:         WS_dim(0xFF, 0x00, 0xFF, brightness);
   702  00034A  0E00               	movlw	0
   703  00034C  6E19               	movwf	(WS_dim@A+1)^0,c
   704  00034E  6818               	setf	WS_dim@A^0,c
   705  000350  0E00               	movlw	0
   706  000352  6E1B               	movwf	(WS_dim@B+1)^0,c
   707  000354  0E00               	movlw	0
   708  000356  6E1A               	movwf	WS_dim@B^0,c
   709  000358  0E00               	movlw	0
   710  00035A  6E1D               	movwf	(WS_dim@C+1)^0,c
   711  00035C  681C               	setf	WS_dim@C^0,c
   712  00035E  C025  F01E         	movff	WSTest@brightness,WS_dim@brightness
   713  000362  C026  F01F         	movff	WSTest@brightness+1,WS_dim@brightness+1
   714  000366  EC7A  F002         	call	_WS_dim	;wreg free
   715  00036A                     
   716                           ;WS2812b/BitBangWS2812b.c: 114:         b++;
   717  00036A  4A2E               	infsnz	WSTest@b^0,f,c
   718  00036C  2A2F               	incf	(WSTest@b+1)^0,f,c
   719  00036E                     
   720                           ;WS2812b/BitBangWS2812b.c: 115:         if(b == length) break;
   721  00036E  5023               	movf	WSTest@length^0,w,c
   722  000370  182E               	xorwf	WSTest@b^0,w,c
   723  000372  E107               	bnz	u571
   724  000374  5024               	movf	(WSTest@length+1)^0,w,c
   725  000376  182F               	xorwf	(WSTest@b+1)^0,w,c
   726  000378  A4D8               	btfss	status,2,c
   727  00037A  EFC1  F001         	goto	u571
   728  00037E  EFC3  F001         	goto	u570
   729  000382                     u571:
   730  000382  EFC5  F001         	goto	l1296
   731  000386                     u570:
   732  000386  EFD4  F001         	goto	l1298
   733  00038A                     l1296:
   734                           
   735                           ;WS2812b/BitBangWS2812b.c: 96:     while(b < length)
   736  00038A  5023               	movf	WSTest@length^0,w,c
   737  00038C  5C2E               	subwf	WSTest@b^0,w,c
   738  00038E  502F               	movf	(WSTest@b+1)^0,w,c
   739  000390  0A80               	xorlw	128
   740  000392  6E27               	movwf	??_WSTest^0,c
   741  000394  5024               	movf	(WSTest@length+1)^0,w,c
   742  000396  0A80               	xorlw	128
   743  000398  5827               	subwfb	??_WSTest^0,w,c
   744  00039A  A0D8               	btfss	status,0,c
   745  00039C  EFD2  F001         	goto	u581
   746  0003A0  EFD4  F001         	goto	u580
   747  0003A4                     u581:
   748  0003A4  EF02  F001         	goto	l1248
   749  0003A8                     u580:
   750  0003A8                     l1298:
   751                           
   752                           ;WS2812b/BitBangWS2812b.c: 118:     _delay((unsigned long)((60.000)*(32000000/4000.0)));
   753  0003A8  0E03               	movlw	3
   754  0003AA  6E28               	movwf	(??_WSTest+1)^0,c
   755  0003AC  0E70               	movlw	112
   756  0003AE  6E27               	movwf	??_WSTest^0,c
   757  0003B0  0E5C               	movlw	92
   758  0003B2                     u677:
   759  0003B2  2EE8               	decfsz	wreg,f,c
   760  0003B4  D7FE               	bra	u677
   761  0003B6  2E27               	decfsz	??_WSTest^0,f,c
   762  0003B8  D7FC               	bra	u677
   763  0003BA  2E28               	decfsz	(??_WSTest+1)^0,f,c
   764  0003BC  D7FA               	bra	u677
   765  0003BE  D000               	nop2	
   766                           
   767                           ;WS2812b/BitBangWS2812b.c: 119:     _delay((unsigned long)((250)*(32000000/4000.0)));
   768  0003C0  0E0B               	movlw	11
   769  0003C2  6E28               	movwf	(??_WSTest+1)^0,c
   770  0003C4  0E26               	movlw	38
   771  0003C6  6E27               	movwf	??_WSTest^0,c
   772  0003C8  0E5E               	movlw	94
   773  0003CA                     u687:
   774  0003CA  2EE8               	decfsz	wreg,f,c
   775  0003CC  D7FE               	bra	u687
   776  0003CE  2E27               	decfsz	??_WSTest^0,f,c
   777  0003D0  D7FC               	bra	u687
   778  0003D2  2E28               	decfsz	(??_WSTest+1)^0,f,c
   779  0003D4  D7FA               	bra	u687
   780  0003D6  0012               	return		;funcret
   781  0003D8                     __end_of_WSTest:
   782                           	callstack 0
   783                           
   784 ;; *************** function _WS_dim *****************
   785 ;; Defined at:
   786 ;;		line 10 in file "WS2812b/BitBangWS2812b.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  A               2   23[COMRAM] int 
   789 ;;  B               2   25[COMRAM] int 
   790 ;;  C               2   27[COMRAM] int 
   791 ;;  brightness      2   29[COMRAM] int 
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, status,2, status,0, cstack
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1
   803 ;;      Params:         8       0       0
   804 ;;      Locals:         0       0       0
   805 ;;      Temps:          3       0       0
   806 ;;      Totals:        11       0       0
   807 ;;Total ram usage:       11 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    5
   810 ;; This function calls:
   811 ;;		_WS_Word
   812 ;; This function is called by:
   813 ;;		_WSTest
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text2
   818  0004F4                     __ptext2:
   819                           	callstack 0
   820  0004F4                     _WS_dim:
   821                           	callstack 24
   822  0004F4                     
   823                           ;WS2812b/BitBangWS2812b.c: 10: void WS_dim(int A, int B, int C, int brightness);WS2812b/
      +                          BitBangWS2812b.c: 11: {;WS2812b/BitBangWS2812b.c: 12:     if( brightness > 0 && brightne
      +                          ss <=8)
   824  0004F4  BE1F               	btfsc	(WS_dim@brightness+1)^0,7,c
   825  0004F6  EF85  F002         	goto	u451
   826  0004FA  501F               	movf	(WS_dim@brightness+1)^0,w,c
   827  0004FC  E108               	bnz	u450
   828  0004FE  041E               	decf	WS_dim@brightness^0,w,c
   829  000500  A0D8               	btfss	status,0,c
   830  000502  EF85  F002         	goto	u451
   831  000506  EF87  F002         	goto	u450
   832  00050A                     u451:
   833  00050A  EFCE  F002         	goto	l1218
   834  00050E                     u450:
   835  00050E  BE1F               	btfsc	(WS_dim@brightness+1)^0,7,c
   836  000510  EF95  F002         	goto	u460
   837  000514  501F               	movf	(WS_dim@brightness+1)^0,w,c
   838  000516  E107               	bnz	u461
   839  000518  0E09               	movlw	9
   840  00051A  5C1E               	subwf	WS_dim@brightness^0,w,c
   841  00051C  B0D8               	btfsc	status,0,c
   842  00051E  EF93  F002         	goto	u461
   843  000522  EF95  F002         	goto	u460
   844  000526                     u461:
   845  000526  EFCE  F002         	goto	l1218
   846  00052A                     u460:
   847  00052A                     
   848                           ;WS2812b/BitBangWS2812b.c: 13:     {;WS2812b/BitBangWS2812b.c: 14:         A = A >> brig
      +                          htness;
   849  00052A  C01E  F020         	movff	WS_dim@brightness,??_WS_dim
   850  00052E  C018  F021         	movff	WS_dim@A,??_WS_dim+1
   851  000532  C019  F022         	movff	WS_dim@A+1,??_WS_dim+2
   852  000536  2A20               	incf	??_WS_dim^0,f,c
   853  000538  EFA1  F002         	goto	u474
   854  00053C                     u475:
   855  00053C  3422               	rlcf	(??_WS_dim+2)^0,w,c
   856  00053E  3222               	rrcf	(??_WS_dim+2)^0,f,c
   857  000540  3221               	rrcf	(??_WS_dim+1)^0,f,c
   858  000542                     u474:
   859  000542  2E20               	decfsz	??_WS_dim^0,f,c
   860  000544  EF9E  F002         	goto	u475
   861  000548  C021  F018         	movff	??_WS_dim+1,WS_dim@A
   862  00054C  C022  F019         	movff	??_WS_dim+2,WS_dim@A+1
   863                           
   864                           ;WS2812b/BitBangWS2812b.c: 15:         B = B >> brightness;
   865  000550  C01E  F020         	movff	WS_dim@brightness,??_WS_dim
   866  000554  C01A  F021         	movff	WS_dim@B,??_WS_dim+1
   867  000558  C01B  F022         	movff	WS_dim@B+1,??_WS_dim+2
   868  00055C  2A20               	incf	??_WS_dim^0,f,c
   869  00055E  EFB4  F002         	goto	u484
   870  000562                     u485:
   871  000562  3422               	rlcf	(??_WS_dim+2)^0,w,c
   872  000564  3222               	rrcf	(??_WS_dim+2)^0,f,c
   873  000566  3221               	rrcf	(??_WS_dim+1)^0,f,c
   874  000568                     u484:
   875  000568  2E20               	decfsz	??_WS_dim^0,f,c
   876  00056A  EFB1  F002         	goto	u485
   877  00056E  C021  F01A         	movff	??_WS_dim+1,WS_dim@B
   878  000572  C022  F01B         	movff	??_WS_dim+2,WS_dim@B+1
   879                           
   880                           ;WS2812b/BitBangWS2812b.c: 16:         C = C >> brightness;
   881  000576  C01E  F020         	movff	WS_dim@brightness,??_WS_dim
   882  00057A  C01C  F021         	movff	WS_dim@C,??_WS_dim+1
   883  00057E  C01D  F022         	movff	WS_dim@C+1,??_WS_dim+2
   884  000582  2A20               	incf	??_WS_dim^0,f,c
   885  000584  EFC7  F002         	goto	u494
   886  000588                     u495:
   887  000588  3422               	rlcf	(??_WS_dim+2)^0,w,c
   888  00058A  3222               	rrcf	(??_WS_dim+2)^0,f,c
   889  00058C  3221               	rrcf	(??_WS_dim+1)^0,f,c
   890  00058E                     u494:
   891  00058E  2E20               	decfsz	??_WS_dim^0,f,c
   892  000590  EFC4  F002         	goto	u495
   893  000594  C021  F01C         	movff	??_WS_dim+1,WS_dim@C
   894  000598  C022  F01D         	movff	??_WS_dim+2,WS_dim@C+1
   895  00059C                     l1218:
   896                           
   897                           ;WS2812b/BitBangWS2812b.c: 18:     WS_Word(A, B, C);
   898  00059C  C018  F005         	movff	WS_dim@A,WS_Word@A
   899  0005A0  C019  F006         	movff	WS_dim@A+1,WS_Word@A+1
   900  0005A4  C01A  F007         	movff	WS_dim@B,WS_Word@B
   901  0005A8  C01B  F008         	movff	WS_dim@B+1,WS_Word@B+1
   902  0005AC  C01C  F009         	movff	WS_dim@C,WS_Word@C
   903  0005B0  C01D  F00A         	movff	WS_dim@C+1,WS_Word@C+1
   904  0005B4  ECEC  F001         	call	_WS_Word	;wreg free
   905  0005B8  0012               	return		;funcret
   906  0005BA                     __end_of_WS_dim:
   907                           	callstack 0
   908                           
   909 ;; *************** function _WS_Word *****************
   910 ;; Defined at:
   911 ;;		line 21 in file "WS2812b/BitBangWS2812b.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;  A               2    4[COMRAM] int 
   914 ;;  B               2    6[COMRAM] int 
   915 ;;  C               2    8[COMRAM] int 
   916 ;; Auto vars:     Size  Location     Type
   917 ;;  x               2   17[COMRAM] int 
   918 ;;  x               2   15[COMRAM] int 
   919 ;;  x               2   13[COMRAM] int 
   920 ;;  i               2   21[COMRAM] int 
   921 ;;  Bx              2   19[COMRAM] int 
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1
   931 ;;      Params:         6       0       0
   932 ;;      Locals:        10       0       0
   933 ;;      Temps:          3       0       0
   934 ;;      Totals:        19       0       0
   935 ;;Total ram usage:       19 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    4
   938 ;; This function calls:
   939 ;;		_WS_Write
   940 ;; This function is called by:
   941 ;;		_WS_dim
   942 ;;		_WSTest
   943 ;;		_WSLoop
   944 ;;		_WS_White
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text3
   949  0003D8                     __ptext3:
   950                           	callstack 0
   951  0003D8                     _WS_Word:
   952                           	callstack 24
   953  0003D8                     
   954                           ;WS2812b/BitBangWS2812b.c: 30:     for(int i=23; i!=-1; i--)
   955  0003D8  0E00               	movlw	0
   956  0003DA  6E17               	movwf	(WS_Word@i+1)^0,c
   957  0003DC  0E17               	movlw	23
   958  0003DE  6E16               	movwf	WS_Word@i^0,c
   959  0003E0                     l1182:
   960                           
   961                           ;WS2812b/BitBangWS2812b.c: 31:     {;WS2812b/BitBangWS2812b.c: 32:         if(i>15)
   962  0003E0  BE17               	btfsc	(WS_Word@i+1)^0,7,c
   963  0003E2  EFFC  F001         	goto	u381
   964  0003E6  5017               	movf	(WS_Word@i+1)^0,w,c
   965  0003E8  E109               	bnz	u380
   966  0003EA  0E10               	movlw	16
   967  0003EC  5C16               	subwf	WS_Word@i^0,w,c
   968  0003EE  A0D8               	btfss	status,0,c
   969  0003F0  EFFC  F001         	goto	u381
   970  0003F4  EFFE  F001         	goto	u380
   971  0003F8                     u381:
   972  0003F8  EF19  F002         	goto	l1186
   973  0003FC                     u380:
   974  0003FC                     
   975                           ;WS2812b/BitBangWS2812b.c: 33:         {;WS2812b/BitBangWS2812b.c: 34:             int x
      +                           = i - 16;
   976  0003FC  0EF0               	movlw	240
   977  0003FE  2416               	addwf	WS_Word@i^0,w,c
   978  000400  6E0E               	movwf	WS_Word@x^0,c
   979  000402  0EFF               	movlw	255
   980  000404  2017               	addwfc	(WS_Word@i+1)^0,w,c
   981  000406  6E0F               	movwf	(WS_Word@x+1)^0,c
   982                           
   983                           ;WS2812b/BitBangWS2812b.c: 35:             Bx = 1 & ( A >> x );
   984  000408  C00E  F00B         	movff	WS_Word@x,??_WS_Word
   985  00040C  C005  F00C         	movff	WS_Word@A,??_WS_Word+1
   986  000410  C006  F00D         	movff	WS_Word@A+1,??_WS_Word+2
   987  000414  2A0B               	incf	??_WS_Word^0,f,c
   988  000416  EF10  F002         	goto	u394
   989  00041A                     u395:
   990  00041A  340D               	rlcf	(??_WS_Word+2)^0,w,c
   991  00041C  320D               	rrcf	(??_WS_Word+2)^0,f,c
   992  00041E  320C               	rrcf	(??_WS_Word+1)^0,f,c
   993  000420                     u394:
   994  000420  2E0B               	decfsz	??_WS_Word^0,f,c
   995  000422  EF0D  F002         	goto	u395
   996  000426  0E01               	movlw	1
   997  000428  140C               	andwf	(??_WS_Word+1)^0,w,c
   998  00042A  6E14               	movwf	WS_Word@Bx^0,c
   999  00042C  6A15               	clrf	(WS_Word@Bx+1)^0,c
  1000                           
  1001                           ;WS2812b/BitBangWS2812b.c: 36:         }
  1002  00042E  EF66  F002         	goto	l1198
  1003  000432                     l1186:
  1004  000432  BE17               	btfsc	(WS_Word@i+1)^0,7,c
  1005  000434  EF25  F002         	goto	u401
  1006  000438  5017               	movf	(WS_Word@i+1)^0,w,c
  1007  00043A  E109               	bnz	u400
  1008  00043C  0E08               	movlw	8
  1009  00043E  5C16               	subwf	WS_Word@i^0,w,c
  1010  000440  A0D8               	btfss	status,0,c
  1011  000442  EF25  F002         	goto	u401
  1012  000446  EF27  F002         	goto	u400
  1013  00044A                     u401:
  1014  00044A  EF42  F002         	goto	l1190
  1015  00044E                     u400:
  1016  00044E                     
  1017                           ;WS2812b/BitBangWS2812b.c: 38:         {;WS2812b/BitBangWS2812b.c: 39:             int x
      +                           = i - 8;
  1018  00044E  0EF8               	movlw	248
  1019  000450  2416               	addwf	WS_Word@i^0,w,c
  1020  000452  6E10               	movwf	WS_Word@x_241^0,c
  1021  000454  0EFF               	movlw	255
  1022  000456  2017               	addwfc	(WS_Word@i+1)^0,w,c
  1023  000458  6E11               	movwf	(WS_Word@x_241+1)^0,c
  1024                           
  1025                           ;WS2812b/BitBangWS2812b.c: 40:             Bx = 0b00000001 & ( B >> x );
  1026  00045A  C010  F00B         	movff	WS_Word@x_241,??_WS_Word
  1027  00045E  C007  F00C         	movff	WS_Word@B,??_WS_Word+1
  1028  000462  C008  F00D         	movff	WS_Word@B+1,??_WS_Word+2
  1029  000466  2A0B               	incf	??_WS_Word^0,f,c
  1030  000468  EF39  F002         	goto	u414
  1031  00046C                     u415:
  1032  00046C  340D               	rlcf	(??_WS_Word+2)^0,w,c
  1033  00046E  320D               	rrcf	(??_WS_Word+2)^0,f,c
  1034  000470  320C               	rrcf	(??_WS_Word+1)^0,f,c
  1035  000472                     u414:
  1036  000472  2E0B               	decfsz	??_WS_Word^0,f,c
  1037  000474  EF36  F002         	goto	u415
  1038  000478  0E01               	movlw	1
  1039  00047A  140C               	andwf	(??_WS_Word+1)^0,w,c
  1040  00047C  6E14               	movwf	WS_Word@Bx^0,c
  1041  00047E  6A15               	clrf	(WS_Word@Bx+1)^0,c
  1042                           
  1043                           ;WS2812b/BitBangWS2812b.c: 41:         }
  1044  000480  EF66  F002         	goto	l1198
  1045  000484                     l1190:
  1046  000484  BE17               	btfsc	(WS_Word@i+1)^0,7,c
  1047  000486  EF47  F002         	goto	u421
  1048  00048A  EF49  F002         	goto	u420
  1049  00048E                     u421:
  1050  00048E  EF62  F002         	goto	l1196
  1051  000492                     u420:
  1052  000492                     
  1053                           ;WS2812b/BitBangWS2812b.c: 43:         {;WS2812b/BitBangWS2812b.c: 44:             int x
      +                           = i;
  1054  000492  C016  F012         	movff	WS_Word@i,WS_Word@x_242
  1055  000496  C017  F013         	movff	WS_Word@i+1,WS_Word@x_242+1
  1056  00049A                     
  1057                           ;WS2812b/BitBangWS2812b.c: 45:             Bx = 0b00000001 & ( C >> x );
  1058  00049A  C012  F00B         	movff	WS_Word@x_242,??_WS_Word
  1059  00049E  C009  F00C         	movff	WS_Word@C,??_WS_Word+1
  1060  0004A2  C00A  F00D         	movff	WS_Word@C+1,??_WS_Word+2
  1061  0004A6  2A0B               	incf	??_WS_Word^0,f,c
  1062  0004A8  EF59  F002         	goto	u434
  1063  0004AC                     u435:
  1064  0004AC  340D               	rlcf	(??_WS_Word+2)^0,w,c
  1065  0004AE  320D               	rrcf	(??_WS_Word+2)^0,f,c
  1066  0004B0  320C               	rrcf	(??_WS_Word+1)^0,f,c
  1067  0004B2                     u434:
  1068  0004B2  2E0B               	decfsz	??_WS_Word^0,f,c
  1069  0004B4  EF56  F002         	goto	u435
  1070  0004B8  0E01               	movlw	1
  1071  0004BA  140C               	andwf	(??_WS_Word+1)^0,w,c
  1072  0004BC  6E14               	movwf	WS_Word@Bx^0,c
  1073  0004BE  6A15               	clrf	(WS_Word@Bx+1)^0,c
  1074                           
  1075                           ;WS2812b/BitBangWS2812b.c: 46:         }
  1076  0004C0  EF66  F002         	goto	l1198
  1077  0004C4                     l1196:
  1078                           
  1079                           ;WS2812b/BitBangWS2812b.c: 48:         {;WS2812b/BitBangWS2812b.c: 49:             Bx = 
      +                          1;
  1080  0004C4  0E00               	movlw	0
  1081  0004C6  6E15               	movwf	(WS_Word@Bx+1)^0,c
  1082  0004C8  0E01               	movlw	1
  1083  0004CA  6E14               	movwf	WS_Word@Bx^0,c
  1084  0004CC                     l1198:
  1085                           
  1086                           ;WS2812b/BitBangWS2812b.c: 51:         WS_Write(Bx);
  1087  0004CC  C014  F003         	movff	WS_Word@Bx,WS_Write@A
  1088  0004D0  C015  F004         	movff	WS_Word@Bx+1,WS_Write@A+1
  1089  0004D4  EC0B  F003         	call	_WS_Write	;wreg free
  1090  0004D8                     
  1091                           ;WS2812b/BitBangWS2812b.c: 52:     }
  1092  0004D8  0616               	decf	WS_Word@i^0,f,c
  1093  0004DA  A0D8               	btfss	status,0,c
  1094  0004DC  0617               	decf	(WS_Word@i+1)^0,f,c
  1095  0004DE  2816               	incf	WS_Word@i^0,w,c
  1096  0004E0  E106               	bnz	u441
  1097  0004E2  2817               	incf	(WS_Word@i+1)^0,w,c
  1098  0004E4  A4D8               	btfss	status,2,c
  1099  0004E6  EF77  F002         	goto	u441
  1100  0004EA  EF79  F002         	goto	u440
  1101  0004EE                     u441:
  1102  0004EE  EFF0  F001         	goto	l1182
  1103  0004F2                     u440:
  1104  0004F2  0012               	return		;funcret
  1105  0004F4                     __end_of_WS_Word:
  1106                           	callstack 0
  1107                           
  1108 ;; *************** function _WS_Write *****************
  1109 ;; Defined at:
  1110 ;;		line 56 in file "WS2812b/BitBangWS2812b.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  A               2    2[COMRAM] int 
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, status,2, status,0
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1
  1124 ;;      Params:         2       0       0
  1125 ;;      Locals:         0       0       0
  1126 ;;      Temps:          0       0       0
  1127 ;;      Totals:         2       0       0
  1128 ;;Total ram usage:        2 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    3
  1131 ;; This function calls:
  1132 ;;		Nothing
  1133 ;; This function is called by:
  1134 ;;		_WS_Word
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text4
  1139  000616                     __ptext4:
  1140                           	callstack 0
  1141  000616                     _WS_Write:
  1142                           	callstack 24
  1143  000616                     
  1144                           ;WS2812b/BitBangWS2812b.c: 56: void WS_Write( int A );WS2812b/BitBangWS2812b.c: 57: {;WS
      +                          2812b/BitBangWS2812b.c: 58:     if(A)
  1145  000616  5003               	movf	WS_Write@A^0,w,c
  1146  000618  1004               	iorwf	(WS_Write@A+1)^0,w,c
  1147  00061A  B4D8               	btfsc	status,2,c
  1148  00061C  EF12  F003         	goto	u371
  1149  000620  EF14  F003         	goto	u370
  1150  000624                     u371:
  1151  000624  EF1B  F003         	goto	l80
  1152  000628                     u370:
  1153  000628                     
  1154                           ;WS2812b/BitBangWS2812b.c: 59:     {;WS2812b/BitBangWS2812b.c: 60:         LATAbits.LATA
      +                          2 = 1;
  1155  000628  8489               	bsf	137,2,c	;volatile
  1156                           
  1157                           ;WS2812b/BitBangWS2812b.c: 61:         __nop();
  1158  00062A  F000               	nop	
  1159                           
  1160                           ;WS2812b/BitBangWS2812b.c: 62:         __nop();
  1161  00062C  F000               	nop	
  1162                           
  1163                           ;WS2812b/BitBangWS2812b.c: 63:         __nop();
  1164  00062E  F000               	nop	
  1165                           
  1166                           ;WS2812b/BitBangWS2812b.c: 64:         LATAbits.LATA2 = 0;
  1167  000630  9489               	bcf	137,2,c	;volatile
  1168                           
  1169                           ;WS2812b/BitBangWS2812b.c: 65:     }
  1170  000632  EF1D  F003         	goto	l82
  1171  000636                     l80:
  1172                           
  1173                           ;WS2812b/BitBangWS2812b.c: 67:     {;WS2812b/BitBangWS2812b.c: 68:         LATAbits.LATA
      +                          2 = 1;
  1174  000636  8489               	bsf	137,2,c	;volatile
  1175                           
  1176                           ;WS2812b/BitBangWS2812b.c: 69:         LATAbits.LATA2 = 0;
  1177  000638  9489               	bcf	137,2,c	;volatile
  1178  00063A                     l82:
  1179  00063A  0012               	return		;funcret
  1180  00063C                     __end_of_WS_Write:
  1181                           	callstack 0
  1182                           
  1183 ;; *************** function _SYSTEM_Initialize *****************
  1184 ;; Defined at:
  1185 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, status,0, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1
  1199 ;;      Params:         0       0       0
  1200 ;;      Locals:         0       0       0
  1201 ;;      Temps:          0       0       0
  1202 ;;      Totals:         0       0       0
  1203 ;;Total ram usage:        0 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    5
  1206 ;; This function calls:
  1207 ;;		_ADC1_Initialize
  1208 ;;		_INTERRUPT_Initialize
  1209 ;;		_OSCILLATOR_Initialize
  1210 ;;		_PIN_MANAGER_Initialize
  1211 ;; This function is called by:
  1212 ;;		_main
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text5
  1217  000680                     __ptext5:
  1218                           	callstack 0
  1219  000680                     _SYSTEM_Initialize:
  1220                           	callstack 25
  1221  000680                     
  1222                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
  1223  000680  EC5C  F003         	call	_INTERRUPT_Initialize	;wreg free
  1224  000684                     
  1225                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  1226  000684  ECF5  F002         	call	_PIN_MANAGER_Initialize	;wreg free
  1227  000688                     
  1228                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  1229  000688  EC50  F003         	call	_OSCILLATOR_Initialize	;wreg free
  1230  00068C                     
  1231                           ;mcc_generated_files/mcc.c: 56:     ADC1_Initialize();
  1232  00068C  EC1E  F003         	call	_ADC1_Initialize	;wreg free
  1233  000690  0012               	return		;funcret
  1234  000692                     __end_of_SYSTEM_Initialize:
  1235                           	callstack 0
  1236                           
  1237 ;; *************** function _PIN_MANAGER_Initialize *****************
  1238 ;; Defined at:
  1239 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;		None
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1
  1253 ;;      Params:         0       0       0
  1254 ;;      Locals:         0       0       0
  1255 ;;      Temps:          0       0       0
  1256 ;;      Totals:         0       0       0
  1257 ;;Total ram usage:        0 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    3
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_SYSTEM_Initialize
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text6
  1268  0005EA                     __ptext6:
  1269                           	callstack 0
  1270  0005EA                     _PIN_MANAGER_Initialize:
  1271                           	callstack 26
  1272  0005EA                     
  1273                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  1274  0005EA  0E00               	movlw	0
  1275  0005EC  6E89               	movwf	137,c	;volatile
  1276                           
  1277                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  1278  0005EE  0E00               	movlw	0
  1279  0005F0  6E8A               	movwf	138,c	;volatile
  1280                           
  1281                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  1282  0005F2  0E00               	movlw	0
  1283  0005F4  6E8B               	movwf	139,c	;volatile
  1284                           
  1285                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
  1286  0005F6  0E33               	movlw	51
  1287  0005F8  6E92               	movwf	146,c	;volatile
  1288                           
  1289                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xF0;
  1290  0005FA  0EF0               	movlw	240
  1291  0005FC  6E93               	movwf	147,c	;volatile
  1292  0005FE                     
  1293                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFF;
  1294  0005FE  6894               	setf	148,c	;volatile
  1295                           
  1296                           ;mcc_generated_files/pin_manager.c: 74:     ANSEL = 0xFB;
  1297  000600  0EFB               	movlw	251
  1298  000602  6E7E               	movwf	126,c	;volatile
  1299                           
  1300                           ;mcc_generated_files/pin_manager.c: 75:     ANSELH = 0x0F;
  1301  000604  0E0F               	movlw	15
  1302  000606  6E7F               	movwf	127,c	;volatile
  1303                           
  1304                           ;mcc_generated_files/pin_manager.c: 80:     WPUB = 0x00;
  1305  000608  0E00               	movlw	0
  1306  00060A  6E78               	movwf	120,c	;volatile
  1307                           
  1308                           ;mcc_generated_files/pin_manager.c: 81:     WPUA = 0x00;
  1309  00060C  0E00               	movlw	0
  1310  00060E  6E77               	movwf	119,c	;volatile
  1311  000610                     
  1312                           ;mcc_generated_files/pin_manager.c: 82:     INTCON2bits.nRBPU = 1;
  1313  000610  8EF1               	bsf	241,7,c	;volatile
  1314  000612                     
  1315                           ;mcc_generated_files/pin_manager.c: 91:     INTCONbits.RABIE = 1;
  1316  000612  86F2               	bsf	242,3,c	;volatile
  1317  000614  0012               	return		;funcret
  1318  000616                     __end_of_PIN_MANAGER_Initialize:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _OSCILLATOR_Initialize *****************
  1322 ;; Defined at:
  1323 ;;		line 59 in file "mcc_generated_files/mcc.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  1    wreg      void 
  1330 ;; Registers used:
  1331 ;;		wreg, status,2
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0   BANK1
  1337 ;;      Params:         0       0       0
  1338 ;;      Locals:         0       0       0
  1339 ;;      Temps:          0       0       0
  1340 ;;      Totals:         0       0       0
  1341 ;;Total ram usage:        0 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; Hardware stack levels required when called:    3
  1344 ;; This function calls:
  1345 ;;		Nothing
  1346 ;; This function is called by:
  1347 ;;		_SYSTEM_Initialize
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text7
  1352  0006A0                     __ptext7:
  1353                           	callstack 0
  1354  0006A0                     _OSCILLATOR_Initialize:
  1355                           	callstack 26
  1356  0006A0                     
  1357                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x70;
  1358  0006A0  0E70               	movlw	112
  1359  0006A2  6ED3               	movwf	211,c	;volatile
  1360                           
  1361                           ;mcc_generated_files/mcc.c: 64:     OSCCON2 = 0x04;
  1362  0006A4  0E04               	movlw	4
  1363  0006A6  6ED2               	movwf	210,c	;volatile
  1364                           
  1365                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  1366  0006A8  0E00               	movlw	0
  1367  0006AA  6E9B               	movwf	155,c	;volatile
  1368  0006AC  0012               	return		;funcret
  1369  0006AE                     __end_of_OSCILLATOR_Initialize:
  1370                           	callstack 0
  1371                           
  1372 ;; *************** function _INTERRUPT_Initialize *****************
  1373 ;; Defined at:
  1374 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;		None
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;		None
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		None
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1
  1388 ;;      Params:         0       0       0
  1389 ;;      Locals:         0       0       0
  1390 ;;      Temps:          0       0       0
  1391 ;;      Totals:         0       0       0
  1392 ;;Total ram usage:        0 bytes
  1393 ;; Hardware stack levels used:    1
  1394 ;; Hardware stack levels required when called:    3
  1395 ;; This function calls:
  1396 ;;		Nothing
  1397 ;; This function is called by:
  1398 ;;		_SYSTEM_Initialize
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           	psect	text8
  1403  0006B8                     __ptext8:
  1404                           	callstack 0
  1405  0006B8                     _INTERRUPT_Initialize:
  1406                           	callstack 26
  1407  0006B8                     
  1408                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
  1409  0006B8  9ED0               	bcf	208,7,c	;volatile
  1410  0006BA  0012               	return		;funcret
  1411  0006BC                     __end_of_INTERRUPT_Initialize:
  1412                           	callstack 0
  1413                           
  1414 ;; *************** function _ADC1_Initialize *****************
  1415 ;; Defined at:
  1416 ;;		line 62 in file "mcc_generated_files/adc1.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1
  1430 ;;      Params:         0       0       0
  1431 ;;      Locals:         0       0       0
  1432 ;;      Temps:          0       0       0
  1433 ;;      Totals:         0       0       0
  1434 ;;Total ram usage:        0 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    4
  1437 ;; This function calls:
  1438 ;;		_ADC1_SetInterruptHandler
  1439 ;; This function is called by:
  1440 ;;		_SYSTEM_Initialize
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text9
  1445  00063C                     __ptext9:
  1446                           	callstack 0
  1447  00063C                     _ADC1_Initialize:
  1448                           	callstack 25
  1449  00063C                     
  1450                           ;mcc_generated_files/adc1.c: 67:     ADCON1 = 0x00;
  1451  00063C  0E00               	movlw	0
  1452  00063E  6EC1               	movwf	193,c	;volatile
  1453                           
  1454                           ;mcc_generated_files/adc1.c: 70:     ADCON2 = 0xB8;
  1455  000640  0EB8               	movlw	184
  1456  000642  6EC0               	movwf	192,c	;volatile
  1457                           
  1458                           ;mcc_generated_files/adc1.c: 73:     ADRESL = 0x00;
  1459  000644  0E00               	movlw	0
  1460  000646  6EC3               	movwf	195,c	;volatile
  1461                           
  1462                           ;mcc_generated_files/adc1.c: 76:     ADRESH = 0x00;
  1463  000648  0E00               	movlw	0
  1464  00064A  6EC4               	movwf	196,c	;volatile
  1465                           
  1466                           ;mcc_generated_files/adc1.c: 79:     ADCON0 = 0x01;
  1467  00064C  0E01               	movlw	1
  1468  00064E  6EC2               	movwf	194,c	;volatile
  1469  000650                     
  1470                           ;mcc_generated_files/adc1.c: 82:     PIE1bits.ADIE = 1;
  1471  000650  8C9D               	bsf	157,6,c	;volatile
  1472  000652                     
  1473                           ;mcc_generated_files/adc1.c: 85:     ADC1_SetInterruptHandler(ADC1_DefaultInterruptHandl
      +                          er);
  1474  000652  0EC0               	movlw	low _ADC1_DefaultInterruptHandler
  1475  000654  6E03               	movwf	ADC1_SetInterruptHandler@InterruptHandler^0,c
  1476  000656  0E06               	movlw	high _ADC1_DefaultInterruptHandler
  1477  000658  6E04               	movwf	(ADC1_SetInterruptHandler@InterruptHandler+1)^0,c
  1478  00065A  EC57  F003         	call	_ADC1_SetInterruptHandler	;wreg free
  1479  00065E  0012               	return		;funcret
  1480  000660                     __end_of_ADC1_Initialize:
  1481                           	callstack 0
  1482                           
  1483 ;; *************** function _ADC1_SetInterruptHandler *****************
  1484 ;; Defined at:
  1485 ;;		line 151 in file "mcc_generated_files/adc1.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  InterruptHan    2    2[COMRAM] PTR FTN()void 
  1488 ;;		 -> ADC1_DefaultInterruptHandler(1), 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1
  1500 ;;      Params:         2       0       0
  1501 ;;      Locals:         0       0       0
  1502 ;;      Temps:          0       0       0
  1503 ;;      Totals:         2       0       0
  1504 ;;Total ram usage:        2 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    3
  1507 ;; This function calls:
  1508 ;;		Nothing
  1509 ;; This function is called by:
  1510 ;;		_ADC1_Initialize
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text10
  1515  0006AE                     __ptext10:
  1516                           	callstack 0
  1517  0006AE                     _ADC1_SetInterruptHandler:
  1518                           	callstack 25
  1519  0006AE                     
  1520                           ;mcc_generated_files/adc1.c: 152:     ADC1_InterruptHandler = InterruptHandler;
  1521  0006AE  C003  F030         	movff	ADC1_SetInterruptHandler@InterruptHandler,_ADC1_InterruptHandler
  1522  0006B2  C004  F031         	movff	ADC1_SetInterruptHandler@InterruptHandler+1,_ADC1_InterruptHandler+1
  1523  0006B6  0012               	return		;funcret
  1524  0006B8                     __end_of_ADC1_SetInterruptHandler:
  1525                           	callstack 0
  1526                           
  1527 ;; *************** function _INTERRUPT_InterruptManager *****************
  1528 ;; Defined at:
  1529 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;		None
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;		None
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      void 
  1536 ;; Registers used:
  1537 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1
  1543 ;;      Params:         0       0       0
  1544 ;;      Locals:         0       0       0
  1545 ;;      Temps:          2       0       0
  1546 ;;      Totals:         2       0       0
  1547 ;;Total ram usage:        2 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    2
  1550 ;; This function calls:
  1551 ;;		_ADC1_ISR
  1552 ;;		_PIN_MANAGER_IOC
  1553 ;; This function is called by:
  1554 ;;		Interrupt level 2
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	intcode
  1559  000008                     __pintcode:
  1560                           	callstack 0
  1561  000008                     _INTERRUPT_InterruptManager:
  1562                           	callstack 24
  1563                           
  1564                           ;incstack = 0
  1565  000008  8232               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1566  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
  1567  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  1568  000012                     
  1569                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.RABIE == 1 && INTCONbits
      +                          .RABIF == 1)
  1570  000012  A6F2               	btfss	242,3,c	;volatile
  1571  000014  EF0E  F000         	goto	i2u32_41
  1572  000018  EF10  F000         	goto	i2u32_40
  1573  00001C                     i2u32_41:
  1574  00001C  EF1B  F000         	goto	i2l208
  1575  000020                     i2u32_40:
  1576  000020  A0F2               	btfss	242,0,c	;volatile
  1577  000022  EF15  F000         	goto	i2u33_41
  1578  000026  EF17  F000         	goto	i2u33_40
  1579  00002A                     i2u33_41:
  1580  00002A  EF1B  F000         	goto	i2l208
  1581  00002E                     i2u33_40:
  1582  00002E                     
  1583                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         PIN_MANAGER_IOC();
  1584  00002E  EC5E  F003         	call	_PIN_MANAGER_IOC	;wreg free
  1585                           
  1586                           ;mcc_generated_files/interrupt_manager.c: 64:     }
  1587  000032  EF34  F000         	goto	i2l214
  1588  000036                     i2l208:
  1589  000036  ACF2               	btfss	242,6,c	;volatile
  1590  000038  EF20  F000         	goto	i2u34_41
  1591  00003C  EF22  F000         	goto	i2u34_40
  1592  000040                     i2u34_41:
  1593  000040  EF34  F000         	goto	i2l214
  1594  000044                     i2u34_40:
  1595  000044                     
  1596                           ;mcc_generated_files/interrupt_manager.c: 66:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 67:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  1597  000044  AC9D               	btfss	157,6,c	;volatile
  1598  000046  EF27  F000         	goto	i2u35_41
  1599  00004A  EF29  F000         	goto	i2u35_40
  1600  00004E                     i2u35_41:
  1601  00004E  EF34  F000         	goto	i2l213
  1602  000052                     i2u35_40:
  1603  000052  AC9E               	btfss	158,6,c	;volatile
  1604  000054  EF2E  F000         	goto	i2u36_41
  1605  000058  EF30  F000         	goto	i2u36_40
  1606  00005C                     i2u36_41:
  1607  00005C  EF34  F000         	goto	i2l213
  1608  000060                     i2u36_40:
  1609  000060                     
  1610                           ;mcc_generated_files/interrupt_manager.c: 68:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 69:             ADC1_ISR();
  1611  000060  ECDD  F002         	call	_ADC1_ISR	;wreg free
  1612                           
  1613                           ;mcc_generated_files/interrupt_manager.c: 70:         }
  1614  000064  EF34  F000         	goto	i2l214
  1615  000068                     i2l213:
  1616  000068                     i2l214:
  1617  000068  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  1618  00006C  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  1619  000070  9232               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1620  000072  0011               	retfie		f
  1621  000074                     __end_of_INTERRUPT_InterruptManager:
  1622                           	callstack 0
  1623                           
  1624 ;; *************** function _PIN_MANAGER_IOC *****************
  1625 ;; Defined at:
  1626 ;;		line 95 in file "mcc_generated_files/pin_manager.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;		None
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;		None
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      void 
  1633 ;; Registers used:
  1634 ;;		None
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1
  1640 ;;      Params:         0       0       0
  1641 ;;      Locals:         0       0       0
  1642 ;;      Temps:          0       0       0
  1643 ;;      Totals:         0       0       0
  1644 ;;Total ram usage:        0 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_INTERRUPT_InterruptManager
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text12
  1654  0006BC                     __ptext12:
  1655                           	callstack 0
  1656  0006BC                     _PIN_MANAGER_IOC:
  1657                           	callstack 25
  1658  0006BC                     
  1659                           ;mcc_generated_files/pin_manager.c: 98:     INTCONbits.RABIF = 0;
  1660  0006BC  90F2               	bcf	242,0,c	;volatile
  1661  0006BE  0012               	return		;funcret
  1662  0006C0                     __end_of_PIN_MANAGER_IOC:
  1663                           	callstack 0
  1664                           
  1665 ;; *************** function _ADC1_ISR *****************
  1666 ;; Defined at:
  1667 ;;		line 140 in file "mcc_generated_files/adc1.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1
  1681 ;;      Params:         0       0       0
  1682 ;;      Locals:         0       0       0
  1683 ;;      Temps:          0       0       0
  1684 ;;      Totals:         0       0       0
  1685 ;;Total ram usage:        0 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    1
  1688 ;; This function calls:
  1689 ;;		Absolute function
  1690 ;;		_ADC1_DefaultInterruptHandler
  1691 ;; This function is called by:
  1692 ;;		_INTERRUPT_InterruptManager
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text13
  1697  0005BA                     __ptext13:
  1698                           	callstack 0
  1699  0005BA                     _ADC1_ISR:
  1700                           	callstack 24
  1701  0005BA                     
  1702                           ;mcc_generated_files/adc1.c: 143:     PIR1bits.ADIF = 0;
  1703  0005BA  9C9E               	bcf	158,6,c	;volatile
  1704  0005BC                     
  1705                           ;mcc_generated_files/adc1.c: 145:  if(ADC1_InterruptHandler)
  1706  0005BC  5030               	movf	_ADC1_InterruptHandler^0,w,c
  1707  0005BE  1031               	iorwf	(_ADC1_InterruptHandler+1)^0,w,c
  1708  0005C0  B4D8               	btfsc	status,2,c
  1709  0005C2  EFE5  F002         	goto	i2u23_41
  1710  0005C6  EFE7  F002         	goto	i2u23_40
  1711  0005CA                     i2u23_41:
  1712  0005CA  EFF4  F002         	goto	i2l182
  1713  0005CE                     i2u23_40:
  1714  0005CE                     
  1715                           ;mcc_generated_files/adc1.c: 146:     {;mcc_generated_files/adc1.c: 147:         ADC1_In
      +                          terruptHandler();
  1716  0005CE  D802               	call	i2u24_48
  1717  0005D0  EFF4  F002         	goto	i2u24_49
  1718  0005D4                     i2u24_48:
  1719  0005D4  0005               	push	
  1720  0005D6  6EFA               	movwf	pclath,c
  1721  0005D8  5030               	movf	_ADC1_InterruptHandler^0,w,c
  1722  0005DA  6EFD               	movwf	tosl,c
  1723  0005DC  5031               	movf	(_ADC1_InterruptHandler+1)^0,w,c
  1724  0005DE  6EFE               	movwf	tosh,c
  1725  0005E0  50F8               	movf	tblptru,w,c
  1726  0005E2  6EFF               	movwf	tosu,c
  1727  0005E4  50FA               	movf	pclath,w,c
  1728  0005E6  0012               	return		;indir
  1729  0005E8                     i2u24_49:
  1730  0005E8                     i2l182:
  1731  0005E8  0012               	return		;funcret
  1732  0005EA                     __end_of_ADC1_ISR:
  1733                           	callstack 0
  1734                           
  1735 ;; *************** function _ADC1_DefaultInterruptHandler *****************
  1736 ;; Defined at:
  1737 ;;		line 155 in file "mcc_generated_files/adc1.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;		None
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		None
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1
  1751 ;;      Params:         0       0       0
  1752 ;;      Locals:         0       0       0
  1753 ;;      Temps:          0       0       0
  1754 ;;      Totals:         0       0       0
  1755 ;;Total ram usage:        0 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_ADC1_Initialize
  1761 ;;		_ADC1_ISR
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text14
  1766  0006C0                     __ptext14:
  1767                           	callstack 0
  1768  0006C0                     _ADC1_DefaultInterruptHandler:
  1769                           	callstack 24
  1770  0006C0  0012               	return		;funcret
  1771  0006C2                     __end_of_ADC1_DefaultInterruptHandler:
  1772                           	callstack 0
  1773  0000                     
  1774                           	psect	text15
  1775  000000                     __ptext15:
  1776                           	callstack 0
  1777  000000                     
  1778                           	psect	rparam
  1779  0000                     
  1780                           	psect	temp
  1781  000032                     btemp:
  1782                           	callstack 0
  1783  000032                     	ds	1
  1784  0000                     int$flags	set	btemp
  1785  0000                     wtemp8	set	btemp+1
  1786  0000                     ttemp5	set	btemp+1
  1787  0000                     ttemp6	set	btemp+4
  1788  0000                     ttemp7	set	btemp+8
  1789                           
  1790                           	psect	idloc
  1791                           
  1792                           ;Config register IDLOC0 @ 0x200000
  1793                           ;	unspecified, using default values
  1794  200000                     	org	2097152
  1795  200000  FF                 	db	255
  1796                           
  1797                           ;Config register IDLOC1 @ 0x200001
  1798                           ;	unspecified, using default values
  1799  200001                     	org	2097153
  1800  200001  FF                 	db	255
  1801                           
  1802                           ;Config register IDLOC2 @ 0x200002
  1803                           ;	unspecified, using default values
  1804  200002                     	org	2097154
  1805  200002  FF                 	db	255
  1806                           
  1807                           ;Config register IDLOC3 @ 0x200003
  1808                           ;	unspecified, using default values
  1809  200003                     	org	2097155
  1810  200003  FF                 	db	255
  1811                           
  1812                           ;Config register IDLOC4 @ 0x200004
  1813                           ;	unspecified, using default values
  1814  200004                     	org	2097156
  1815  200004  FF                 	db	255
  1816                           
  1817                           ;Config register IDLOC5 @ 0x200005
  1818                           ;	unspecified, using default values
  1819  200005                     	org	2097157
  1820  200005  FF                 	db	255
  1821                           
  1822                           ;Config register IDLOC6 @ 0x200006
  1823                           ;	unspecified, using default values
  1824  200006                     	org	2097158
  1825  200006  FF                 	db	255
  1826                           
  1827                           ;Config register IDLOC7 @ 0x200007
  1828                           ;	unspecified, using default values
  1829  200007                     	org	2097159
  1830  200007  FF                 	db	255
  1831                           
  1832                           	psect	config
  1833                           
  1834                           ; Padding undefined space
  1835  300000                     	org	3145728
  1836  300000  FF                 	db	255
  1837                           
  1838                           ;Config register CONFIG1H @ 0x300001
  1839                           ;	Oscillator Selection bits
  1840                           ;	FOSC = IRC, Internal RC oscillator
  1841                           ;	4 X PLL Enable bit
  1842                           ;	PLLEN = OFF, PLL is under software control
  1843                           ;	Primary Clock Enable bit
  1844                           ;	PCLKEN = ON, Primary clock enabled
  1845                           ;	Fail-Safe Clock Monitor Enable
  1846                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1847                           ;	Internal/External Oscillator Switchover bit
  1848                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1849  300001                     	org	3145729
  1850  300001  28                 	db	40
  1851                           
  1852                           ;Config register CONFIG2L @ 0x300002
  1853                           ;	Power-up Timer Enable bit
  1854                           ;	PWRTEN = OFF, PWRT disabled
  1855                           ;	Brown-out Reset Enable bits
  1856                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1857                           ;	Brown Out Reset Voltage bits
  1858                           ;	BORV = 19, VBOR set to 1.9 V nominal
  1859  300002                     	org	3145730
  1860  300002  1F                 	db	31
  1861                           
  1862                           ;Config register CONFIG2H @ 0x300003
  1863                           ;	Watchdog Timer Enable bit
  1864                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  1865                           ;	Watchdog Timer Postscale Select bits
  1866                           ;	WDTPS = 32768, 1:32768
  1867  300003                     	org	3145731
  1868  300003  1E                 	db	30
  1869                           
  1870                           ; Padding undefined space
  1871  300004                     	org	3145732
  1872  300004  FF                 	db	255
  1873                           
  1874                           ;Config register CONFIG3H @ 0x300005
  1875                           ;	HFINTOSC Fast Start-up bit
  1876                           ;	HFOFST = ON, HFINTOSC starts clocking the CPU without waiting for the oscillator to st
      +                          ablize.
  1877                           ;	MCLR Pin Enable bit
  1878                           ;	MCLRE = ON, MCLR pin enabled, RA3 input pin disabled
  1879  300005                     	org	3145733
  1880  300005  88                 	db	136
  1881                           
  1882                           ;Config register CONFIG4L @ 0x300006
  1883                           ;	Stack Full/Underflow Reset Enable bit
  1884                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1885                           ;	Single-Supply ICSP Enable bit
  1886                           ;	LVP = ON, Single-Supply ICSP enabled
  1887                           ;	Boot Block Size Select bit
  1888                           ;	BBSIZ = OFF, 1kW boot block size
  1889                           ;	Extended Instruction Set Enable bit
  1890                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1891                           ;	Background Debugger Enable bit
  1892                           ;	DEBUG = OFF, Background debugger disabled, RA0 and RA1 configured as general purpose I
      +                          /O pins
  1893  300006                     	org	3145734
  1894  300006  85                 	db	133
  1895                           
  1896                           ; Padding undefined space
  1897  300007                     	org	3145735
  1898  300007  FF                 	db	255
  1899                           
  1900                           ;Config register CONFIG5L @ 0x300008
  1901                           ;	Code Protection bit
  1902                           ;	CP0 = OFF, Block 0 not code-protected
  1903                           ;	Code Protection bit
  1904                           ;	CP1 = OFF, Block 1 not code-protected
  1905  300008                     	org	3145736
  1906  300008  03                 	db	3
  1907                           
  1908                           ;Config register CONFIG5H @ 0x300009
  1909                           ;	Boot Block Code Protection bit
  1910                           ;	CPB = OFF, Boot block not code-protected
  1911                           ;	Data EEPROM Code Protection bit
  1912                           ;	CPD = OFF, Data EEPROM not code-protected
  1913  300009                     	org	3145737
  1914  300009  C0                 	db	192
  1915                           
  1916                           ;Config register CONFIG6L @ 0x30000A
  1917                           ;	Write Protection bit
  1918                           ;	WRT0 = OFF, Block 0 not write-protected
  1919                           ;	Write Protection bit
  1920                           ;	WRT1 = OFF, Block 1 not write-protected
  1921  30000A                     	org	3145738
  1922  30000A  03                 	db	3
  1923                           
  1924                           ;Config register CONFIG6H @ 0x30000B
  1925                           ;	Configuration Register Write Protection bit
  1926                           ;	WRTC = OFF, Configuration registers not write-protected
  1927                           ;	Boot Block Write Protection bit
  1928                           ;	WRTB = OFF, Boot block not write-protected
  1929                           ;	Data EEPROM Write Protection bit
  1930                           ;	WRTD = OFF, Data EEPROM not write-protected
  1931  30000B                     	org	3145739
  1932  30000B  E0                 	db	224
  1933                           
  1934                           ;Config register CONFIG7L @ 0x30000C
  1935                           ;	Table Read Protection bit
  1936                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  1937                           ;	Table Read Protection bit
  1938                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  1939  30000C                     	org	3145740
  1940  30000C  03                 	db	3
  1941                           
  1942                           ;Config register CONFIG7H @ 0x30000D
  1943                           ;	Boot Block Table Read Protection bit
  1944                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  1945  30000D                     	org	3145741
  1946  30000D  40                 	db	64
  1947                           tosu	equ	0xFFF
  1948                           tosh	equ	0xFFE
  1949                           tosl	equ	0xFFD
  1950                           stkptr	equ	0xFFC
  1951                           pclatu	equ	0xFFB
  1952                           pclath	equ	0xFFA
  1953                           pcl	equ	0xFF9
  1954                           tblptru	equ	0xFF8
  1955                           tblptrh	equ	0xFF7
  1956                           tblptrl	equ	0xFF6
  1957                           tablat	equ	0xFF5
  1958                           prodh	equ	0xFF4
  1959                           prodl	equ	0xFF3
  1960                           indf0	equ	0xFEF
  1961                           postinc0	equ	0xFEE
  1962                           postdec0	equ	0xFED
  1963                           preinc0	equ	0xFEC
  1964                           plusw0	equ	0xFEB
  1965                           fsr0h	equ	0xFEA
  1966                           fsr0l	equ	0xFE9
  1967                           wreg	equ	0xFE8
  1968                           indf1	equ	0xFE7
  1969                           postinc1	equ	0xFE6
  1970                           postdec1	equ	0xFE5
  1971                           preinc1	equ	0xFE4
  1972                           plusw1	equ	0xFE3
  1973                           fsr1h	equ	0xFE2
  1974                           fsr1l	equ	0xFE1
  1975                           bsr	equ	0xFE0
  1976                           indf2	equ	0xFDF
  1977                           postinc2	equ	0xFDE
  1978                           postdec2	equ	0xFDD
  1979                           preinc2	equ	0xFDC
  1980                           plusw2	equ	0xFDB
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      49
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    ADC1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC1_DefaultInterruptHandler(), 

    ADC1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ADC1_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_WSTest
    _WSTest->_WS_dim
    _WS_dim->_WS_Word
    _WS_Word->_WS_Write
    _ADC1_Initialize->_ADC1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26210
                  _SYSTEM_Initialize
                             _WSTest
 ---------------------------------------------------------------------------------
 (1) _WSTest                                              13     9      4   26112
                                             34 COMRAM    13     9      4
                            _WS_Word
                             _WS_dim
 ---------------------------------------------------------------------------------
 (2) _WS_dim                                              11     3      8   14591
                                             23 COMRAM    11     3      8
                            _WS_Word
 ---------------------------------------------------------------------------------
 (3) _WS_Word                                             19    13      6   10698
                                              4 COMRAM    19    13      6
                           _WS_Write
 ---------------------------------------------------------------------------------
 (4) _WS_Write                                             2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0      98
           _ADC1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _ADC1_SetInterruptHandler                             2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           2     2      0       0
                                              0 COMRAM     2     2      0
                           _ADC1_ISR
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ADC1_ISR                                             0     0      0       0
                   Absolute function *
       _ADC1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _ADC1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
       _ADC1_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _WSTest
     _WS_Word
       _WS_Write
     _WS_dim
       _WS_Word
         _WS_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC1_ISR
     Absolute function(Fake) *
     _ADC1_DefaultInterruptHandler *
   _PIN_MANAGER_IOC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     2F      31       1       52.1%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
ABS                  0      0      31       7        0.0%
BIGRAM             1FF      0       0       8        0.0%
DATA                 0      0      31       9        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Nov 17 23:41:56 2020

                                      l20 06AC                                        l17 0690  
                                      l47 0614                                        l80 0636  
                                      l82 063A                                        l66 05B8  
                                      l77 04F2                                       l100 03D6  
                                     l203 06BA                                       l127 0664  
                                     l157 065E                                       l185 06B6  
                                     l930 0610                                       l924 06B8  
                                     l932 0612                                       l934 06A0  
                                     l926 05EA                                       l928 05FE  
                                     _GIE 007F97                                       u400 044E  
                                     u401 044A                                       u420 0492  
                                     u500 00C2                                       u421 048E  
                                     u501 00BE                                       u414 0472  
                                     u510 0200                                       u415 046C  
                                     u511 01FC                                       u440 04F2  
                                     u520 0242                                       u441 04EE  
                                     u521 023E                                       u370 0628  
                                     u434 04B2                                       u450 050E  
                                     u530 0282                                       u371 0624  
                                     u435 04AC                                       u451 050A  
                                     u531 027E                                       u380 03FC  
                                     u460 052A                                       u540 02C4  
                                     u381 03F8                                       u461 0526  
                                     u541 02C0                                       u550 0304  
                                     u551 0300                                       u560 0346  
                                     u561 0342                                       u394 0420  
                                     u474 0542                                       u570 0386  
                                     u395 041A                                       u475 053C  
                                     u571 0382                                       u484 0568  
                                     u580 03A8                                       u485 0562  
                                     u581 03A4                                       u494 058E  
                                     u495 0588                                       u657 00CC  
                                     u667 00E4                                       u677 03B2  
                                     u687 03CA                                       tosl 000FFD  
                                     wreg 000FE8                  _ADC1_SetInterruptHandler 06AE  
                                    l1200 04D8                                      l1210 0652  
                                    l1202 04DE                                      l1204 06AE  
                                    l1220 0680                                      l1212 04F4  
                                    l1206 063C                                      l1222 0684  
                                    l1214 050E                                      l1230 0084  
                                    l1208 0650                                      l1224 0688  
                                    l1216 052A                                      l1240 00F0  
                                    l1232 00A0                                      l1226 068C  
                                    l1218 059C                                      l1250 0226  
                                    l1242 00FC                                      l1234 00A4  
                                    l1172 0616                                      l1260 026A  
                                    l1252 022A                                      l1244 01C2  
                                    l1236 00C2                                      l1228 0078  
                                    l1174 0628                                      l1190 0484  
                                    l1182 03E0                                      l1246 01CA  
                                    l1238 00F0                                      l1192 0492  
                                    l1184 03FC                                      l1176 03D8  
                                    l1280 0308                                      l1272 02C8  
                                    l1264 0286                                      l1256 0246  
                                    l1248 0204                                      l1194 049A  
                                    l1186 0432                                      l1290 036A  
                                    l1282 032A                                      l1274 02E8  
                                    l1266 02A8                                      l1258 0266  
                                    l1196 04C4                                      l1188 044E  
                                    l1292 036E                                      l1284 032E  
                                    l1276 02EC                                      l1268 02AC  
                                    l1198 04CC                                      l1288 034A  
                                    l1296 038A                                      l1298 03A8  
                                    l1394 0660                          __end_of_ADC1_ISR 05EA  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      i2l50 06BE  
                                    _WPUA 000F77                                      _WPUB 000F78  
                                    _main 0660                                      btemp 0032  
                                    start 0074                           __end_of_WS_Word 04F4  
                            ___param_bank 000000            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 06AE                                     ?_main 0001  
                                   _ANSEL 000F7E                                     i2l213 0068  
                                   i2l214 0068                                     i2l208 0036  
                                   i2l182 05E8                                     i2l188 06C0  
                                   i2l958 06BC                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                 __end_of_PIN_MANAGER_IOC 06C0                                     pclath 000FFA  
                                   ttemp5 0033                                     ttemp6 0036  
                                   ttemp7 003A                                     status 000FD8  
                                   wtemp8 0033                          WS_dim@brightness 001E  
                         __initialization 0692                          __end_of_WS_Write 063C  
                            __end_of_main 0680               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 0030                             __activetblptr 000002  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _ANSELH 000F7F  
                                  i2l1032 05BA                                    i2l1034 05BC  
                                  i2l1036 05CE                                    i2l1160 0012  
                                  i2l1170 0060                                    i2l1162 0020  
                                  i2l1164 002E                                    i2l1166 0044  
                                  i2l1168 0052                                    _OSCCON 000FD3  
                               ??_WS_Word 000B                                    _WSTest 0078  
                                  _WS_dim 04F4                          WSTest@brightness 0025  
                               ?_ADC1_ISR 0001                  __size_of_ADC1_Initialize 0024  
                                  tblptru 000FF8  ADC1_SetInterruptHandler@InterruptHandler 0003  
                        ?_PIN_MANAGER_IOC 0001             __size_of_INTERRUPT_Initialize 0004  
                       _SYSTEM_Initialize 0680           fp__ADC1_DefaultInterruptHandler 0000  
           ?_ADC1_DefaultInterruptHandler 0001                                __accesstop 0060  
                 __end_of__initialization 0692                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001                            __pcstackCOMRAM 0001  
                     ??_SYSTEM_Initialize 0005                                ??_ADC1_ISR 0001  
              ??_ADC1_SetInterruptHandler 0005                 __end_of_SYSTEM_Initialize 0692  
                               ?_WS_Write 0003                                __pnvCOMRAM 0030  
                                 ?_WSTest 0023                                   ?_WS_dim 0018  
                                 _OSCCON2 000FD2                                   i2u23_40 05CE  
                                 i2u23_41 05CA                                   i2u32_40 0020  
                                 i2u32_41 001C                                   i2u24_48 05D4  
                                 i2u33_40 002E                                   i2u24_49 05E8  
                                 i2u33_41 002A                                   i2u34_40 0044  
                                 i2u34_41 0040                                   i2u35_40 0052  
                                 i2u35_41 004E                                   i2u36_40 0060  
                                 i2u36_41 005C                                   _OSCTUNE 000F9B  
                       ??_ADC1_Initialize 0005                                   WSTest@b 002E  
                                 WSTest@i 002C                                   WS_dim@A 0018  
                                 WS_dim@B 001A                                   WS_dim@C 001C  
                              ??_WS_Write 0005                                   _WS_Word 03D8  
                         __size_of_WSTest 0360                                   __Hparam 0000  
          ??_ADC1_DefaultInterruptHandler 0001                           __size_of_WS_dim 00C6  
                                 __Lparam 0000                                   __pcinit 0692  
                                 __ramtop 0200                                   __ptext0 0660  
                                 __ptext1 0078                                   __ptext2 04F4  
                                 __ptext3 03D8                                   __ptext4 0616  
                                 __ptext5 0680                                   __ptext6 05EA  
                                 __ptext7 06A0                                   __ptext8 06B8  
                                 __ptext9 063C                     _OSCILLATOR_Initialize 06A0  
                ??_PIN_MANAGER_Initialize 0003                __size_of_SYSTEM_Initialize 0012  
                    end_of_initialization 0692                             __Lmediumconst 0000  
                   _ADC1_InterruptHandler 0030                         __size_of_ADC1_ISR 0030  
                               WS_Word@Bx 0014                                 WS_Write@A 0003  
                          __end_of_WSTest 03D8                            __end_of_WS_dim 05BA  
            __end_of_INTERRUPT_Initialize 06BC                    ?_OSCILLATOR_Initialize 0001  
                     start_initialization 0692           __size_of_PIN_MANAGER_Initialize 002C  
                       __size_of_WS_Write 0026                  __size_of_PIN_MANAGER_IOC 0004  
                                ??_WSTest 0027                                  ??_WS_dim 0020  
                         _ADC1_Initialize 063C         __size_of_ADC1_SetInterruptHandler 000A  
               ?_ADC1_SetInterruptHandler 0003                                  ?_WS_Word 0005  
                  _PIN_MANAGER_Initialize 05EA                                 __pintcode 0008  
                                _ADC1_ISR 05BA              ??_INTERRUPT_InterruptManager 0001  
                    _INTERRUPT_Initialize 06B8                                  _LATAbits 000F89  
                                _PIE1bits 000F9D       __size_of_INTERRUPT_InterruptManager 006C  
                 __end_of_ADC1_Initialize 0660                                  _PIR1bits 000F9E  
                                _RCONbits 000FD0                         ??_PIN_MANAGER_IOC 0001  
                                WS_Word@A 0005                                  WS_Word@B 0007  
                                WS_Word@C 0009                                  WS_Word@i 0016  
                                WS_Word@x 000E                                _ADCON0bits 000FC2  
    __end_of_ADC1_DefaultInterruptHandler 06C2     __size_of_ADC1_DefaultInterruptHandler 0002  
            _ADC1_DefaultInterruptHandler 06C0                               _INTCON2bits 000FF1  
                   ?_INTERRUPT_Initialize 0001                                  _WS_Write 0616  
                        __size_of_WS_Word 011C                                  __Hrparam 0000  
                                __Lrparam 0000                   ??_OSCILLATOR_Initialize 0003  
                                __ptext10 06AE                                  __ptext12 06BC  
                                __ptext13 05BA                                  __ptext14 06C0  
                                __ptext15 0000                             __size_of_main 0020  
                        ?_ADC1_Initialize 0001                                  int$flags 0032  
      __end_of_INTERRUPT_InterruptManager 0074                _INTERRUPT_InterruptManager 0008  
                            WSTest@length 0023          __end_of_ADC1_SetInterruptHandler 06B8  
                              _INTCONbits 000FF2                    ??_INTERRUPT_Initialize 0003  
                                intlevel2 0000                   ?_PIN_MANAGER_Initialize 0001  
                            WS_Word@x_241 0010                              WS_Word@x_242 0012  
          __end_of_PIN_MANAGER_Initialize 0616                           _PIN_MANAGER_IOC 06BC  
