

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Dec 08 01:07:16 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.20
    37                           ; Generated 05/05/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F14K22 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	smallconst
    72  000200                     __psmallconst:
    73                           	callstack 0
    74  000200  00                 	db	0
    75  000201  0000               	dw	0
    76  000203  0000               	dw	0
    77  000205  0000               	dw	0
    78  000207  0000               	dw	0
    79  000209  0000               	dw	0
    80  00020B  0000               	dw	0
    81  00020D  0000               	dw	0
    82  00020F  0000               	dw	0
    83  000211  0000               	dw	0
    84  000213  0000               	dw	0
    85  000215  0000               	dw	0
    86  000217  0000               	dw	0
    87  000219  0000               	dw	0
    88  00021B  0000               	dw	0
    89  00021D  0000               	dw	0
    90  00021F  0000               	dw	0
    91  000221  0000               	dw	0
    92  000223  0000               	dw	0
    93  000225  0000               	dw	0
    94  000227  0000               	dw	0
    95  000229  0000               	dw	0
    96  00022B                     __end_of_ColorSetB@BitBangWS2812b$F789:
    97                           	callstack 0
    98  00022B                     _ColorSetB:
    99                           	callstack 0
   100  00022B  00FF               	dw	255
   101  00022D  0000               	dw	0
   102  00022F  0000               	dw	0
   103  000231  00FF               	dw	255
   104  000233  00FF               	dw	255
   105  000235  0000               	dw	0
   106  000237  0000               	dw	0
   107  000239  00FF               	dw	255
   108  00023B  0000               	dw	0
   109  00023D  0000               	dw	0
   110  00023F  00FF               	dw	255
   111  000241  00FF               	dw	255
   112  000243  0000               	dw	0
   113  000245  0000               	dw	0
   114  000247  00FF               	dw	255
   115  000249  00FF               	dw	255
   116  00024B  0000               	dw	0
   117  00024D  00FF               	dw	255
   118  00024F  0000               	dw	0
   119  000251  0000               	dw	0
   120  000253  0000               	dw	0
   121  000255                     __end_of_ColorSetB:
   122                           	callstack 0
   123  000255  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	nvCOMRAM
   126  000040                     __pnvCOMRAM:
   127                           	callstack 0
   128  000040                     _ADC1_InterruptHandler:
   129                           	callstack 0
   130  000040                     	ds	2
   131  0000                     _PORTAbits	set	3968
   132  0000                     _LATCbits	set	3979
   133  0000                     _LATAbits	set	3977
   134  0000                     _RCONbits	set	4048
   135  0000                     _PIR1bits	set	3998
   136  0000                     _ADCON0bits	set	4034
   137  0000                     _PIE1bits	set	3997
   138  0000                     _ADCON0	set	4034
   139  0000                     _ADRESH	set	4036
   140  0000                     _ADRESL	set	4035
   141  0000                     _ADCON2	set	4032
   142  0000                     _ADCON1	set	4033
   143  0000                     _INTCONbits	set	4082
   144  0000                     _INTCON2bits	set	4081
   145  0000                     _WPUA	set	3959
   146  0000                     _WPUB	set	3960
   147  0000                     _ANSELH	set	3967
   148  0000                     _ANSEL	set	3966
   149  0000                     _TRISC	set	3988
   150  0000                     _TRISB	set	3987
   151  0000                     _TRISA	set	3986
   152  0000                     _LATC	set	3979
   153  0000                     _LATB	set	3978
   154  0000                     _LATA	set	3977
   155  0000                     _OSCTUNE	set	3995
   156  0000                     _OSCCON2	set	4050
   157  0000                     _OSCCON	set	4051
   158  0000                     _GIE	set	32663
   159                           
   160                           ; #config settings
   161                           
   162                           	psect	cinit
   163  000C48                     __pcinit:
   164                           	callstack 0
   165  000C48                     start_initialization:
   166                           	callstack 0
   167  000C48                     __initialization:
   168                           	callstack 0
   169  000C48                     end_of_initialization:
   170                           	callstack 0
   171  000C48                     __end_of__initialization:
   172                           	callstack 0
   173  000C48  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   174  000C4A  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   175  000C4C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   176  000C4E  6EF8               	movwf	tblptru,c
   177  000C50  0100               	movlb	0
   178  000C52  EF67  F003         	goto	_main	;jump to C main() function
   179                           
   180                           	psect	cstackCOMRAM
   181  000001                     __pcstackCOMRAM:
   182                           	callstack 0
   183  000001                     ??_INTERRUPT_InterruptManager:
   184  000001                     
   185                           ; 1 bytes @ 0x0
   186  000001                     	ds	2
   187  000003                     ??_ADC1_SelectChannel:
   188  000003                     ?_ADC1_GetConversion:
   189                           	callstack 0
   190  000003                     ?___wmul:
   191                           	callstack 0
   192  000003                     ADC1_SetInterruptHandler@InterruptHandler:
   193                           	callstack 0
   194  000003                     WS_Write@A:
   195                           	callstack 0
   196  000003                     ___wmul@multiplier:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x2
   200  000003                     	ds	1
   201  000004                     ADC1_SelectChannel@channel:
   202                           	callstack 0
   203                           
   204                           ; 1 bytes @ 0x3
   205  000004                     	ds	1
   206  000005                     ??_ADC1_GetConversion:
   207  000005                     WS_Word@A:
   208                           	callstack 0
   209  000005                     ___wmul@multiplicand:
   210                           	callstack 0
   211                           
   212                           ; 2 bytes @ 0x4
   213  000005                     	ds	2
   214  000007                     ADC1_GetConversion@channel:
   215                           	callstack 0
   216  000007                     WS_Word@B:
   217                           	callstack 0
   218  000007                     ___wmul@product:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x6
   222  000007                     	ds	2
   223  000009                     WS_Word@C:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x8
   227  000009                     	ds	2
   228  00000B                     ??_WS_Word:
   229                           
   230                           ; 1 bytes @ 0xA
   231  00000B                     	ds	3
   232  00000E                     WS_Word@x:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0xD
   236  00000E                     	ds	2
   237  000010                     WS_Word@x_591:
   238                           	callstack 0
   239                           
   240                           ; 2 bytes @ 0xF
   241  000010                     	ds	2
   242  000012                     WS_Word@x_592:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x11
   246  000012                     	ds	2
   247  000014                     WS_Word@Bx:
   248                           	callstack 0
   249                           
   250                           ; 2 bytes @ 0x13
   251  000014                     	ds	2
   252  000016                     WS_Word@i:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x15
   256  000016                     	ds	2
   257  000018                     WS_dim@A:
   258                           	callstack 0
   259                           
   260                           ; 2 bytes @ 0x17
   261  000018                     	ds	2
   262  00001A                     WS_dim@B:
   263                           	callstack 0
   264                           
   265                           ; 2 bytes @ 0x19
   266  00001A                     	ds	2
   267  00001C                     WS_dim@C:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x1B
   271  00001C                     	ds	2
   272  00001E                     WS_dim@brightness:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x1D
   276  00001E                     	ds	2
   277  000020                     ??_WS_dim:
   278                           
   279                           ; 1 bytes @ 0x1F
   280  000020                     	ds	1
   281  000021                     WS_dim@f:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x20
   285  000021                     	ds	2
   286  000023                     WS_RYGCBM@length:
   287                           	callstack 0
   288  000023                     WSWalk@length:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x22
   292  000023                     	ds	2
   293  000025                     WS_RYGCBM@brightness:
   294                           	callstack 0
   295  000025                     WSWalk@brightness:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0x24
   299  000025                     	ds	2
   300  000027                     ??_WS_RYGCBM:
   301  000027                     ??_WSWalk:
   302                           
   303                           ; 1 bytes @ 0x26
   304  000027                     	ds	2
   305  000029                     _WSWalk$1464:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0x28
   309  000029                     	ds	2
   310  00002B                     _WSWalk$1465:
   311                           	callstack 0
   312                           
   313                           ; 2 bytes @ 0x2A
   314  00002B                     	ds	1
   315  00002C                     WS_RYGCBM@b:
   316                           	callstack 0
   317                           
   318                           ; 2 bytes @ 0x2B
   319  00002C                     	ds	1
   320  00002D                     _WSWalk$1466:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x2C
   324  00002D                     	ds	1
   325  00002E                     WSSlow@lengh:
   326                           	callstack 0
   327  00002E                     WSTest@length:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x2D
   331  00002E                     	ds	1
   332  00002F                     WSWalk@b:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x2E
   336  00002F                     	ds	1
   337  000030                     WSSlow@maxBrightness:
   338                           	callstack 0
   339  000030                     WSTest@brightness:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0x2F
   343  000030                     	ds	1
   344  000031                     WSWalk@a:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0x30
   348  000031                     	ds	1
   349  000032                     ??_WSTest:
   350  000032                     WSSlow@minBrightness:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x31
   354  000032                     	ds	1
   355  000033                     WSWalk@i:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x32
   359  000033                     	ds	1
   360  000034                     ??_WSSlow:
   361  000034                     WSTest@i:
   362                           	callstack 0
   363                           
   364                           ; 2 bytes @ 0x33
   365  000034                     	ds	1
   366  000035                     WSSlow@i:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0x34
   370  000035                     	ds	2
   371  000037                     WSSlow@i_606:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x36
   375  000037                     	ds	2
   376  000039                     ??_main:
   377                           
   378                           ; 1 bytes @ 0x38
   379  000039                     	ds	1
   380  00003A                     main@brightness:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x39
   384  00003A                     	ds	2
   385  00003C                     main@tmp:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x3B
   389  00003C                     	ds	2
   390  00003E                     main@i:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x3D
   394  00003E                     	ds	2
   395                           
   396 ;;
   397 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   398 ;;
   399 ;; *************** function _main *****************
   400 ;; Defined at:
   401 ;;		line 57 in file "main.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;		None
   404 ;; Auto vars:     Size  Location     Type
   405 ;;  brightness      2   57[COMRAM] int 
   406 ;;  i               2   61[COMRAM] int 
   407 ;;  tmp             2   59[COMRAM] unsigned short 
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMRAM   BANK0   BANK1
   417 ;;      Params:         0       0       0
   418 ;;      Locals:         6       0       0
   419 ;;      Temps:          1       0       0
   420 ;;      Totals:         7       0       0
   421 ;;Total ram usage:        7 bytes
   422 ;; Hardware stack levels required when called:    8
   423 ;; This function calls:
   424 ;;		_ADC1_GetConversion
   425 ;;		_ADC1_Initialize
   426 ;;		_ADC1_SelectChannel
   427 ;;		_SYSTEM_Initialize
   428 ;;		_WSSlow
   429 ;;		_WSTest
   430 ;;		_WSWalk
   431 ;; This function is called by:
   432 ;;		Startup code after reset
   433 ;; This function uses a non-reentrant model
   434 ;;
   435                           
   436                           	psect	text0
   437  0006CE                     __ptext0:
   438                           	callstack 0
   439  0006CE                     _main:
   440                           	callstack 23
   441  0006CE                     
   442                           ;main.c: 60:     SYSTEM_Initialize();
   443  0006CE  EC1B  F006         	call	_SYSTEM_Initialize	;wreg free
   444  0006D2                     
   445                           ;main.c: 61:     LATCbits.LATC1 = 1;
   446  0006D2  828B               	bsf	139,1,c	;volatile
   447                           
   448                           ;main.c: 62:     ADC1_Initialize();
   449  0006D4  ECFD  F005         	call	_ADC1_Initialize	;wreg free
   450                           
   451                           ;main.c: 63:     ADC1_SelectChannel(channel_AN10);
   452  0006D8  0E0A               	movlw	10
   453  0006DA  EC0F  F006         	call	_ADC1_SelectChannel
   454  0006DE                     
   455                           ;main.c: 82:     int i=0;
   456  0006DE  0E00               	movlw	0
   457  0006E0  6E3F               	movwf	(main@i+1)^0,c
   458  0006E2  0E00               	movlw	0
   459  0006E4  6E3E               	movwf	main@i^0,c
   460  0006E6                     l260:
   461                           
   462                           ;main.c: 84:     {;main.c: 85:         tmp = ADC1_GetConversion(channel_AN10) >> 4;
   463  0006E6  0E0A               	movlw	10
   464  0006E8  EC8C  F005         	call	_ADC1_GetConversion
   465  0006EC  0E04               	movlw	4
   466  0006EE  6E39               	movwf	??_main^0,c
   467  0006F0                     u835:
   468  0006F0  90D8               	bcf	status,0,c
   469  0006F2  3204               	rrcf	(?_ADC1_GetConversion+1)^0,f,c
   470  0006F4  3203               	rrcf	?_ADC1_GetConversion^0,f,c
   471  0006F6  2E39               	decfsz	??_main^0,f,c
   472  0006F8  EF78  F003         	goto	u835
   473  0006FC  C003  F03C         	movff	?_ADC1_GetConversion,main@tmp
   474  000700  C004  F03D         	movff	?_ADC1_GetConversion+1,main@tmp+1
   475  000704                     
   476                           ;main.c: 86:         if(tmp > 52)
   477  000704  503D               	movf	(main@tmp+1)^0,w,c
   478  000706  E109               	bnz	u840
   479  000708  0E35               	movlw	53
   480  00070A  5C3C               	subwf	main@tmp^0,w,c
   481  00070C  A0D8               	btfss	status,0,c
   482  00070E  EF8B  F003         	goto	u841
   483  000712  EF8D  F003         	goto	u840
   484  000716                     u841:
   485  000716  EF91  F003         	goto	l1653
   486  00071A                     u840:
   487  00071A                     
   488                           ;main.c: 87:         {;main.c: 88:             tmp = 52;
   489  00071A  0E00               	movlw	0
   490  00071C  6E3D               	movwf	(main@tmp+1)^0,c
   491  00071E  0E34               	movlw	52
   492  000720  6E3C               	movwf	main@tmp^0,c
   493  000722                     l1653:
   494                           
   495                           ;main.c: 90:         int brightness = (int) tmp;
   496  000722  C03C  F03A         	movff	main@tmp,main@brightness
   497  000726  C03D  F03B         	movff	main@tmp+1,main@brightness+1
   498  00072A                     
   499                           ;main.c: 92:         if (PORTAbits.RA5 == 0) {
   500  00072A  BA80               	btfsc	128,5,c	;volatile
   501  00072C  EF9A  F003         	goto	u851
   502  000730  EF9C  F003         	goto	u850
   503  000734                     u851:
   504  000734  EFB0  F003         	goto	l262
   505  000738                     u850:
   506  000738                     
   507                           ;main.c: 93:             _delay((unsigned long)((10)*(32000000/4000.0)));
   508  000738  0E68               	movlw	104
   509  00073A  6E39               	movwf	??_main^0,c
   510  00073C  0EE4               	movlw	228
   511  00073E                     u907:
   512  00073E  2EE8               	decfsz	wreg,f,c
   513  000740  D7FE               	bra	u907
   514  000742  2E39               	decfsz	??_main^0,f,c
   515  000744  D7FC               	bra	u907
   516  000746  D000               	nop2	
   517  000748                     
   518                           ;main.c: 94:             if (PORTAbits.RA5 == 0) {
   519  000748  BA80               	btfsc	128,5,c	;volatile
   520  00074A  EFA9  F003         	goto	u861
   521  00074E  EFAB  F003         	goto	u860
   522  000752                     u861:
   523  000752  EFB1  F003         	goto	l264
   524  000756                     u860:
   525  000756                     
   526                           ;main.c: 95:                 LATCbits.LATC0 = 1;
   527  000756  808B               	bsf	139,0,c	;volatile
   528  000758                     
   529                           ;main.c: 96:                 i++;
   530  000758  4A3E               	infsnz	main@i^0,f,c
   531  00075A  2A3F               	incf	(main@i+1)^0,f,c
   532  00075C  EFB1  F003         	goto	l264
   533  000760                     l262:
   534                           
   535                           ;main.c: 100:             LATCbits.LATC0 = 0;
   536  000760  908B               	bcf	139,0,c	;volatile
   537  000762                     l264:
   538                           
   539                           ;main.c: 101:         LATCbits.LATC1 = 0;
   540  000762  928B               	bcf	139,1,c	;volatile
   541  000764                     
   542                           ;main.c: 102:         if( !i )
   543  000764  503E               	movf	main@i^0,w,c
   544  000766  103F               	iorwf	(main@i+1)^0,w,c
   545  000768  A4D8               	btfss	status,2,c
   546  00076A  EFB9  F003         	goto	u871
   547  00076E  EFBB  F003         	goto	u870
   548  000772                     u871:
   549  000772  EFC7  F003         	goto	l1669
   550  000776                     u870:
   551  000776                     
   552                           ;main.c: 103:         {;main.c: 104:             WSWalk(50,brightness);
   553  000776  0E00               	movlw	0
   554  000778  6E24               	movwf	(WSWalk@length+1)^0,c
   555  00077A  0E32               	movlw	50
   556  00077C  6E23               	movwf	WSWalk@length^0,c
   557  00077E  C03A  F025         	movff	main@brightness,WSWalk@brightness
   558  000782  C03B  F026         	movff	main@brightness+1,WSWalk@brightness+1
   559  000786  EC93  F002         	call	_WSWalk	;wreg free
   560                           
   561                           ;main.c: 105:         }
   562  00078A  EFFA  F003         	goto	l1679
   563  00078E                     l1669:
   564  00078E  043E               	decf	main@i^0,w,c
   565  000790  103F               	iorwf	(main@i+1)^0,w,c
   566  000792  A4D8               	btfss	status,2,c
   567  000794  EFCE  F003         	goto	u881
   568  000798  EFD0  F003         	goto	u880
   569  00079C                     u881:
   570  00079C  EFE0  F003         	goto	l1673
   571  0007A0                     u880:
   572  0007A0                     
   573                           ;main.c: 107:         {;main.c: 108:             WSSlow(100, 32, 3);
   574  0007A0  0E00               	movlw	0
   575  0007A2  6E2F               	movwf	(WSSlow@lengh+1)^0,c
   576  0007A4  0E64               	movlw	100
   577  0007A6  6E2E               	movwf	WSSlow@lengh^0,c
   578  0007A8  0E00               	movlw	0
   579  0007AA  6E31               	movwf	(WSSlow@maxBrightness+1)^0,c
   580  0007AC  0E20               	movlw	32
   581  0007AE  6E30               	movwf	WSSlow@maxBrightness^0,c
   582  0007B0  0E00               	movlw	0
   583  0007B2  6E33               	movwf	(WSSlow@minBrightness+1)^0,c
   584  0007B4  0E03               	movlw	3
   585  0007B6  6E32               	movwf	WSSlow@minBrightness^0,c
   586  0007B8  ECEB  F004         	call	_WSSlow	;wreg free
   587                           
   588                           ;main.c: 109:         }
   589  0007BC  EFFA  F003         	goto	l1679
   590  0007C0                     l1673:
   591  0007C0  0E02               	movlw	2
   592  0007C2  183E               	xorwf	main@i^0,w,c
   593  0007C4  103F               	iorwf	(main@i+1)^0,w,c
   594  0007C6  A4D8               	btfss	status,2,c
   595  0007C8  EFE8  F003         	goto	u891
   596  0007CC  EFEA  F003         	goto	u890
   597  0007D0                     u891:
   598  0007D0  EFF6  F003         	goto	l1677
   599  0007D4                     u890:
   600  0007D4                     
   601                           ;main.c: 111:         {;main.c: 112:             WSTest(100,2);
   602  0007D4  0E00               	movlw	0
   603  0007D6  6E2F               	movwf	(WSTest@length+1)^0,c
   604  0007D8  0E64               	movlw	100
   605  0007DA  6E2E               	movwf	WSTest@length^0,c
   606  0007DC  0E00               	movlw	0
   607  0007DE  6E31               	movwf	(WSTest@brightness+1)^0,c
   608  0007E0  0E02               	movlw	2
   609  0007E2  6E30               	movwf	WSTest@brightness^0,c
   610  0007E4  EC3F  F005         	call	_WSTest	;wreg free
   611                           
   612                           ;main.c: 113:         }
   613  0007E8  EFFA  F003         	goto	l1679
   614  0007EC                     l1677:
   615                           
   616                           ;main.c: 115:         {;main.c: 116:             i = 0;
   617  0007EC  0E00               	movlw	0
   618  0007EE  6E3F               	movwf	(main@i+1)^0,c
   619  0007F0  0E00               	movlw	0
   620  0007F2  6E3E               	movwf	main@i^0,c
   621  0007F4                     l1679:
   622                           
   623                           ;main.c: 118:         LATCbits.LATC1 = 1;
   624  0007F4  828B               	bsf	139,1,c	;volatile
   625  0007F6  EF73  F003         	goto	l260
   626  0007FA  EF26  F000         	goto	start
   627  0007FE                     __end_of_main:
   628                           	callstack 0
   629                           
   630 ;; *************** function _WSWalk *****************
   631 ;; Defined at:
   632 ;;		line 157 in file "WS2812b/BitBangWS2812b.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  length          2   34[COMRAM] int 
   635 ;;  brightness      2   36[COMRAM] int 
   636 ;; Auto vars:     Size  Location     Type
   637 ;;  i               2   50[COMRAM] int 
   638 ;;  a               2   48[COMRAM] int 
   639 ;;  b               2   46[COMRAM] int 
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1
   649 ;;      Params:         4       0       0
   650 ;;      Locals:        12       0       0
   651 ;;      Temps:          2       0       0
   652 ;;      Totals:        18       0       0
   653 ;;Total ram usage:       18 bytes
   654 ;; Hardware stack levels used:    1
   655 ;; Hardware stack levels required when called:    6
   656 ;; This function calls:
   657 ;;		_WS_dim
   658 ;;		___wmul
   659 ;; This function is called by:
   660 ;;		_main
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           	psect	text1
   665  000526                     __ptext1:
   666                           	callstack 0
   667  000526                     _WSWalk:
   668                           	callstack 24
   669  000526                     
   670                           ;WS2812b/BitBangWS2812b.c: 157: void WSWalk(int length, int brightness);WS2812b/BitBangW
      +                          S2812b.c: 158: {;WS2812b/BitBangWS2812b.c: 159:     for( int b = 0; b<=5; b++ )
   671  000526  0E00               	movlw	0
   672  000528  6E30               	movwf	(WSWalk@b+1)^0,c
   673  00052A  0E00               	movlw	0
   674  00052C  6E2F               	movwf	WSWalk@b^0,c
   675  00052E                     l1509:
   676                           
   677                           ;WS2812b/BitBangWS2812b.c: 160:     {;WS2812b/BitBangWS2812b.c: 161:         int a = 0;
   678  00052E  0E00               	movlw	0
   679  000530  6E32               	movwf	(WSWalk@a+1)^0,c
   680  000532  0E00               	movlw	0
   681  000534  6E31               	movwf	WSWalk@a^0,c
   682                           
   683                           ;WS2812b/BitBangWS2812b.c: 162:         while( a <= length )
   684  000536  EF2A  F003         	goto	l1535
   685  00053A                     l1511:
   686                           
   687                           ;WS2812b/BitBangWS2812b.c: 163:         {;WS2812b/BitBangWS2812b.c: 164:             for
      +                          ( int i = 0; i<=5; i++)
   688  00053A  0E00               	movlw	0
   689  00053C  6E34               	movwf	(WSWalk@i+1)^0,c
   690  00053E  0E00               	movlw	0
   691  000540  6E33               	movwf	WSWalk@i^0,c
   692  000542                     l1517:
   693                           
   694                           ;WS2812b/BitBangWS2812b.c: 165:             {;WS2812b/BitBangWS2812b.c: 166:            
      +                               if(a == 0)
   695  000542  5031               	movf	WSWalk@a^0,w,c
   696  000544  1032               	iorwf	(WSWalk@a+1)^0,w,c
   697  000546  A4D8               	btfss	status,2,c
   698  000548  EFA8  F002         	goto	u711
   699  00054C  EFAA  F002         	goto	u710
   700  000550                     u711:
   701  000550  EFAE  F002         	goto	l1521
   702  000554                     u710:
   703  000554                     
   704                           ;WS2812b/BitBangWS2812b.c: 167:                 {;WS2812b/BitBangWS2812b.c: 168:        
      +                                       i = b;
   705  000554  C02F  F033         	movff	WSWalk@b,WSWalk@i
   706  000558  C030  F034         	movff	WSWalk@b+1,WSWalk@i+1
   707  00055C                     l1521:
   708                           
   709                           ;WS2812b/BitBangWS2812b.c: 170:                 WS_dim(
   710  00055C  C033  F003         	movff	WSWalk@i,___wmul@multiplier
   711  000560  C034  F004         	movff	WSWalk@i+1,___wmul@multiplier+1
   712  000564  0E00               	movlw	0
   713  000566  6E06               	movwf	(___wmul@multiplicand+1)^0,c
   714  000568  0E06               	movlw	6
   715  00056A  6E05               	movwf	___wmul@multiplicand^0,c
   716  00056C  ECD7  F005         	call	___wmul	;wreg free
   717  000570  0E2B               	movlw	low _ColorSetB
   718  000572  2403               	addwf	?___wmul^0,w,c
   719  000574  6EF6               	movwf	tblptrl,c
   720  000576  0E02               	movlw	high _ColorSetB
   721  000578  2004               	addwfc	(?___wmul+1)^0,w,c
   722  00057A  6EF7               	movwf	tblptrh,c
   723  00057C                     	if	0	;There are less than 3 active tblptr bytes
   724  00057C                     	endif
   725  00057C  0009               	tblrd		*+
   726  00057E  CFF5 F029          	movff	tablat,_WSWalk$1464
   727  000582  000A               	tblrd		*-
   728  000584  CFF5 F02A          	movff	tablat,_WSWalk$1464+1
   729                           
   730                           ;WS2812b/BitBangWS2812b.c: 170:                 WS_dim(
   731  000588  C033  F003         	movff	WSWalk@i,___wmul@multiplier
   732  00058C  C034  F004         	movff	WSWalk@i+1,___wmul@multiplier+1
   733  000590  0E00               	movlw	0
   734  000592  6E06               	movwf	(___wmul@multiplicand+1)^0,c
   735  000594  0E06               	movlw	6
   736  000596  6E05               	movwf	___wmul@multiplicand^0,c
   737  000598  ECD7  F005         	call	___wmul	;wreg free
   738  00059C  0E02               	movlw	2
   739  00059E  2603               	addwf	?___wmul^0,f,c
   740  0005A0  0E00               	movlw	0
   741  0005A2  2204               	addwfc	(?___wmul+1)^0,f,c
   742  0005A4  0E2B               	movlw	low _ColorSetB
   743  0005A6  2403               	addwf	?___wmul^0,w,c
   744  0005A8  6EF6               	movwf	tblptrl,c
   745  0005AA  0E02               	movlw	high _ColorSetB
   746  0005AC  2004               	addwfc	(?___wmul+1)^0,w,c
   747  0005AE  6EF7               	movwf	tblptrh,c
   748  0005B0                     	if	0	;There are less than 3 active tblptr bytes
   749  0005B0                     	endif
   750  0005B0  0009               	tblrd		*+
   751  0005B2  CFF5 F02B          	movff	tablat,_WSWalk$1465
   752  0005B6  000A               	tblrd		*-
   753  0005B8  CFF5 F02C          	movff	tablat,_WSWalk$1465+1
   754                           
   755                           ;WS2812b/BitBangWS2812b.c: 170:                 WS_dim(
   756  0005BC  C033  F003         	movff	WSWalk@i,___wmul@multiplier
   757  0005C0  C034  F004         	movff	WSWalk@i+1,___wmul@multiplier+1
   758  0005C4  0E00               	movlw	0
   759  0005C6  6E06               	movwf	(___wmul@multiplicand+1)^0,c
   760  0005C8  0E06               	movlw	6
   761  0005CA  6E05               	movwf	___wmul@multiplicand^0,c
   762  0005CC  ECD7  F005         	call	___wmul	;wreg free
   763  0005D0  0E04               	movlw	4
   764  0005D2  2603               	addwf	?___wmul^0,f,c
   765  0005D4  0E00               	movlw	0
   766  0005D6  2204               	addwfc	(?___wmul+1)^0,f,c
   767  0005D8  0E2B               	movlw	low _ColorSetB
   768  0005DA  2403               	addwf	?___wmul^0,w,c
   769  0005DC  6EF6               	movwf	tblptrl,c
   770  0005DE  0E02               	movlw	high _ColorSetB
   771  0005E0  2004               	addwfc	(?___wmul+1)^0,w,c
   772  0005E2  6EF7               	movwf	tblptrh,c
   773  0005E4                     	if	0	;There are less than 3 active tblptr bytes
   774  0005E4                     	endif
   775  0005E4  0009               	tblrd		*+
   776  0005E6  CFF5 F02D          	movff	tablat,_WSWalk$1466
   777  0005EA  000A               	tblrd		*-
   778  0005EC  CFF5 F02E          	movff	tablat,_WSWalk$1466+1
   779  0005F0                     
   780                           ;WS2812b/BitBangWS2812b.c: 170:                 WS_dim(
   781  0005F0  C029  F018         	movff	_WSWalk$1464,WS_dim@A
   782  0005F4  C02A  F019         	movff	_WSWalk$1464+1,WS_dim@A+1
   783  0005F8  C02B  F01A         	movff	_WSWalk$1465,WS_dim@B
   784  0005FC  C02C  F01B         	movff	_WSWalk$1465+1,WS_dim@B+1
   785  000600  C02D  F01C         	movff	_WSWalk$1466,WS_dim@C
   786  000604  C02E  F01D         	movff	_WSWalk$1466+1,WS_dim@C+1
   787  000608  C025  F01E         	movff	WSWalk@brightness,WS_dim@brightness
   788  00060C  C026  F01F         	movff	WSWalk@brightness+1,WS_dim@brightness+1
   789  000610  EC8D  F004         	call	_WS_dim	;wreg free
   790  000614                     
   791                           ;WS2812b/BitBangWS2812b.c: 176:                 a++;
   792  000614  4A31               	infsnz	WSWalk@a^0,f,c
   793  000616  2A32               	incf	(WSWalk@a+1)^0,f,c
   794  000618                     
   795                           ;WS2812b/BitBangWS2812b.c: 177:                 if(a == length){ break;}
   796  000618  5023               	movf	WSWalk@length^0,w,c
   797  00061A  1831               	xorwf	WSWalk@a^0,w,c
   798  00061C  E107               	bnz	u721
   799  00061E  5024               	movf	(WSWalk@length+1)^0,w,c
   800  000620  1832               	xorwf	(WSWalk@a+1)^0,w,c
   801  000622  A4D8               	btfss	status,2,c
   802  000624  EF16  F003         	goto	u721
   803  000628  EF18  F003         	goto	u720
   804  00062C                     u721:
   805  00062C  EF1A  F003         	goto	l1531
   806  000630                     u720:
   807  000630  EF2A  F003         	goto	l1535
   808  000634                     l1531:
   809                           
   810                           ;WS2812b/BitBangWS2812b.c: 178:             }
   811  000634  4A33               	infsnz	WSWalk@i^0,f,c
   812  000636  2A34               	incf	(WSWalk@i+1)^0,f,c
   813  000638  BE34               	btfsc	(WSWalk@i+1)^0,7,c
   814  00063A  EF28  F003         	goto	u731
   815  00063E  5034               	movf	(WSWalk@i+1)^0,w,c
   816  000640  E109               	bnz	u730
   817  000642  0E06               	movlw	6
   818  000644  5C33               	subwf	WSWalk@i^0,w,c
   819  000646  A0D8               	btfss	status,0,c
   820  000648  EF28  F003         	goto	u731
   821  00064C  EF2A  F003         	goto	u730
   822  000650                     u731:
   823  000650  EFA1  F002         	goto	l1517
   824  000654                     u730:
   825  000654                     l1535:
   826                           
   827                           ;WS2812b/BitBangWS2812b.c: 162:         while( a <= length )
   828  000654  5031               	movf	WSWalk@a^0,w,c
   829  000656  5C23               	subwf	WSWalk@length^0,w,c
   830  000658  5024               	movf	(WSWalk@length+1)^0,w,c
   831  00065A  0A80               	xorlw	128
   832  00065C  6E27               	movwf	??_WSWalk^0,c
   833  00065E  5032               	movf	(WSWalk@a+1)^0,w,c
   834  000660  0A80               	xorlw	128
   835  000662  5827               	subwfb	??_WSWalk^0,w,c
   836  000664  B0D8               	btfsc	status,0,c
   837  000666  EF37  F003         	goto	u741
   838  00066A  EF39  F003         	goto	u740
   839  00066E                     u741:
   840  00066E  EF9D  F002         	goto	l1511
   841  000672                     u740:
   842  000672                     
   843                           ;WS2812b/BitBangWS2812b.c: 180:         _delay((unsigned long)((0.280)*(32000000/4000.0)
      +                          ));
   844  000672  0E03               	movlw	3
   845  000674  6E27               	movwf	??_WSWalk^0,c
   846  000676  0EE8               	movlw	232
   847  000678                     u917:
   848  000678  2EE8               	decfsz	wreg,f,c
   849  00067A  D7FE               	bra	u917
   850  00067C  2E27               	decfsz	??_WSWalk^0,f,c
   851  00067E  D7FC               	bra	u917
   852                           
   853                           ;WS2812b/BitBangWS2812b.c: 181:         _delay((unsigned long)((250)*(32000000/4000.0)))
      +                          ;
   854  000680  0E0B               	movlw	11
   855  000682  6E28               	movwf	(??_WSWalk+1)^0,c
   856  000684  0E26               	movlw	38
   857  000686  6E27               	movwf	??_WSWalk^0,c
   858  000688  0E5E               	movlw	94
   859  00068A                     u927:
   860  00068A  2EE8               	decfsz	wreg,f,c
   861  00068C  D7FE               	bra	u927
   862  00068E  2E27               	decfsz	??_WSWalk^0,f,c
   863  000690  D7FC               	bra	u927
   864  000692  2E28               	decfsz	(??_WSWalk+1)^0,f,c
   865  000694  D7FA               	bra	u927
   866                           
   867                           ;WS2812b/BitBangWS2812b.c: 182:         _delay((unsigned long)((250)*(32000000/4000.0)))
      +                          ;
   868  000696  0E0B               	movlw	11
   869  000698  6E28               	movwf	(??_WSWalk+1)^0,c
   870  00069A  0E26               	movlw	38
   871  00069C  6E27               	movwf	??_WSWalk^0,c
   872  00069E  0E5E               	movlw	94
   873  0006A0                     u937:
   874  0006A0  2EE8               	decfsz	wreg,f,c
   875  0006A2  D7FE               	bra	u937
   876  0006A4  2E27               	decfsz	??_WSWalk^0,f,c
   877  0006A6  D7FC               	bra	u937
   878  0006A8  2E28               	decfsz	(??_WSWalk+1)^0,f,c
   879  0006AA  D7FA               	bra	u937
   880  0006AC                     
   881                           ;WS2812b/BitBangWS2812b.c: 183:     }
   882  0006AC  4A2F               	infsnz	WSWalk@b^0,f,c
   883  0006AE  2A30               	incf	(WSWalk@b+1)^0,f,c
   884  0006B0  BE30               	btfsc	(WSWalk@b+1)^0,7,c
   885  0006B2  EF64  F003         	goto	u751
   886  0006B6  5030               	movf	(WSWalk@b+1)^0,w,c
   887  0006B8  E109               	bnz	u750
   888  0006BA  0E06               	movlw	6
   889  0006BC  5C2F               	subwf	WSWalk@b^0,w,c
   890  0006BE  A0D8               	btfss	status,0,c
   891  0006C0  EF64  F003         	goto	u751
   892  0006C4  EF66  F003         	goto	u750
   893  0006C8                     u751:
   894  0006C8  EF97  F002         	goto	l1509
   895  0006CC                     u750:
   896  0006CC  0012               	return		;funcret
   897  0006CE                     __end_of_WSWalk:
   898                           	callstack 0
   899                           
   900 ;; *************** function _WSTest *****************
   901 ;; Defined at:
   902 ;;		line 144 in file "WS2812b/BitBangWS2812b.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;  length          2   45[COMRAM] int 
   905 ;;  brightness      2   47[COMRAM] int 
   906 ;; Auto vars:     Size  Location     Type
   907 ;;  i               2   51[COMRAM] int 
   908 ;; Return value:  Size  Location     Type
   909 ;;                  1    wreg      void 
   910 ;; Registers used:
   911 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   912 ;; Tracked objects:
   913 ;;		On entry : 0/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMRAM   BANK0   BANK1
   917 ;;      Params:         4       0       0
   918 ;;      Locals:         2       0       0
   919 ;;      Temps:          2       0       0
   920 ;;      Totals:         8       0       0
   921 ;;Total ram usage:        8 bytes
   922 ;; Hardware stack levels used:    1
   923 ;; Hardware stack levels required when called:    7
   924 ;; This function calls:
   925 ;;		_WS_RYGCBM
   926 ;;		_WS_Word
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text2
   933  000A7E                     __ptext2:
   934                           	callstack 0
   935  000A7E                     _WSTest:
   936                           	callstack 23
   937  000A7E                     
   938                           ;WS2812b/BitBangWS2812b.c: 144: void WSTest(int length, int brightness);WS2812b/BitBangW
      +                          S2812b.c: 145: {;WS2812b/BitBangWS2812b.c: 147:     for(int i = 0; i<length; i++)
   939  000A7E  0E00               	movlw	0
   940  000A80  6E35               	movwf	(WSTest@i+1)^0,c
   941  000A82  0E00               	movlw	0
   942  000A84  6E34               	movwf	WSTest@i^0,c
   943  000A86  EF55  F005         	goto	l1495
   944  000A8A                     l1491:
   945                           
   946                           ;WS2812b/BitBangWS2812b.c: 148:     {;WS2812b/BitBangWS2812b.c: 149:         WS_Word(0x0
      +                          0, 0x00, 0x00);
   947  000A8A  0E00               	movlw	0
   948  000A8C  6E06               	movwf	(WS_Word@A+1)^0,c
   949  000A8E  0E00               	movlw	0
   950  000A90  6E05               	movwf	WS_Word@A^0,c
   951  000A92  0E00               	movlw	0
   952  000A94  6E08               	movwf	(WS_Word@B+1)^0,c
   953  000A96  0E00               	movlw	0
   954  000A98  6E07               	movwf	WS_Word@B^0,c
   955  000A9A  0E00               	movlw	0
   956  000A9C  6E0A               	movwf	(WS_Word@C+1)^0,c
   957  000A9E  0E00               	movlw	0
   958  000AA0  6E09               	movwf	WS_Word@C^0,c
   959  000AA2  ECFF  F003         	call	_WS_Word	;wreg free
   960  000AA6                     
   961                           ;WS2812b/BitBangWS2812b.c: 150:     }
   962  000AA6  4A34               	infsnz	WSTest@i^0,f,c
   963  000AA8  2A35               	incf	(WSTest@i+1)^0,f,c
   964  000AAA                     l1495:
   965  000AAA  502E               	movf	WSTest@length^0,w,c
   966  000AAC  5C34               	subwf	WSTest@i^0,w,c
   967  000AAE  5035               	movf	(WSTest@i+1)^0,w,c
   968  000AB0  0A80               	xorlw	128
   969  000AB2  6E32               	movwf	??_WSTest^0,c
   970  000AB4  502F               	movf	(WSTest@length+1)^0,w,c
   971  000AB6  0A80               	xorlw	128
   972  000AB8  5832               	subwfb	??_WSTest^0,w,c
   973  000ABA  A0D8               	btfss	status,0,c
   974  000ABC  EF62  F005         	goto	u701
   975  000AC0  EF64  F005         	goto	u700
   976  000AC4                     u701:
   977  000AC4  EF45  F005         	goto	l1491
   978  000AC8                     u700:
   979  000AC8                     
   980                           ;WS2812b/BitBangWS2812b.c: 151:     _delay((unsigned long)((0.280)*(32000000/4000.0)));
   981  000AC8  0E03               	movlw	3
   982  000ACA  6E32               	movwf	??_WSTest^0,c
   983  000ACC  0EE8               	movlw	232
   984  000ACE                     u947:
   985  000ACE  2EE8               	decfsz	wreg,f,c
   986  000AD0  D7FE               	bra	u947
   987  000AD2  2E32               	decfsz	??_WSTest^0,f,c
   988  000AD4  D7FC               	bra	u947
   989                           
   990                           ;WS2812b/BitBangWS2812b.c: 152:     _delay((unsigned long)((250)*(32000000/4000.0)));
   991  000AD6  0E0B               	movlw	11
   992  000AD8  6E33               	movwf	(??_WSTest+1)^0,c
   993  000ADA  0E26               	movlw	38
   994  000ADC  6E32               	movwf	??_WSTest^0,c
   995  000ADE  0E5E               	movlw	94
   996  000AE0                     u957:
   997  000AE0  2EE8               	decfsz	wreg,f,c
   998  000AE2  D7FE               	bra	u957
   999  000AE4  2E32               	decfsz	??_WSTest^0,f,c
  1000  000AE6  D7FC               	bra	u957
  1001  000AE8  2E33               	decfsz	(??_WSTest+1)^0,f,c
  1002  000AEA  D7FA               	bra	u957
  1003  000AEC                     
  1004                           ;WS2812b/BitBangWS2812b.c: 153:     WS_RYGCBM(length, brightness);
  1005  000AEC  C02E  F023         	movff	WSTest@length,WS_RYGCBM@length
  1006  000AF0  C02F  F024         	movff	WSTest@length+1,WS_RYGCBM@length+1
  1007  000AF4  C030  F025         	movff	WSTest@brightness,WS_RYGCBM@brightness
  1008  000AF8  C031  F026         	movff	WSTest@brightness+1,WS_RYGCBM@brightness+1
  1009  000AFC  EC2B  F001         	call	_WS_RYGCBM	;wreg free
  1010  000B00                     
  1011                           ;WS2812b/BitBangWS2812b.c: 154:     _delay((unsigned long)((250)*(32000000/4000.0)));
  1012  000B00  0E0B               	movlw	11
  1013  000B02  6E33               	movwf	(??_WSTest+1)^0,c
  1014  000B04  0E26               	movlw	38
  1015  000B06  6E32               	movwf	??_WSTest^0,c
  1016  000B08  0E5E               	movlw	94
  1017  000B0A                     u967:
  1018  000B0A  2EE8               	decfsz	wreg,f,c
  1019  000B0C  D7FE               	bra	u967
  1020  000B0E  2E32               	decfsz	??_WSTest^0,f,c
  1021  000B10  D7FC               	bra	u967
  1022  000B12  2E33               	decfsz	(??_WSTest+1)^0,f,c
  1023  000B14  D7FA               	bra	u967
  1024  000B16  0012               	return		;funcret
  1025  000B18                     __end_of_WSTest:
  1026                           	callstack 0
  1027                           
  1028 ;; *************** function _WSSlow *****************
  1029 ;; Defined at:
  1030 ;;		line 95 in file "WS2812b/BitBangWS2812b.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  lengh           2   45[COMRAM] int 
  1033 ;;  maxBrightnes    2   47[COMRAM] int 
  1034 ;;  minBrightnes    2   49[COMRAM] int 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  i               2   54[COMRAM] int 
  1037 ;;  i               2   52[COMRAM] int 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1
  1047 ;;      Params:         6       0       0
  1048 ;;      Locals:         4       0       0
  1049 ;;      Temps:          1       0       0
  1050 ;;      Totals:        11       0       0
  1051 ;;Total ram usage:       11 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    7
  1054 ;; This function calls:
  1055 ;;		_WS_RYGCBM
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text3
  1062  0009D6                     __ptext3:
  1063                           	callstack 0
  1064  0009D6                     _WSSlow:
  1065                           	callstack 23
  1066  0009D6                     
  1067                           ;WS2812b/BitBangWS2812b.c: 95: void WSSlow(int lengh, int maxBrightness, int minBrightne
      +                          ss);WS2812b/BitBangWS2812b.c: 96: {;WS2812b/BitBangWS2812b.c: 97:     for(int i = minBri
      +                          ghtness; i<=maxBrightness; i++)
  1068  0009D6  C032  F035         	movff	WSSlow@minBrightness,WSSlow@i
  1069  0009DA  C033  F036         	movff	WSSlow@minBrightness+1,WSSlow@i+1
  1070  0009DE  EF05  F005         	goto	l1479
  1071  0009E2                     l1473:
  1072                           
  1073                           ;WS2812b/BitBangWS2812b.c: 98:     {;WS2812b/BitBangWS2812b.c: 99:         WS_RYGCBM(len
      +                          gh, i);
  1074  0009E2  C02E  F023         	movff	WSSlow@lengh,WS_RYGCBM@length
  1075  0009E6  C02F  F024         	movff	WSSlow@lengh+1,WS_RYGCBM@length+1
  1076  0009EA  C035  F025         	movff	WSSlow@i,WS_RYGCBM@brightness
  1077  0009EE  C036  F026         	movff	WSSlow@i+1,WS_RYGCBM@brightness+1
  1078  0009F2  EC2B  F001         	call	_WS_RYGCBM	;wreg free
  1079  0009F6                     
  1080                           ;WS2812b/BitBangWS2812b.c: 100:         _delay((unsigned long)((10)*(32000000/4000.0)));
  1081  0009F6  0E68               	movlw	104
  1082  0009F8  6E34               	movwf	??_WSSlow^0,c
  1083  0009FA  0EE4               	movlw	228
  1084  0009FC                     u977:
  1085  0009FC  2EE8               	decfsz	wreg,f,c
  1086  0009FE  D7FE               	bra	u977
  1087  000A00  2E34               	decfsz	??_WSSlow^0,f,c
  1088  000A02  D7FC               	bra	u977
  1089  000A04  D000               	nop2	
  1090  000A06                     
  1091                           ;WS2812b/BitBangWS2812b.c: 101:     }
  1092  000A06  4A35               	infsnz	WSSlow@i^0,f,c
  1093  000A08  2A36               	incf	(WSSlow@i+1)^0,f,c
  1094  000A0A                     l1479:
  1095  000A0A  5035               	movf	WSSlow@i^0,w,c
  1096  000A0C  5C30               	subwf	WSSlow@maxBrightness^0,w,c
  1097  000A0E  5031               	movf	(WSSlow@maxBrightness+1)^0,w,c
  1098  000A10  0A80               	xorlw	128
  1099  000A12  6E34               	movwf	??_WSSlow^0,c
  1100  000A14  5036               	movf	(WSSlow@i+1)^0,w,c
  1101  000A16  0A80               	xorlw	128
  1102  000A18  5834               	subwfb	??_WSSlow^0,w,c
  1103  000A1A  B0D8               	btfsc	status,0,c
  1104  000A1C  EF12  F005         	goto	u681
  1105  000A20  EF14  F005         	goto	u680
  1106  000A24                     u681:
  1107  000A24  EFF1  F004         	goto	l1473
  1108  000A28                     u680:
  1109  000A28                     
  1110                           ;WS2812b/BitBangWS2812b.c: 102:     for(int i = maxBrightness; i>=minBrightness; i--)
  1111  000A28  C030  F037         	movff	WSSlow@maxBrightness,WSSlow@i_606
  1112  000A2C  C031  F038         	movff	WSSlow@maxBrightness+1,WSSlow@i_606+1
  1113  000A30  EF2F  F005         	goto	l1487
  1114  000A34                     l1481:
  1115                           
  1116                           ;WS2812b/BitBangWS2812b.c: 103:     {;WS2812b/BitBangWS2812b.c: 104:         WS_RYGCBM(l
      +                          engh, i);
  1117  000A34  C02E  F023         	movff	WSSlow@lengh,WS_RYGCBM@length
  1118  000A38  C02F  F024         	movff	WSSlow@lengh+1,WS_RYGCBM@length+1
  1119  000A3C  C037  F025         	movff	WSSlow@i_606,WS_RYGCBM@brightness
  1120  000A40  C038  F026         	movff	WSSlow@i_606+1,WS_RYGCBM@brightness+1
  1121  000A44  EC2B  F001         	call	_WS_RYGCBM	;wreg free
  1122  000A48                     
  1123                           ;WS2812b/BitBangWS2812b.c: 105:         _delay((unsigned long)((10)*(32000000/4000.0)));
  1124  000A48  0E68               	movlw	104
  1125  000A4A  6E34               	movwf	??_WSSlow^0,c
  1126  000A4C  0EE4               	movlw	228
  1127  000A4E                     u987:
  1128  000A4E  2EE8               	decfsz	wreg,f,c
  1129  000A50  D7FE               	bra	u987
  1130  000A52  2E34               	decfsz	??_WSSlow^0,f,c
  1131  000A54  D7FC               	bra	u987
  1132  000A56  D000               	nop2	
  1133  000A58                     
  1134                           ;WS2812b/BitBangWS2812b.c: 106:     }
  1135  000A58  0637               	decf	WSSlow@i_606^0,f,c
  1136  000A5A  A0D8               	btfss	status,0,c
  1137  000A5C  0638               	decf	(WSSlow@i_606+1)^0,f,c
  1138  000A5E                     l1487:
  1139  000A5E  5032               	movf	WSSlow@minBrightness^0,w,c
  1140  000A60  5C37               	subwf	WSSlow@i_606^0,w,c
  1141  000A62  5038               	movf	(WSSlow@i_606+1)^0,w,c
  1142  000A64  0A80               	xorlw	128
  1143  000A66  6E34               	movwf	??_WSSlow^0,c
  1144  000A68  5033               	movf	(WSSlow@minBrightness+1)^0,w,c
  1145  000A6A  0A80               	xorlw	128
  1146  000A6C  5834               	subwfb	??_WSSlow^0,w,c
  1147  000A6E  B0D8               	btfsc	status,0,c
  1148  000A70  EF3C  F005         	goto	u691
  1149  000A74  EF3E  F005         	goto	u690
  1150  000A78                     u691:
  1151  000A78  EF1A  F005         	goto	l1481
  1152  000A7C                     u690:
  1153  000A7C  0012               	return		;funcret
  1154  000A7E                     __end_of_WSSlow:
  1155                           	callstack 0
  1156                           
  1157 ;; *************** function _WS_RYGCBM *****************
  1158 ;; Defined at:
  1159 ;;		line 108 in file "WS2812b/BitBangWS2812b.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  length          2   34[COMRAM] int 
  1162 ;;  brightness      2   36[COMRAM] int 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  b               2   43[COMRAM] int 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1
  1174 ;;      Params:         4       0       0
  1175 ;;      Locals:         2       0       0
  1176 ;;      Temps:          5       0       0
  1177 ;;      Totals:        11       0       0
  1178 ;;Total ram usage:       11 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    6
  1181 ;; This function calls:
  1182 ;;		_WS_dim
  1183 ;; This function is called by:
  1184 ;;		_WSSlow
  1185 ;;		_WSTest
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text4
  1190  000256                     __ptext4:
  1191                           	callstack 0
  1192  000256                     _WS_RYGCBM:
  1193                           	callstack 23
  1194  000256                     
  1195                           ;WS2812b/BitBangWS2812b.c: 108: void WS_RYGCBM(int length, int brightness);WS2812b/BitBa
      +                          ngWS2812b.c: 109: {;WS2812b/BitBangWS2812b.c: 110:     int b =0;
  1196  000256  0E00               	movlw	0
  1197  000258  6E2D               	movwf	(WS_RYGCBM@b+1)^0,c
  1198  00025A  0E00               	movlw	0
  1199  00025C  6E2C               	movwf	WS_RYGCBM@b^0,c
  1200                           
  1201                           ;WS2812b/BitBangWS2812b.c: 111:     for(b = 0; b<length-6; b+=6 )
  1202  00025E  0E00               	movlw	0
  1203  000260  6E2D               	movwf	(WS_RYGCBM@b+1)^0,c
  1204  000262  0E00               	movlw	0
  1205  000264  6E2C               	movwf	WS_RYGCBM@b^0,c
  1206  000266  EF9C  F001         	goto	l1399
  1207  00026A                     l1395:
  1208                           
  1209                           ;WS2812b/BitBangWS2812b.c: 112:     {;WS2812b/BitBangWS2812b.c: 113:         WS_dim(0xFF
      +                          , 0x00, 0x00, brightness);
  1210  00026A  0E00               	movlw	0
  1211  00026C  6E19               	movwf	(WS_dim@A+1)^0,c
  1212  00026E  6818               	setf	WS_dim@A^0,c
  1213  000270  0E00               	movlw	0
  1214  000272  6E1B               	movwf	(WS_dim@B+1)^0,c
  1215  000274  0E00               	movlw	0
  1216  000276  6E1A               	movwf	WS_dim@B^0,c
  1217  000278  0E00               	movlw	0
  1218  00027A  6E1D               	movwf	(WS_dim@C+1)^0,c
  1219  00027C  0E00               	movlw	0
  1220  00027E  6E1C               	movwf	WS_dim@C^0,c
  1221  000280  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1222  000284  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1223  000288  EC8D  F004         	call	_WS_dim	;wreg free
  1224                           
  1225                           ;WS2812b/BitBangWS2812b.c: 114:         WS_dim(0xFF, 0xFF, 0x00, brightness);
  1226  00028C  0E00               	movlw	0
  1227  00028E  6E19               	movwf	(WS_dim@A+1)^0,c
  1228  000290  6818               	setf	WS_dim@A^0,c
  1229  000292  0E00               	movlw	0
  1230  000294  6E1B               	movwf	(WS_dim@B+1)^0,c
  1231  000296  681A               	setf	WS_dim@B^0,c
  1232  000298  0E00               	movlw	0
  1233  00029A  6E1D               	movwf	(WS_dim@C+1)^0,c
  1234  00029C  0E00               	movlw	0
  1235  00029E  6E1C               	movwf	WS_dim@C^0,c
  1236  0002A0  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1237  0002A4  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1238  0002A8  EC8D  F004         	call	_WS_dim	;wreg free
  1239                           
  1240                           ;WS2812b/BitBangWS2812b.c: 115:         WS_dim(0x00, 0xFF, 0x00, brightness);
  1241  0002AC  0E00               	movlw	0
  1242  0002AE  6E19               	movwf	(WS_dim@A+1)^0,c
  1243  0002B0  0E00               	movlw	0
  1244  0002B2  6E18               	movwf	WS_dim@A^0,c
  1245  0002B4  0E00               	movlw	0
  1246  0002B6  6E1B               	movwf	(WS_dim@B+1)^0,c
  1247  0002B8  681A               	setf	WS_dim@B^0,c
  1248  0002BA  0E00               	movlw	0
  1249  0002BC  6E1D               	movwf	(WS_dim@C+1)^0,c
  1250  0002BE  0E00               	movlw	0
  1251  0002C0  6E1C               	movwf	WS_dim@C^0,c
  1252  0002C2  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1253  0002C6  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1254  0002CA  EC8D  F004         	call	_WS_dim	;wreg free
  1255                           
  1256                           ;WS2812b/BitBangWS2812b.c: 116:         WS_dim(0x00, 0xFF, 0xFF, brightness);
  1257  0002CE  0E00               	movlw	0
  1258  0002D0  6E19               	movwf	(WS_dim@A+1)^0,c
  1259  0002D2  0E00               	movlw	0
  1260  0002D4  6E18               	movwf	WS_dim@A^0,c
  1261  0002D6  0E00               	movlw	0
  1262  0002D8  6E1B               	movwf	(WS_dim@B+1)^0,c
  1263  0002DA  681A               	setf	WS_dim@B^0,c
  1264  0002DC  0E00               	movlw	0
  1265  0002DE  6E1D               	movwf	(WS_dim@C+1)^0,c
  1266  0002E0  681C               	setf	WS_dim@C^0,c
  1267  0002E2  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1268  0002E6  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1269  0002EA  EC8D  F004         	call	_WS_dim	;wreg free
  1270                           
  1271                           ;WS2812b/BitBangWS2812b.c: 117:         WS_dim(0x00, 0x00, 0xFF, brightness);
  1272  0002EE  0E00               	movlw	0
  1273  0002F0  6E19               	movwf	(WS_dim@A+1)^0,c
  1274  0002F2  0E00               	movlw	0
  1275  0002F4  6E18               	movwf	WS_dim@A^0,c
  1276  0002F6  0E00               	movlw	0
  1277  0002F8  6E1B               	movwf	(WS_dim@B+1)^0,c
  1278  0002FA  0E00               	movlw	0
  1279  0002FC  6E1A               	movwf	WS_dim@B^0,c
  1280  0002FE  0E00               	movlw	0
  1281  000300  6E1D               	movwf	(WS_dim@C+1)^0,c
  1282  000302  681C               	setf	WS_dim@C^0,c
  1283  000304  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1284  000308  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1285  00030C  EC8D  F004         	call	_WS_dim	;wreg free
  1286                           
  1287                           ;WS2812b/BitBangWS2812b.c: 118:         WS_dim(0xFF, 0x00, 0xFF, brightness);
  1288  000310  0E00               	movlw	0
  1289  000312  6E19               	movwf	(WS_dim@A+1)^0,c
  1290  000314  6818               	setf	WS_dim@A^0,c
  1291  000316  0E00               	movlw	0
  1292  000318  6E1B               	movwf	(WS_dim@B+1)^0,c
  1293  00031A  0E00               	movlw	0
  1294  00031C  6E1A               	movwf	WS_dim@B^0,c
  1295  00031E  0E00               	movlw	0
  1296  000320  6E1D               	movwf	(WS_dim@C+1)^0,c
  1297  000322  681C               	setf	WS_dim@C^0,c
  1298  000324  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1299  000328  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1300  00032C  EC8D  F004         	call	_WS_dim	;wreg free
  1301  000330                     
  1302                           ;WS2812b/BitBangWS2812b.c: 119:     }
  1303  000330  0E06               	movlw	6
  1304  000332  262C               	addwf	WS_RYGCBM@b^0,f,c
  1305  000334  0E00               	movlw	0
  1306  000336  222D               	addwfc	(WS_RYGCBM@b+1)^0,f,c
  1307  000338                     l1399:
  1308  000338  0EFA               	movlw	250
  1309  00033A  6E27               	movwf	??_WS_RYGCBM^0,c
  1310  00033C  0EFF               	movlw	255
  1311  00033E  6E28               	movwf	(??_WS_RYGCBM+1)^0,c
  1312  000340  C023  F029         	movff	WS_RYGCBM@length,??_WS_RYGCBM+2
  1313  000344  C024  F02A         	movff	WS_RYGCBM@length+1,??_WS_RYGCBM+3
  1314  000348  5027               	movf	??_WS_RYGCBM^0,w,c
  1315  00034A  2629               	addwf	(??_WS_RYGCBM+2)^0,f,c
  1316  00034C  5028               	movf	(??_WS_RYGCBM+1)^0,w,c
  1317  00034E  222A               	addwfc	(??_WS_RYGCBM+3)^0,f,c
  1318  000350  5029               	movf	(??_WS_RYGCBM+2)^0,w,c
  1319  000352  5C2C               	subwf	WS_RYGCBM@b^0,w,c
  1320  000354  502D               	movf	(WS_RYGCBM@b+1)^0,w,c
  1321  000356  0A80               	xorlw	128
  1322  000358  6E2B               	movwf	(??_WS_RYGCBM+4)^0,c
  1323  00035A  502A               	movf	(??_WS_RYGCBM+3)^0,w,c
  1324  00035C  0A80               	xorlw	128
  1325  00035E  582B               	subwfb	(??_WS_RYGCBM+4)^0,w,c
  1326  000360  A0D8               	btfss	status,0,c
  1327  000362  EFB5  F001         	goto	u591
  1328  000366  EFB7  F001         	goto	u590
  1329  00036A                     u591:
  1330  00036A  EF35  F001         	goto	l1395
  1331  00036E                     u590:
  1332  00036E  EF7C  F002         	goto	l1449
  1333  000372                     l1401:
  1334                           
  1335                           ;WS2812b/BitBangWS2812b.c: 121:     {;WS2812b/BitBangWS2812b.c: 122:         WS_dim(0xFF
      +                          , 0x00, 0x00, brightness);
  1336  000372  0E00               	movlw	0
  1337  000374  6E19               	movwf	(WS_dim@A+1)^0,c
  1338  000376  6818               	setf	WS_dim@A^0,c
  1339  000378  0E00               	movlw	0
  1340  00037A  6E1B               	movwf	(WS_dim@B+1)^0,c
  1341  00037C  0E00               	movlw	0
  1342  00037E  6E1A               	movwf	WS_dim@B^0,c
  1343  000380  0E00               	movlw	0
  1344  000382  6E1D               	movwf	(WS_dim@C+1)^0,c
  1345  000384  0E00               	movlw	0
  1346  000386  6E1C               	movwf	WS_dim@C^0,c
  1347  000388  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1348  00038C  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1349  000390  EC8D  F004         	call	_WS_dim	;wreg free
  1350  000394                     
  1351                           ;WS2812b/BitBangWS2812b.c: 123:         b++;
  1352  000394  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1353  000396  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1354  000398                     
  1355                           ;WS2812b/BitBangWS2812b.c: 124:         if(b == length) break;
  1356  000398  5023               	movf	WS_RYGCBM@length^0,w,c
  1357  00039A  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1358  00039C  E107               	bnz	u601
  1359  00039E  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1360  0003A0  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1361  0003A2  A4D8               	btfss	status,2,c
  1362  0003A4  EFD6  F001         	goto	u601
  1363  0003A8  EFD8  F001         	goto	u600
  1364  0003AC                     u601:
  1365  0003AC  EFDA  F001         	goto	l1409
  1366  0003B0                     u600:
  1367  0003B0  EF8B  F002         	goto	l1451
  1368  0003B4                     l1409:
  1369                           
  1370                           ;WS2812b/BitBangWS2812b.c: 125:         WS_dim(0xFF, 0xFF, 0x00, brightness);
  1371  0003B4  0E00               	movlw	0
  1372  0003B6  6E19               	movwf	(WS_dim@A+1)^0,c
  1373  0003B8  6818               	setf	WS_dim@A^0,c
  1374  0003BA  0E00               	movlw	0
  1375  0003BC  6E1B               	movwf	(WS_dim@B+1)^0,c
  1376  0003BE  681A               	setf	WS_dim@B^0,c
  1377  0003C0  0E00               	movlw	0
  1378  0003C2  6E1D               	movwf	(WS_dim@C+1)^0,c
  1379  0003C4  0E00               	movlw	0
  1380  0003C6  6E1C               	movwf	WS_dim@C^0,c
  1381  0003C8  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1382  0003CC  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1383  0003D0  EC8D  F004         	call	_WS_dim	;wreg free
  1384  0003D4                     
  1385                           ;WS2812b/BitBangWS2812b.c: 126:         b++;
  1386  0003D4  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1387  0003D6  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1388  0003D8                     
  1389                           ;WS2812b/BitBangWS2812b.c: 127:         if(b == length) break;
  1390  0003D8  5023               	movf	WS_RYGCBM@length^0,w,c
  1391  0003DA  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1392  0003DC  E107               	bnz	u611
  1393  0003DE  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1394  0003E0  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1395  0003E2  A4D8               	btfss	status,2,c
  1396  0003E4  EFF6  F001         	goto	u611
  1397  0003E8  EFF8  F001         	goto	u610
  1398  0003EC                     u611:
  1399  0003EC  EFFA  F001         	goto	l1417
  1400  0003F0                     u610:
  1401  0003F0  EF8B  F002         	goto	l1451
  1402  0003F4                     l1417:
  1403                           
  1404                           ;WS2812b/BitBangWS2812b.c: 128:         WS_dim(0x00, 0xFF, 0x00, brightness);
  1405  0003F4  0E00               	movlw	0
  1406  0003F6  6E19               	movwf	(WS_dim@A+1)^0,c
  1407  0003F8  0E00               	movlw	0
  1408  0003FA  6E18               	movwf	WS_dim@A^0,c
  1409  0003FC  0E00               	movlw	0
  1410  0003FE  6E1B               	movwf	(WS_dim@B+1)^0,c
  1411  000400  681A               	setf	WS_dim@B^0,c
  1412  000402  0E00               	movlw	0
  1413  000404  6E1D               	movwf	(WS_dim@C+1)^0,c
  1414  000406  0E00               	movlw	0
  1415  000408  6E1C               	movwf	WS_dim@C^0,c
  1416  00040A  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1417  00040E  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1418  000412  EC8D  F004         	call	_WS_dim	;wreg free
  1419  000416                     
  1420                           ;WS2812b/BitBangWS2812b.c: 129:         b++;
  1421  000416  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1422  000418  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1423  00041A                     
  1424                           ;WS2812b/BitBangWS2812b.c: 130:         if(b == length) break;
  1425  00041A  5023               	movf	WS_RYGCBM@length^0,w,c
  1426  00041C  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1427  00041E  E107               	bnz	u621
  1428  000420  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1429  000422  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1430  000424  A4D8               	btfss	status,2,c
  1431  000426  EF17  F002         	goto	u621
  1432  00042A  EF19  F002         	goto	u620
  1433  00042E                     u621:
  1434  00042E  EF1B  F002         	goto	l1425
  1435  000432                     u620:
  1436  000432  EF8B  F002         	goto	l1451
  1437  000436                     l1425:
  1438                           
  1439                           ;WS2812b/BitBangWS2812b.c: 131:         WS_dim(0x00, 0xFF, 0xFF, brightness);
  1440  000436  0E00               	movlw	0
  1441  000438  6E19               	movwf	(WS_dim@A+1)^0,c
  1442  00043A  0E00               	movlw	0
  1443  00043C  6E18               	movwf	WS_dim@A^0,c
  1444  00043E  0E00               	movlw	0
  1445  000440  6E1B               	movwf	(WS_dim@B+1)^0,c
  1446  000442  681A               	setf	WS_dim@B^0,c
  1447  000444  0E00               	movlw	0
  1448  000446  6E1D               	movwf	(WS_dim@C+1)^0,c
  1449  000448  681C               	setf	WS_dim@C^0,c
  1450  00044A  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1451  00044E  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1452  000452  EC8D  F004         	call	_WS_dim	;wreg free
  1453  000456                     
  1454                           ;WS2812b/BitBangWS2812b.c: 132:         b++;
  1455  000456  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1456  000458  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1457  00045A                     
  1458                           ;WS2812b/BitBangWS2812b.c: 133:         if(b == length) break;
  1459  00045A  5023               	movf	WS_RYGCBM@length^0,w,c
  1460  00045C  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1461  00045E  E107               	bnz	u631
  1462  000460  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1463  000462  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1464  000464  A4D8               	btfss	status,2,c
  1465  000466  EF37  F002         	goto	u631
  1466  00046A  EF39  F002         	goto	u630
  1467  00046E                     u631:
  1468  00046E  EF3B  F002         	goto	l1433
  1469  000472                     u630:
  1470  000472  EF8B  F002         	goto	l1451
  1471  000476                     l1433:
  1472                           
  1473                           ;WS2812b/BitBangWS2812b.c: 134:         WS_dim(0x00, 0x00, 0xFF, brightness);
  1474  000476  0E00               	movlw	0
  1475  000478  6E19               	movwf	(WS_dim@A+1)^0,c
  1476  00047A  0E00               	movlw	0
  1477  00047C  6E18               	movwf	WS_dim@A^0,c
  1478  00047E  0E00               	movlw	0
  1479  000480  6E1B               	movwf	(WS_dim@B+1)^0,c
  1480  000482  0E00               	movlw	0
  1481  000484  6E1A               	movwf	WS_dim@B^0,c
  1482  000486  0E00               	movlw	0
  1483  000488  6E1D               	movwf	(WS_dim@C+1)^0,c
  1484  00048A  681C               	setf	WS_dim@C^0,c
  1485  00048C  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1486  000490  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1487  000494  EC8D  F004         	call	_WS_dim	;wreg free
  1488  000498                     
  1489                           ;WS2812b/BitBangWS2812b.c: 135:         b++;
  1490  000498  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1491  00049A  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1492  00049C                     
  1493                           ;WS2812b/BitBangWS2812b.c: 136:         if(b == length) break;
  1494  00049C  5023               	movf	WS_RYGCBM@length^0,w,c
  1495  00049E  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1496  0004A0  E107               	bnz	u641
  1497  0004A2  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1498  0004A4  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1499  0004A6  A4D8               	btfss	status,2,c
  1500  0004A8  EF58  F002         	goto	u641
  1501  0004AC  EF5A  F002         	goto	u640
  1502  0004B0                     u641:
  1503  0004B0  EF5C  F002         	goto	l1441
  1504  0004B4                     u640:
  1505  0004B4  EF8B  F002         	goto	l1451
  1506  0004B8                     l1441:
  1507                           
  1508                           ;WS2812b/BitBangWS2812b.c: 137:         WS_dim(0xFF, 0x00, 0xFF, brightness);
  1509  0004B8  0E00               	movlw	0
  1510  0004BA  6E19               	movwf	(WS_dim@A+1)^0,c
  1511  0004BC  6818               	setf	WS_dim@A^0,c
  1512  0004BE  0E00               	movlw	0
  1513  0004C0  6E1B               	movwf	(WS_dim@B+1)^0,c
  1514  0004C2  0E00               	movlw	0
  1515  0004C4  6E1A               	movwf	WS_dim@B^0,c
  1516  0004C6  0E00               	movlw	0
  1517  0004C8  6E1D               	movwf	(WS_dim@C+1)^0,c
  1518  0004CA  681C               	setf	WS_dim@C^0,c
  1519  0004CC  C025  F01E         	movff	WS_RYGCBM@brightness,WS_dim@brightness
  1520  0004D0  C026  F01F         	movff	WS_RYGCBM@brightness+1,WS_dim@brightness+1
  1521  0004D4  EC8D  F004         	call	_WS_dim	;wreg free
  1522  0004D8                     
  1523                           ;WS2812b/BitBangWS2812b.c: 138:         b++;
  1524  0004D8  4A2C               	infsnz	WS_RYGCBM@b^0,f,c
  1525  0004DA  2A2D               	incf	(WS_RYGCBM@b+1)^0,f,c
  1526  0004DC                     
  1527                           ;WS2812b/BitBangWS2812b.c: 139:         if(b == length) break;
  1528  0004DC  5023               	movf	WS_RYGCBM@length^0,w,c
  1529  0004DE  182C               	xorwf	WS_RYGCBM@b^0,w,c
  1530  0004E0  E107               	bnz	u651
  1531  0004E2  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1532  0004E4  182D               	xorwf	(WS_RYGCBM@b+1)^0,w,c
  1533  0004E6  A4D8               	btfss	status,2,c
  1534  0004E8  EF78  F002         	goto	u651
  1535  0004EC  EF7A  F002         	goto	u650
  1536  0004F0                     u651:
  1537  0004F0  EF7C  F002         	goto	l1449
  1538  0004F4                     u650:
  1539  0004F4  EF8B  F002         	goto	l1451
  1540  0004F8                     l1449:
  1541                           
  1542                           ;WS2812b/BitBangWS2812b.c: 120:     while(b < length)
  1543  0004F8  5023               	movf	WS_RYGCBM@length^0,w,c
  1544  0004FA  5C2C               	subwf	WS_RYGCBM@b^0,w,c
  1545  0004FC  502D               	movf	(WS_RYGCBM@b+1)^0,w,c
  1546  0004FE  0A80               	xorlw	128
  1547  000500  6E27               	movwf	??_WS_RYGCBM^0,c
  1548  000502  5024               	movf	(WS_RYGCBM@length+1)^0,w,c
  1549  000504  0A80               	xorlw	128
  1550  000506  5827               	subwfb	??_WS_RYGCBM^0,w,c
  1551  000508  A0D8               	btfss	status,0,c
  1552  00050A  EF89  F002         	goto	u661
  1553  00050E  EF8B  F002         	goto	u660
  1554  000512                     u661:
  1555  000512  EFB9  F001         	goto	l1401
  1556  000516                     u660:
  1557  000516                     l1451:
  1558                           
  1559                           ;WS2812b/BitBangWS2812b.c: 141:     _delay((unsigned long)((0.280)*(32000000/4000.0)));
  1560  000516  0E03               	movlw	3
  1561  000518  6E27               	movwf	??_WS_RYGCBM^0,c
  1562  00051A  0EE8               	movlw	232
  1563  00051C                     u997:
  1564  00051C  2EE8               	decfsz	wreg,f,c
  1565  00051E  D7FE               	bra	u997
  1566  000520  2E27               	decfsz	??_WS_RYGCBM^0,f,c
  1567  000522  D7FC               	bra	u997
  1568  000524  0012               	return		;funcret
  1569  000526                     __end_of_WS_RYGCBM:
  1570                           	callstack 0
  1571                           
  1572 ;; *************** function _WS_dim *****************
  1573 ;; Defined at:
  1574 ;;		line 22 in file "WS2812b/BitBangWS2812b.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  A               2   23[COMRAM] int 
  1577 ;;  B               2   25[COMRAM] int 
  1578 ;;  C               2   27[COMRAM] int 
  1579 ;;  brightness      2   29[COMRAM] int 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;  f               2   32[COMRAM] int 
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1
  1591 ;;      Params:         8       0       0
  1592 ;;      Locals:         2       0       0
  1593 ;;      Temps:          1       0       0
  1594 ;;      Totals:        11       0       0
  1595 ;;Total ram usage:       11 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; Hardware stack levels required when called:    5
  1598 ;; This function calls:
  1599 ;;		_WS_Word
  1600 ;;		___wmul
  1601 ;; This function is called by:
  1602 ;;		_WS_RYGCBM
  1603 ;;		_WSWalk
  1604 ;;		_WS_White
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text5
  1609  00091A                     __ptext5:
  1610                           	callstack 0
  1611  00091A                     _WS_dim:
  1612                           	callstack 24
  1613  00091A                     
  1614                           ;WS2812b/BitBangWS2812b.c: 22: void WS_dim(int A, int B, int C, int brightness);WS2812b/
      +                          BitBangWS2812b.c: 23: {;WS2812b/BitBangWS2812b.c: 24:     int f = 255 - 5*brightness;
  1615  00091A  C01E  F003         	movff	WS_dim@brightness,___wmul@multiplier
  1616  00091E  C01F  F004         	movff	WS_dim@brightness+1,___wmul@multiplier+1
  1617  000922  0EFF               	movlw	255
  1618  000924  6E06               	movwf	(___wmul@multiplicand+1)^0,c
  1619  000926  0EFB               	movlw	251
  1620  000928  6E05               	movwf	___wmul@multiplicand^0,c
  1621  00092A  ECD7  F005         	call	___wmul	;wreg free
  1622  00092E  0EFF               	movlw	255
  1623  000930  2403               	addwf	?___wmul^0,w,c
  1624  000932  6E21               	movwf	WS_dim@f^0,c
  1625  000934  0E00               	movlw	0
  1626  000936  2004               	addwfc	(?___wmul+1)^0,w,c
  1627  000938  6E22               	movwf	(WS_dim@f+1)^0,c
  1628  00093A                     
  1629                           ;WS2812b/BitBangWS2812b.c: 25:     if( A >=f )
  1630  00093A  5021               	movf	WS_dim@f^0,w,c
  1631  00093C  5C18               	subwf	WS_dim@A^0,w,c
  1632  00093E  5019               	movf	(WS_dim@A+1)^0,w,c
  1633  000940  0A80               	xorlw	128
  1634  000942  6E20               	movwf	??_WS_dim^0,c
  1635  000944  5022               	movf	(WS_dim@f+1)^0,w,c
  1636  000946  0A80               	xorlw	128
  1637  000948  5820               	subwfb	??_WS_dim^0,w,c
  1638  00094A  A0D8               	btfss	status,0,c
  1639  00094C  EFAA  F004         	goto	u561
  1640  000950  EFAC  F004         	goto	u560
  1641  000954                     u561:
  1642  000954  EFB2  F004         	goto	l151
  1643  000958                     u560:
  1644  000958                     
  1645                           ;WS2812b/BitBangWS2812b.c: 26:     {;WS2812b/BitBangWS2812b.c: 27:         A = A - f;
  1646  000958  5021               	movf	WS_dim@f^0,w,c
  1647  00095A  5C18               	subwf	WS_dim@A^0,w,c
  1648  00095C  6E18               	movwf	WS_dim@A^0,c
  1649  00095E  5022               	movf	(WS_dim@f+1)^0,w,c
  1650  000960  5819               	subwfb	(WS_dim@A+1)^0,w,c
  1651  000962  6E19               	movwf	(WS_dim@A+1)^0,c
  1652  000964                     l151:
  1653                           
  1654                           ;WS2812b/BitBangWS2812b.c: 29:     if( B >=f )
  1655  000964  5021               	movf	WS_dim@f^0,w,c
  1656  000966  5C1A               	subwf	WS_dim@B^0,w,c
  1657  000968  501B               	movf	(WS_dim@B+1)^0,w,c
  1658  00096A  0A80               	xorlw	128
  1659  00096C  6E20               	movwf	??_WS_dim^0,c
  1660  00096E  5022               	movf	(WS_dim@f+1)^0,w,c
  1661  000970  0A80               	xorlw	128
  1662  000972  5820               	subwfb	??_WS_dim^0,w,c
  1663  000974  A0D8               	btfss	status,0,c
  1664  000976  EFBF  F004         	goto	u571
  1665  00097A  EFC1  F004         	goto	u570
  1666  00097E                     u571:
  1667  00097E  EFC7  F004         	goto	l152
  1668  000982                     u570:
  1669  000982                     
  1670                           ;WS2812b/BitBangWS2812b.c: 30:     {;WS2812b/BitBangWS2812b.c: 31:         B = B - f;
  1671  000982  5021               	movf	WS_dim@f^0,w,c
  1672  000984  5C1A               	subwf	WS_dim@B^0,w,c
  1673  000986  6E1A               	movwf	WS_dim@B^0,c
  1674  000988  5022               	movf	(WS_dim@f+1)^0,w,c
  1675  00098A  581B               	subwfb	(WS_dim@B+1)^0,w,c
  1676  00098C  6E1B               	movwf	(WS_dim@B+1)^0,c
  1677  00098E                     l152:
  1678                           
  1679                           ;WS2812b/BitBangWS2812b.c: 33:     if( C >=f )
  1680  00098E  5021               	movf	WS_dim@f^0,w,c
  1681  000990  5C1C               	subwf	WS_dim@C^0,w,c
  1682  000992  501D               	movf	(WS_dim@C+1)^0,w,c
  1683  000994  0A80               	xorlw	128
  1684  000996  6E20               	movwf	??_WS_dim^0,c
  1685  000998  5022               	movf	(WS_dim@f+1)^0,w,c
  1686  00099A  0A80               	xorlw	128
  1687  00099C  5820               	subwfb	??_WS_dim^0,w,c
  1688  00099E  A0D8               	btfss	status,0,c
  1689  0009A0  EFD4  F004         	goto	u581
  1690  0009A4  EFD6  F004         	goto	u580
  1691  0009A8                     u581:
  1692  0009A8  EFDC  F004         	goto	l1385
  1693  0009AC                     u580:
  1694  0009AC                     
  1695                           ;WS2812b/BitBangWS2812b.c: 34:     {;WS2812b/BitBangWS2812b.c: 35:         C = C - f;
  1696  0009AC  5021               	movf	WS_dim@f^0,w,c
  1697  0009AE  5C1C               	subwf	WS_dim@C^0,w,c
  1698  0009B0  6E1C               	movwf	WS_dim@C^0,c
  1699  0009B2  5022               	movf	(WS_dim@f+1)^0,w,c
  1700  0009B4  581D               	subwfb	(WS_dim@C+1)^0,w,c
  1701  0009B6  6E1D               	movwf	(WS_dim@C+1)^0,c
  1702  0009B8                     l1385:
  1703                           
  1704                           ;WS2812b/BitBangWS2812b.c: 37:     WS_Word(A, B, C);
  1705  0009B8  C018  F005         	movff	WS_dim@A,WS_Word@A
  1706  0009BC  C019  F006         	movff	WS_dim@A+1,WS_Word@A+1
  1707  0009C0  C01A  F007         	movff	WS_dim@B,WS_Word@B
  1708  0009C4  C01B  F008         	movff	WS_dim@B+1,WS_Word@B+1
  1709  0009C8  C01C  F009         	movff	WS_dim@C,WS_Word@C
  1710  0009CC  C01D  F00A         	movff	WS_dim@C+1,WS_Word@C+1
  1711  0009D0  ECFF  F003         	call	_WS_Word	;wreg free
  1712  0009D4  0012               	return		;funcret
  1713  0009D6                     __end_of_WS_dim:
  1714                           	callstack 0
  1715                           
  1716 ;; *************** function ___wmul *****************
  1717 ;; Defined at:
  1718 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\Umul16.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  multiplier      2    2[COMRAM] unsigned int 
  1721 ;;  multiplicand    2    4[COMRAM] unsigned int 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  product         2    6[COMRAM] unsigned int 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  2    2[COMRAM] unsigned int 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0, prodl, prodh
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1
  1733 ;;      Params:         4       0       0
  1734 ;;      Locals:         2       0       0
  1735 ;;      Temps:          0       0       0
  1736 ;;      Totals:         6       0       0
  1737 ;;Total ram usage:        6 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    3
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_WS_dim
  1744 ;;		_WSWalk
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text6
  1749  000BAE                     __ptext6:
  1750                           	callstack 0
  1751  000BAE                     ___wmul:
  1752                           	callstack 26
  1753  000BAE  5003               	movf	___wmul@multiplier^0,w,c
  1754  000BB0  0205               	mulwf	___wmul@multiplicand^0,c
  1755  000BB2  CFF3 F007          	movff	prodl,___wmul@product
  1756  000BB6  CFF4 F008          	movff	prodh,___wmul@product+1
  1757  000BBA  5003               	movf	___wmul@multiplier^0,w,c
  1758  000BBC  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  1759  000BBE  50F3               	movf	243,w,c
  1760  000BC0  2608               	addwf	(___wmul@product+1)^0,f,c
  1761  000BC2  5004               	movf	(___wmul@multiplier+1)^0,w,c
  1762  000BC4  0205               	mulwf	___wmul@multiplicand^0,c
  1763  000BC6  50F3               	movf	243,w,c
  1764  000BC8  2608               	addwf	(___wmul@product+1)^0,f,c
  1765  000BCA  C007  F003         	movff	___wmul@product,?___wmul
  1766  000BCE  C008  F004         	movff	___wmul@product+1,?___wmul+1
  1767  000BD2  0012               	return		;funcret
  1768  000BD4                     __end_of___wmul:
  1769                           	callstack 0
  1770                           
  1771 ;; *************** function _WS_Word *****************
  1772 ;; Defined at:
  1773 ;;		line 40 in file "WS2812b/BitBangWS2812b.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;  A               2    4[COMRAM] int 
  1776 ;;  B               2    6[COMRAM] int 
  1777 ;;  C               2    8[COMRAM] int 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  x               2   17[COMRAM] int 
  1780 ;;  x               2   15[COMRAM] int 
  1781 ;;  x               2   13[COMRAM] int 
  1782 ;;  i               2   21[COMRAM] int 
  1783 ;;  Bx              2   19[COMRAM] int 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2, status,0, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1
  1793 ;;      Params:         6       0       0
  1794 ;;      Locals:        10       0       0
  1795 ;;      Temps:          3       0       0
  1796 ;;      Totals:        19       0       0
  1797 ;;Total ram usage:       19 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    4
  1800 ;; This function calls:
  1801 ;;		_WS_Write
  1802 ;; This function is called by:
  1803 ;;		_WS_dim
  1804 ;;		_WSTest
  1805 ;;		_WSLoop
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text7
  1810  0007FE                     __ptext7:
  1811                           	callstack 0
  1812  0007FE                     _WS_Word:
  1813                           	callstack 24
  1814  0007FE                     
  1815                           ;WS2812b/BitBangWS2812b.c: 49:     for(int i=23; i!=-1; i--)
  1816  0007FE  0E00               	movlw	0
  1817  000800  6E17               	movwf	(WS_Word@i+1)^0,c
  1818  000802  0E17               	movlw	23
  1819  000804  6E16               	movwf	WS_Word@i^0,c
  1820  000806                     l1345:
  1821                           
  1822                           ;WS2812b/BitBangWS2812b.c: 50:     {;WS2812b/BitBangWS2812b.c: 51:         if(i>15)
  1823  000806  BE17               	btfsc	(WS_Word@i+1)^0,7,c
  1824  000808  EF0F  F004         	goto	u491
  1825  00080C  5017               	movf	(WS_Word@i+1)^0,w,c
  1826  00080E  E109               	bnz	u490
  1827  000810  0E10               	movlw	16
  1828  000812  5C16               	subwf	WS_Word@i^0,w,c
  1829  000814  A0D8               	btfss	status,0,c
  1830  000816  EF0F  F004         	goto	u491
  1831  00081A  EF11  F004         	goto	u490
  1832  00081E                     u491:
  1833  00081E  EF2C  F004         	goto	l1349
  1834  000822                     u490:
  1835  000822                     
  1836                           ;WS2812b/BitBangWS2812b.c: 52:         {;WS2812b/BitBangWS2812b.c: 53:             int x
      +                           = i - 16;
  1837  000822  0EF0               	movlw	240
  1838  000824  2416               	addwf	WS_Word@i^0,w,c
  1839  000826  6E0E               	movwf	WS_Word@x^0,c
  1840  000828  0EFF               	movlw	255
  1841  00082A  2017               	addwfc	(WS_Word@i+1)^0,w,c
  1842  00082C  6E0F               	movwf	(WS_Word@x+1)^0,c
  1843                           
  1844                           ;WS2812b/BitBangWS2812b.c: 54:             Bx = 1 & ( A >> x );
  1845  00082E  C00E  F00B         	movff	WS_Word@x,??_WS_Word
  1846  000832  C005  F00C         	movff	WS_Word@A,??_WS_Word+1
  1847  000836  C006  F00D         	movff	WS_Word@A+1,??_WS_Word+2
  1848  00083A  2A0B               	incf	??_WS_Word^0,f,c
  1849  00083C  EF23  F004         	goto	u504
  1850  000840                     u505:
  1851  000840  340D               	rlcf	(??_WS_Word+2)^0,w,c
  1852  000842  320D               	rrcf	(??_WS_Word+2)^0,f,c
  1853  000844  320C               	rrcf	(??_WS_Word+1)^0,f,c
  1854  000846                     u504:
  1855  000846  2E0B               	decfsz	??_WS_Word^0,f,c
  1856  000848  EF20  F004         	goto	u505
  1857  00084C  0E01               	movlw	1
  1858  00084E  140C               	andwf	(??_WS_Word+1)^0,w,c
  1859  000850  6E14               	movwf	WS_Word@Bx^0,c
  1860  000852  6A15               	clrf	(WS_Word@Bx+1)^0,c
  1861                           
  1862                           ;WS2812b/BitBangWS2812b.c: 55:         }
  1863  000854  EF79  F004         	goto	l1361
  1864  000858                     l1349:
  1865  000858  BE17               	btfsc	(WS_Word@i+1)^0,7,c
  1866  00085A  EF38  F004         	goto	u511
  1867  00085E  5017               	movf	(WS_Word@i+1)^0,w,c
  1868  000860  E109               	bnz	u510
  1869  000862  0E08               	movlw	8
  1870  000864  5C16               	subwf	WS_Word@i^0,w,c
  1871  000866  A0D8               	btfss	status,0,c
  1872  000868  EF38  F004         	goto	u511
  1873  00086C  EF3A  F004         	goto	u510
  1874  000870                     u511:
  1875  000870  EF55  F004         	goto	l1353
  1876  000874                     u510:
  1877  000874                     
  1878                           ;WS2812b/BitBangWS2812b.c: 57:         {;WS2812b/BitBangWS2812b.c: 58:             int x
      +                           = i - 8;
  1879  000874  0EF8               	movlw	248
  1880  000876  2416               	addwf	WS_Word@i^0,w,c
  1881  000878  6E10               	movwf	WS_Word@x_591^0,c
  1882  00087A  0EFF               	movlw	255
  1883  00087C  2017               	addwfc	(WS_Word@i+1)^0,w,c
  1884  00087E  6E11               	movwf	(WS_Word@x_591+1)^0,c
  1885                           
  1886                           ;WS2812b/BitBangWS2812b.c: 59:             Bx = 0b00000001 & ( B >> x );
  1887  000880  C010  F00B         	movff	WS_Word@x_591,??_WS_Word
  1888  000884  C007  F00C         	movff	WS_Word@B,??_WS_Word+1
  1889  000888  C008  F00D         	movff	WS_Word@B+1,??_WS_Word+2
  1890  00088C  2A0B               	incf	??_WS_Word^0,f,c
  1891  00088E  EF4C  F004         	goto	u524
  1892  000892                     u525:
  1893  000892  340D               	rlcf	(??_WS_Word+2)^0,w,c
  1894  000894  320D               	rrcf	(??_WS_Word+2)^0,f,c
  1895  000896  320C               	rrcf	(??_WS_Word+1)^0,f,c
  1896  000898                     u524:
  1897  000898  2E0B               	decfsz	??_WS_Word^0,f,c
  1898  00089A  EF49  F004         	goto	u525
  1899  00089E  0E01               	movlw	1
  1900  0008A0  140C               	andwf	(??_WS_Word+1)^0,w,c
  1901  0008A2  6E14               	movwf	WS_Word@Bx^0,c
  1902  0008A4  6A15               	clrf	(WS_Word@Bx+1)^0,c
  1903                           
  1904                           ;WS2812b/BitBangWS2812b.c: 60:         }
  1905  0008A6  EF79  F004         	goto	l1361
  1906  0008AA                     l1353:
  1907  0008AA  BE17               	btfsc	(WS_Word@i+1)^0,7,c
  1908  0008AC  EF5A  F004         	goto	u531
  1909  0008B0  EF5C  F004         	goto	u530
  1910  0008B4                     u531:
  1911  0008B4  EF75  F004         	goto	l1359
  1912  0008B8                     u530:
  1913  0008B8                     
  1914                           ;WS2812b/BitBangWS2812b.c: 62:         {;WS2812b/BitBangWS2812b.c: 63:             int x
      +                           = i;
  1915  0008B8  C016  F012         	movff	WS_Word@i,WS_Word@x_592
  1916  0008BC  C017  F013         	movff	WS_Word@i+1,WS_Word@x_592+1
  1917  0008C0                     
  1918                           ;WS2812b/BitBangWS2812b.c: 64:             Bx = 0b00000001 & ( C >> x );
  1919  0008C0  C012  F00B         	movff	WS_Word@x_592,??_WS_Word
  1920  0008C4  C009  F00C         	movff	WS_Word@C,??_WS_Word+1
  1921  0008C8  C00A  F00D         	movff	WS_Word@C+1,??_WS_Word+2
  1922  0008CC  2A0B               	incf	??_WS_Word^0,f,c
  1923  0008CE  EF6C  F004         	goto	u544
  1924  0008D2                     u545:
  1925  0008D2  340D               	rlcf	(??_WS_Word+2)^0,w,c
  1926  0008D4  320D               	rrcf	(??_WS_Word+2)^0,f,c
  1927  0008D6  320C               	rrcf	(??_WS_Word+1)^0,f,c
  1928  0008D8                     u544:
  1929  0008D8  2E0B               	decfsz	??_WS_Word^0,f,c
  1930  0008DA  EF69  F004         	goto	u545
  1931  0008DE  0E01               	movlw	1
  1932  0008E0  140C               	andwf	(??_WS_Word+1)^0,w,c
  1933  0008E2  6E14               	movwf	WS_Word@Bx^0,c
  1934  0008E4  6A15               	clrf	(WS_Word@Bx+1)^0,c
  1935                           
  1936                           ;WS2812b/BitBangWS2812b.c: 65:         }
  1937  0008E6  EF79  F004         	goto	l1361
  1938  0008EA                     l1359:
  1939                           
  1940                           ;WS2812b/BitBangWS2812b.c: 67:         {;WS2812b/BitBangWS2812b.c: 68:             Bx = 
      +                          1;
  1941  0008EA  0E00               	movlw	0
  1942  0008EC  6E15               	movwf	(WS_Word@Bx+1)^0,c
  1943  0008EE  0E01               	movlw	1
  1944  0008F0  6E14               	movwf	WS_Word@Bx^0,c
  1945  0008F2                     l1361:
  1946                           
  1947                           ;WS2812b/BitBangWS2812b.c: 70:         WS_Write(Bx);
  1948  0008F2  C014  F003         	movff	WS_Word@Bx,WS_Write@A
  1949  0008F6  C015  F004         	movff	WS_Word@Bx+1,WS_Write@A+1
  1950  0008FA  ECEA  F005         	call	_WS_Write	;wreg free
  1951  0008FE                     
  1952                           ;WS2812b/BitBangWS2812b.c: 71:     }
  1953  0008FE  0616               	decf	WS_Word@i^0,f,c
  1954  000900  A0D8               	btfss	status,0,c
  1955  000902  0617               	decf	(WS_Word@i+1)^0,f,c
  1956  000904  2816               	incf	WS_Word@i^0,w,c
  1957  000906  E106               	bnz	u551
  1958  000908  2817               	incf	(WS_Word@i+1)^0,w,c
  1959  00090A  A4D8               	btfss	status,2,c
  1960  00090C  EF8A  F004         	goto	u551
  1961  000910  EF8C  F004         	goto	u550
  1962  000914                     u551:
  1963  000914  EF03  F004         	goto	l1345
  1964  000918                     u550:
  1965  000918  0012               	return		;funcret
  1966  00091A                     __end_of_WS_Word:
  1967                           	callstack 0
  1968                           
  1969 ;; *************** function _WS_Write *****************
  1970 ;; Defined at:
  1971 ;;		line 75 in file "WS2812b/BitBangWS2812b.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  A               2    2[COMRAM] int 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1
  1985 ;;      Params:         2       0       0
  1986 ;;      Locals:         0       0       0
  1987 ;;      Temps:          0       0       0
  1988 ;;      Totals:         2       0       0
  1989 ;;Total ram usage:        2 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    3
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_WS_Word
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text8
  2000  000BD4                     __ptext8:
  2001                           	callstack 0
  2002  000BD4                     _WS_Write:
  2003                           	callstack 24
  2004  000BD4                     
  2005                           ;WS2812b/BitBangWS2812b.c: 75: void WS_Write( int A );WS2812b/BitBangWS2812b.c: 76: {;WS
      +                          2812b/BitBangWS2812b.c: 77:     if(A)
  2006  000BD4  5003               	movf	WS_Write@A^0,w,c
  2007  000BD6  1004               	iorwf	(WS_Write@A+1)^0,w,c
  2008  000BD8  B4D8               	btfsc	status,2,c
  2009  000BDA  EFF1  F005         	goto	u481
  2010  000BDE  EFF3  F005         	goto	u480
  2011  000BE2                     u481:
  2012  000BE2  EFFA  F005         	goto	l168
  2013  000BE6                     u480:
  2014  000BE6                     
  2015                           ;WS2812b/BitBangWS2812b.c: 78:     {;WS2812b/BitBangWS2812b.c: 79:         LATAbits.LATA
      +                          2 = 1;
  2016  000BE6  8489               	bsf	137,2,c	;volatile
  2017                           
  2018                           ;WS2812b/BitBangWS2812b.c: 80:         __nop();
  2019  000BE8  F000               	nop	
  2020                           
  2021                           ;WS2812b/BitBangWS2812b.c: 81:         __nop();
  2022  000BEA  F000               	nop	
  2023                           
  2024                           ;WS2812b/BitBangWS2812b.c: 82:         __nop();
  2025  000BEC  F000               	nop	
  2026                           
  2027                           ;WS2812b/BitBangWS2812b.c: 83:         LATAbits.LATA2 = 0;
  2028  000BEE  9489               	bcf	137,2,c	;volatile
  2029                           
  2030                           ;WS2812b/BitBangWS2812b.c: 84:     }
  2031  000BF0  EFFC  F005         	goto	l170
  2032  000BF4                     l168:
  2033                           
  2034                           ;WS2812b/BitBangWS2812b.c: 86:     {;WS2812b/BitBangWS2812b.c: 87:         LATAbits.LATA
      +                          2 = 1;
  2035  000BF4  8489               	bsf	137,2,c	;volatile
  2036                           
  2037                           ;WS2812b/BitBangWS2812b.c: 88:         LATAbits.LATA2 = 0;
  2038  000BF6  9489               	bcf	137,2,c	;volatile
  2039  000BF8                     l170:
  2040  000BF8  0012               	return		;funcret
  2041  000BFA                     __end_of_WS_Write:
  2042                           	callstack 0
  2043                           
  2044 ;; *************** function _SYSTEM_Initialize *****************
  2045 ;; Defined at:
  2046 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      void 
  2053 ;; Registers used:
  2054 ;;		wreg, status,2, status,0, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1
  2060 ;;      Params:         0       0       0
  2061 ;;      Locals:         0       0       0
  2062 ;;      Temps:          0       0       0
  2063 ;;      Totals:         0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    5
  2067 ;; This function calls:
  2068 ;;		_ADC1_Initialize
  2069 ;;		_INTERRUPT_Initialize
  2070 ;;		_OSCILLATOR_Initialize
  2071 ;;		_PIN_MANAGER_Initialize
  2072 ;; This function is called by:
  2073 ;;		_main
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text9
  2078  000C36                     __ptext9:
  2079                           	callstack 0
  2080  000C36                     _SYSTEM_Initialize:
  2081                           	callstack 25
  2082  000C36                     
  2083                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
  2084  000C36  EC37  F006         	call	_INTERRUPT_Initialize	;wreg free
  2085  000C3A                     
  2086                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  2087  000C3A  ECC1  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  2088  000C3E                     
  2089                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  2090  000C3E  EC2B  F006         	call	_OSCILLATOR_Initialize	;wreg free
  2091  000C42                     
  2092                           ;mcc_generated_files/mcc.c: 56:     ADC1_Initialize();
  2093  000C42  ECFD  F005         	call	_ADC1_Initialize	;wreg free
  2094  000C46  0012               	return		;funcret
  2095  000C48                     __end_of_SYSTEM_Initialize:
  2096                           	callstack 0
  2097                           
  2098 ;; *************** function _PIN_MANAGER_Initialize *****************
  2099 ;; Defined at:
  2100 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;		None
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;		None
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  1    wreg      void 
  2107 ;; Registers used:
  2108 ;;		wreg, status,2
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMRAM   BANK0   BANK1
  2114 ;;      Params:         0       0       0
  2115 ;;      Locals:         0       0       0
  2116 ;;      Temps:          0       0       0
  2117 ;;      Totals:         0       0       0
  2118 ;;Total ram usage:        0 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:    3
  2121 ;; This function calls:
  2122 ;;		Nothing
  2123 ;; This function is called by:
  2124 ;;		_SYSTEM_Initialize
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text10
  2129  000B82                     __ptext10:
  2130                           	callstack 0
  2131  000B82                     _PIN_MANAGER_Initialize:
  2132                           	callstack 26
  2133  000B82                     
  2134                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2135  000B82  0E00               	movlw	0
  2136  000B84  6E89               	movwf	137,c	;volatile
  2137                           
  2138                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  2139  000B86  0E00               	movlw	0
  2140  000B88  6E8A               	movwf	138,c	;volatile
  2141                           
  2142                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  2143  000B8A  0E00               	movlw	0
  2144  000B8C  6E8B               	movwf	139,c	;volatile
  2145                           
  2146                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
  2147  000B8E  0E33               	movlw	51
  2148  000B90  6E92               	movwf	146,c	;volatile
  2149                           
  2150                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xF0;
  2151  000B92  0EF0               	movlw	240
  2152  000B94  6E93               	movwf	147,c	;volatile
  2153                           
  2154                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFC;
  2155  000B96  0EFC               	movlw	252
  2156  000B98  6E94               	movwf	148,c	;volatile
  2157                           
  2158                           ;mcc_generated_files/pin_manager.c: 74:     ANSEL = 0xFB;
  2159  000B9A  0EFB               	movlw	251
  2160  000B9C  6E7E               	movwf	126,c	;volatile
  2161                           
  2162                           ;mcc_generated_files/pin_manager.c: 75:     ANSELH = 0x0F;
  2163  000B9E  0E0F               	movlw	15
  2164  000BA0  6E7F               	movwf	127,c	;volatile
  2165                           
  2166                           ;mcc_generated_files/pin_manager.c: 80:     WPUB = 0x80;
  2167  000BA2  0E80               	movlw	128
  2168  000BA4  6E78               	movwf	120,c	;volatile
  2169                           
  2170                           ;mcc_generated_files/pin_manager.c: 81:     WPUA = 0x3A;
  2171  000BA6  0E3A               	movlw	58
  2172  000BA8  6E77               	movwf	119,c	;volatile
  2173  000BAA                     
  2174                           ;mcc_generated_files/pin_manager.c: 82:     INTCON2bits.nRBPU = 0;
  2175  000BAA  9EF1               	bcf	241,7,c	;volatile
  2176  000BAC  0012               	return		;funcret
  2177  000BAE                     __end_of_PIN_MANAGER_Initialize:
  2178                           	callstack 0
  2179                           
  2180 ;; *************** function _OSCILLATOR_Initialize *****************
  2181 ;; Defined at:
  2182 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;		None
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;		None
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      void 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1
  2196 ;;      Params:         0       0       0
  2197 ;;      Locals:         0       0       0
  2198 ;;      Temps:          0       0       0
  2199 ;;      Totals:         0       0       0
  2200 ;;Total ram usage:        0 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    3
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_SYSTEM_Initialize
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text11
  2211  000C56                     __ptext11:
  2212                           	callstack 0
  2213  000C56                     _OSCILLATOR_Initialize:
  2214                           	callstack 26
  2215  000C56                     
  2216                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0x70;
  2217  000C56  0E70               	movlw	112
  2218  000C58  6ED3               	movwf	211,c	;volatile
  2219                           
  2220                           ;mcc_generated_files/mcc.c: 64:     OSCCON2 = 0x04;
  2221  000C5A  0E04               	movlw	4
  2222  000C5C  6ED2               	movwf	210,c	;volatile
  2223                           
  2224                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  2225  000C5E  0E00               	movlw	0
  2226  000C60  6E9B               	movwf	155,c	;volatile
  2227  000C62  0012               	return		;funcret
  2228  000C64                     __end_of_OSCILLATOR_Initialize:
  2229                           	callstack 0
  2230                           
  2231 ;; *************** function _INTERRUPT_Initialize *****************
  2232 ;; Defined at:
  2233 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		None
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1
  2247 ;;      Params:         0       0       0
  2248 ;;      Locals:         0       0       0
  2249 ;;      Temps:          0       0       0
  2250 ;;      Totals:         0       0       0
  2251 ;;Total ram usage:        0 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    3
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_SYSTEM_Initialize
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text12
  2262  000C6E                     __ptext12:
  2263                           	callstack 0
  2264  000C6E                     _INTERRUPT_Initialize:
  2265                           	callstack 26
  2266  000C6E                     
  2267                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
  2268  000C6E  9ED0               	bcf	208,7,c	;volatile
  2269  000C70  0012               	return		;funcret
  2270  000C72                     __end_of_INTERRUPT_Initialize:
  2271                           	callstack 0
  2272                           
  2273 ;; *************** function _ADC1_Initialize *****************
  2274 ;; Defined at:
  2275 ;;		line 62 in file "mcc_generated_files/adc1.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;		None
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;		None
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, status,0, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1
  2289 ;;      Params:         0       0       0
  2290 ;;      Locals:         0       0       0
  2291 ;;      Temps:          0       0       0
  2292 ;;      Totals:         0       0       0
  2293 ;;Total ram usage:        0 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    4
  2296 ;; This function calls:
  2297 ;;		_ADC1_SetInterruptHandler
  2298 ;; This function is called by:
  2299 ;;		_SYSTEM_Initialize
  2300 ;;		_main
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text13
  2305  000BFA                     __ptext13:
  2306                           	callstack 0
  2307  000BFA                     _ADC1_Initialize:
  2308                           	callstack 25
  2309  000BFA                     
  2310                           ;mcc_generated_files/adc1.c: 67:     ADCON1 = 0x00;
  2311  000BFA  0E00               	movlw	0
  2312  000BFC  6EC1               	movwf	193,c	;volatile
  2313                           
  2314                           ;mcc_generated_files/adc1.c: 70:     ADCON2 = 0xBE;
  2315  000BFE  0EBE               	movlw	190
  2316  000C00  6EC0               	movwf	192,c	;volatile
  2317                           
  2318                           ;mcc_generated_files/adc1.c: 73:     ADRESL = 0x00;
  2319  000C02  0E00               	movlw	0
  2320  000C04  6EC3               	movwf	195,c	;volatile
  2321                           
  2322                           ;mcc_generated_files/adc1.c: 76:     ADRESH = 0x00;
  2323  000C06  0E00               	movlw	0
  2324  000C08  6EC4               	movwf	196,c	;volatile
  2325                           
  2326                           ;mcc_generated_files/adc1.c: 79:     ADCON0 = 0x29;
  2327  000C0A  0E29               	movlw	41
  2328  000C0C  6EC2               	movwf	194,c	;volatile
  2329  000C0E                     
  2330                           ;mcc_generated_files/adc1.c: 82:     PIE1bits.ADIE = 1;
  2331  000C0E  8C9D               	bsf	157,6,c	;volatile
  2332  000C10                     
  2333                           ;mcc_generated_files/adc1.c: 85:     ADC1_SetInterruptHandler(ADC1_DefaultInterruptHandl
      +                          er);
  2334  000C10  0E72               	movlw	low _ADC1_DefaultInterruptHandler
  2335  000C12  6E03               	movwf	ADC1_SetInterruptHandler@InterruptHandler^0,c
  2336  000C14  0E0C               	movlw	high _ADC1_DefaultInterruptHandler
  2337  000C16  6E04               	movwf	(ADC1_SetInterruptHandler@InterruptHandler+1)^0,c
  2338  000C18  EC32  F006         	call	_ADC1_SetInterruptHandler	;wreg free
  2339  000C1C  0012               	return		;funcret
  2340  000C1E                     __end_of_ADC1_Initialize:
  2341                           	callstack 0
  2342                           
  2343 ;; *************** function _ADC1_SetInterruptHandler *****************
  2344 ;; Defined at:
  2345 ;;		line 151 in file "mcc_generated_files/adc1.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  InterruptHan    2    2[COMRAM] PTR FTN()void 
  2348 ;;		 -> ADC1_DefaultInterruptHandler(1), 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;		None
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1
  2360 ;;      Params:         2       0       0
  2361 ;;      Locals:         0       0       0
  2362 ;;      Temps:          0       0       0
  2363 ;;      Totals:         2       0       0
  2364 ;;Total ram usage:        2 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    3
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_ADC1_Initialize
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text14
  2375  000C64                     __ptext14:
  2376                           	callstack 0
  2377  000C64                     _ADC1_SetInterruptHandler:
  2378                           	callstack 25
  2379  000C64                     
  2380                           ;mcc_generated_files/adc1.c: 152:     ADC1_InterruptHandler = InterruptHandler;
  2381  000C64  C003  F040         	movff	ADC1_SetInterruptHandler@InterruptHandler,_ADC1_InterruptHandler
  2382  000C68  C004  F041         	movff	ADC1_SetInterruptHandler@InterruptHandler+1,_ADC1_InterruptHandler+1
  2383  000C6C  0012               	return		;funcret
  2384  000C6E                     __end_of_ADC1_SetInterruptHandler:
  2385                           	callstack 0
  2386                           
  2387 ;; *************** function _ADC1_SelectChannel *****************
  2388 ;; Defined at:
  2389 ;;		line 88 in file "mcc_generated_files/adc1.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  channel         1    wreg     enum E2449
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  channel         1    3[COMRAM] enum E2449
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1
  2403 ;;      Params:         0       0       0
  2404 ;;      Locals:         1       0       0
  2405 ;;      Temps:          1       0       0
  2406 ;;      Totals:         2       0       0
  2407 ;;Total ram usage:        2 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    3
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text15
  2418  000C1E                     __ptext15:
  2419                           	callstack 0
  2420  000C1E                     _ADC1_SelectChannel:
  2421                           	callstack 27
  2422                           
  2423                           ;incstack = 0
  2424                           ;ADC1_SelectChannel@channel stored from wreg
  2425  000C1E  6E04               	movwf	ADC1_SelectChannel@channel^0,c
  2426  000C20                     
  2427                           ;mcc_generated_files/adc1.c: 88: void ADC1_SelectChannel(adc_channel_t channel);mcc_gene
      +                          rated_files/adc1.c: 89: {;mcc_generated_files/adc1.c: 91:     ADCON0bits.CHS = channel;
  2428  000C20  C004  F003         	movff	ADC1_SelectChannel@channel,??_ADC1_SelectChannel
  2429  000C24  4603               	rlncf	??_ADC1_SelectChannel^0,f,c
  2430  000C26  4603               	rlncf	??_ADC1_SelectChannel^0,f,c
  2431  000C28  50C2               	movf	194,w,c	;volatile
  2432  000C2A  1803               	xorwf	??_ADC1_SelectChannel^0,w,c
  2433  000C2C  0BC3               	andlw	-61
  2434  000C2E  1803               	xorwf	??_ADC1_SelectChannel^0,w,c
  2435  000C30  6EC2               	movwf	194,c	;volatile
  2436  000C32                     
  2437                           ;mcc_generated_files/adc1.c: 93:     ADCON0bits.ADON = 1;
  2438  000C32  80C2               	bsf	194,0,c	;volatile
  2439  000C34  0012               	return		;funcret
  2440  000C36                     __end_of_ADC1_SelectChannel:
  2441                           	callstack 0
  2442                           
  2443 ;; *************** function _ADC1_GetConversion *****************
  2444 ;; Defined at:
  2445 ;;		line 115 in file "mcc_generated_files/adc1.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  channel         1    wreg     enum E2449
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  channel         1    6[COMRAM] enum E2449
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  2    2[COMRAM] unsigned short 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1
  2459 ;;      Params:         2       0       0
  2460 ;;      Locals:         1       0       0
  2461 ;;      Temps:          2       0       0
  2462 ;;      Totals:         5       0       0
  2463 ;;Total ram usage:        5 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    3
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_main
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text16
  2474  000B18                     __ptext16:
  2475                           	callstack 0
  2476  000B18                     _ADC1_GetConversion:
  2477                           	callstack 27
  2478                           
  2479                           ;incstack = 0
  2480                           ;ADC1_GetConversion@channel stored from wreg
  2481  000B18  6E07               	movwf	ADC1_GetConversion@channel^0,c
  2482  000B1A                     
  2483                           ;mcc_generated_files/adc1.c: 115: adc_result_t ADC1_GetConversion(adc_channel_t channel)
      +                          ;mcc_generated_files/adc1.c: 116: {;mcc_generated_files/adc1.c: 118:     ADCON0bits.CHS 
      +                          = channel;
  2484  000B1A  C007  F005         	movff	ADC1_GetConversion@channel,??_ADC1_GetConversion
  2485  000B1E  4605               	rlncf	??_ADC1_GetConversion^0,f,c
  2486  000B20  4605               	rlncf	??_ADC1_GetConversion^0,f,c
  2487  000B22  50C2               	movf	194,w,c	;volatile
  2488  000B24  1805               	xorwf	??_ADC1_GetConversion^0,w,c
  2489  000B26  0BC3               	andlw	-61
  2490  000B28  1805               	xorwf	??_ADC1_GetConversion^0,w,c
  2491  000B2A  6EC2               	movwf	194,c	;volatile
  2492  000B2C                     
  2493                           ;mcc_generated_files/adc1.c: 121:     ADCON0bits.ADON = 1;
  2494  000B2C  80C2               	bsf	194,0,c	;volatile
  2495  000B2E                     
  2496                           ;mcc_generated_files/adc1.c: 124:     ADCON0bits.GO_nDONE = 1;
  2497  000B2E  82C2               	bsf	194,1,c	;volatile
  2498  000B30                     l92:
  2499                           
  2500                           ;mcc_generated_files/adc1.c: 127:     while (ADCON0bits.GO_nDONE)
  2501  000B30  B2C2               	btfsc	194,1,c	;volatile
  2502  000B32  EF9D  F005         	goto	u671
  2503  000B36  EF9F  F005         	goto	u670
  2504  000B3A                     u671:
  2505  000B3A  EF98  F005         	goto	l92
  2506  000B3E                     u670:
  2507  000B3E                     
  2508                           ;mcc_generated_files/adc1.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  2509  000B3E  50C4               	movf	196,w,c	;volatile
  2510  000B40  6E06               	movwf	(??_ADC1_GetConversion+1)^0,c
  2511  000B42  6A05               	clrf	??_ADC1_GetConversion^0,c
  2512  000B44  50C3               	movf	195,w,c	;volatile
  2513  000B46  2405               	addwf	??_ADC1_GetConversion^0,w,c
  2514  000B48  6E03               	movwf	?_ADC1_GetConversion^0,c
  2515  000B4A  0E00               	movlw	0
  2516  000B4C  2006               	addwfc	(??_ADC1_GetConversion+1)^0,w,c
  2517  000B4E  6E04               	movwf	(?_ADC1_GetConversion+1)^0,c
  2518  000B50  0012               	return		;funcret
  2519  000B52                     __end_of_ADC1_GetConversion:
  2520                           	callstack 0
  2521                           
  2522 ;; *************** function _INTERRUPT_InterruptManager *****************
  2523 ;; Defined at:
  2524 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1
  2538 ;;      Params:         0       0       0
  2539 ;;      Locals:         0       0       0
  2540 ;;      Temps:          2       0       0
  2541 ;;      Totals:         2       0       0
  2542 ;;Total ram usage:        2 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    2
  2545 ;; This function calls:
  2546 ;;		_ADC1_ISR
  2547 ;; This function is called by:
  2548 ;;		Interrupt level 2
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	intcode
  2553  000008                     __pintcode:
  2554                           	callstack 0
  2555  000008                     _INTERRUPT_InterruptManager:
  2556                           	callstack 23
  2557                           
  2558                           ;incstack = 0
  2559  000008  8242               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2560  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
  2561  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2562  000012                     
  2563                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.PEIE == 1)
  2564  000012  ACF2               	btfss	242,6,c	;volatile
  2565  000014  EF0E  F000         	goto	i2u31_41
  2566  000018  EF10  F000         	goto	i2u31_40
  2567  00001C                     i2u31_41:
  2568  00001C  EF20  F000         	goto	i2l130
  2569  000020                     i2u31_40:
  2570  000020                     
  2571                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  2572  000020  AC9D               	btfss	157,6,c	;volatile
  2573  000022  EF15  F000         	goto	i2u32_41
  2574  000026  EF17  F000         	goto	i2u32_40
  2575  00002A                     i2u32_41:
  2576  00002A  EF20  F000         	goto	i2l130
  2577  00002E                     i2u32_40:
  2578  00002E  AC9E               	btfss	158,6,c	;volatile
  2579  000030  EF1C  F000         	goto	i2u33_41
  2580  000034  EF1E  F000         	goto	i2u33_40
  2581  000038                     i2u33_41:
  2582  000038  EF20  F000         	goto	i2l130
  2583  00003C                     i2u33_40:
  2584  00003C                     
  2585                           ;mcc_generated_files/interrupt_manager.c: 64:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 65:             ADC1_ISR();
  2586  00003C  ECA9  F005         	call	_ADC1_ISR	;wreg free
  2587  000040                     i2l130:
  2588  000040  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2589  000044  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2590  000048  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2591  00004A  0011               	retfie		f
  2592  00004C                     __end_of_INTERRUPT_InterruptManager:
  2593                           	callstack 0
  2594                           
  2595 ;; *************** function _ADC1_ISR *****************
  2596 ;; Defined at:
  2597 ;;		line 140 in file "mcc_generated_files/adc1.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;		None
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1
  2611 ;;      Params:         0       0       0
  2612 ;;      Locals:         0       0       0
  2613 ;;      Temps:          0       0       0
  2614 ;;      Totals:         0       0       0
  2615 ;;Total ram usage:        0 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    1
  2618 ;; This function calls:
  2619 ;;		Absolute function
  2620 ;;		_ADC1_DefaultInterruptHandler
  2621 ;; This function is called by:
  2622 ;;		_INTERRUPT_InterruptManager
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text18
  2627  000B52                     __ptext18:
  2628                           	callstack 0
  2629  000B52                     _ADC1_ISR:
  2630                           	callstack 23
  2631  000B52                     
  2632                           ;mcc_generated_files/adc1.c: 143:     PIR1bits.ADIF = 0;
  2633  000B52  9C9E               	bcf	158,6,c	;volatile
  2634  000B54                     
  2635                           ;mcc_generated_files/adc1.c: 145:  if(ADC1_InterruptHandler)
  2636  000B54  5040               	movf	_ADC1_InterruptHandler^0,w,c
  2637  000B56  1041               	iorwf	(_ADC1_InterruptHandler+1)^0,w,c
  2638  000B58  B4D8               	btfsc	status,2,c
  2639  000B5A  EFB1  F005         	goto	i2u21_41
  2640  000B5E  EFB3  F005         	goto	i2u21_40
  2641  000B62                     i2u21_41:
  2642  000B62  EFC0  F005         	goto	i2l102
  2643  000B66                     i2u21_40:
  2644  000B66                     
  2645                           ;mcc_generated_files/adc1.c: 146:     {;mcc_generated_files/adc1.c: 147:         ADC1_In
      +                          terruptHandler();
  2646  000B66  D802               	call	i2u22_48
  2647  000B68  EFC0  F005         	goto	i2u22_49
  2648  000B6C                     i2u22_48:
  2649  000B6C  0005               	push	
  2650  000B6E  6EFA               	movwf	pclath,c
  2651  000B70  5040               	movf	_ADC1_InterruptHandler^0,w,c
  2652  000B72  6EFD               	movwf	tosl,c
  2653  000B74  5041               	movf	(_ADC1_InterruptHandler+1)^0,w,c
  2654  000B76  6EFE               	movwf	tosh,c
  2655  000B78  50F8               	movf	tblptru,w,c
  2656  000B7A  6EFF               	movwf	tosu,c
  2657  000B7C  50FA               	movf	pclath,w,c
  2658  000B7E  0012               	return		;indir
  2659  000B80                     i2u22_49:
  2660  000B80                     i2l102:
  2661  000B80  0012               	return		;funcret
  2662  000B82                     __end_of_ADC1_ISR:
  2663                           	callstack 0
  2664                           
  2665 ;; *************** function _ADC1_DefaultInterruptHandler *****************
  2666 ;; Defined at:
  2667 ;;		line 155 in file "mcc_generated_files/adc1.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		None
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1
  2681 ;;      Params:         0       0       0
  2682 ;;      Locals:         0       0       0
  2683 ;;      Temps:          0       0       0
  2684 ;;      Totals:         0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_ADC1_Initialize
  2691 ;;		_ADC1_ISR
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text19
  2696  000C72                     __ptext19:
  2697                           	callstack 0
  2698  000C72                     _ADC1_DefaultInterruptHandler:
  2699                           	callstack 23
  2700  000C72  0012               	return		;funcret
  2701  000C74                     __end_of_ADC1_DefaultInterruptHandler:
  2702                           	callstack 0
  2703                           
  2704                           	psect	text20
  2705  000000                     __ptext20:
  2706                           	callstack 0
  2707  000000                     
  2708                           	psect	rparam
  2709  0000                     
  2710                           	psect	temp
  2711  000042                     btemp:
  2712                           	callstack 0
  2713  000042                     	ds	1
  2714  0000                     int$flags	set	btemp
  2715  0000                     wtemp8	set	btemp+1
  2716  0000                     ttemp5	set	btemp+1
  2717  0000                     ttemp6	set	btemp+4
  2718  0000                     ttemp7	set	btemp+8
  2719                           
  2720                           	psect	idloc
  2721                           
  2722                           ;Config register IDLOC0 @ 0x200000
  2723                           ;	unspecified, using default values
  2724  200000                     	org	2097152
  2725  200000  FF                 	db	255
  2726                           
  2727                           ;Config register IDLOC1 @ 0x200001
  2728                           ;	unspecified, using default values
  2729  200001                     	org	2097153
  2730  200001  FF                 	db	255
  2731                           
  2732                           ;Config register IDLOC2 @ 0x200002
  2733                           ;	unspecified, using default values
  2734  200002                     	org	2097154
  2735  200002  FF                 	db	255
  2736                           
  2737                           ;Config register IDLOC3 @ 0x200003
  2738                           ;	unspecified, using default values
  2739  200003                     	org	2097155
  2740  200003  FF                 	db	255
  2741                           
  2742                           ;Config register IDLOC4 @ 0x200004
  2743                           ;	unspecified, using default values
  2744  200004                     	org	2097156
  2745  200004  FF                 	db	255
  2746                           
  2747                           ;Config register IDLOC5 @ 0x200005
  2748                           ;	unspecified, using default values
  2749  200005                     	org	2097157
  2750  200005  FF                 	db	255
  2751                           
  2752                           ;Config register IDLOC6 @ 0x200006
  2753                           ;	unspecified, using default values
  2754  200006                     	org	2097158
  2755  200006  FF                 	db	255
  2756                           
  2757                           ;Config register IDLOC7 @ 0x200007
  2758                           ;	unspecified, using default values
  2759  200007                     	org	2097159
  2760  200007  FF                 	db	255
  2761                           
  2762                           	psect	config
  2763                           
  2764                           ; Padding undefined space
  2765  300000                     	org	3145728
  2766  300000  FF                 	db	255
  2767                           
  2768                           ;Config register CONFIG1H @ 0x300001
  2769                           ;	Oscillator Selection bits
  2770                           ;	FOSC = IRC, Internal RC oscillator
  2771                           ;	4 X PLL Enable bit
  2772                           ;	PLLEN = OFF, PLL is under software control
  2773                           ;	Primary Clock Enable bit
  2774                           ;	PCLKEN = ON, Primary clock enabled
  2775                           ;	Fail-Safe Clock Monitor Enable
  2776                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2777                           ;	Internal/External Oscillator Switchover bit
  2778                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2779  300001                     	org	3145729
  2780  300001  28                 	db	40
  2781                           
  2782                           ;Config register CONFIG2L @ 0x300002
  2783                           ;	Power-up Timer Enable bit
  2784                           ;	PWRTEN = OFF, PWRT disabled
  2785                           ;	Brown-out Reset Enable bits
  2786                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2787                           ;	Brown Out Reset Voltage bits
  2788                           ;	BORV = 19, VBOR set to 1.9 V nominal
  2789  300002                     	org	3145730
  2790  300002  1F                 	db	31
  2791                           
  2792                           ;Config register CONFIG2H @ 0x300003
  2793                           ;	Watchdog Timer Enable bit
  2794                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  2795                           ;	Watchdog Timer Postscale Select bits
  2796                           ;	WDTPS = 32768, 1:32768
  2797  300003                     	org	3145731
  2798  300003  1E                 	db	30
  2799                           
  2800                           ; Padding undefined space
  2801  300004                     	org	3145732
  2802  300004  FF                 	db	255
  2803                           
  2804                           ;Config register CONFIG3H @ 0x300005
  2805                           ;	HFINTOSC Fast Start-up bit
  2806                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
  2807                           ;	MCLR Pin Enable bit
  2808                           ;	MCLRE = ON, MCLR pin enabled, RA3 input pin disabled
  2809  300005                     	org	3145733
  2810  300005  80                 	db	128
  2811                           
  2812                           ;Config register CONFIG4L @ 0x300006
  2813                           ;	Stack Full/Underflow Reset Enable bit
  2814                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2815                           ;	Single-Supply ICSP Enable bit
  2816                           ;	LVP = OFF, Single-Supply ICSP disabled
  2817                           ;	Boot Block Size Select bit
  2818                           ;	BBSIZ = OFF, 1kW boot block size
  2819                           ;	Extended Instruction Set Enable bit
  2820                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2821                           ;	Background Debugger Enable bit
  2822                           ;	DEBUG = OFF, Background debugger disabled, RA0 and RA1 configured as general purpose I
      +                          /O pins
  2823  300006                     	org	3145734
  2824  300006  81                 	db	129
  2825                           
  2826                           ; Padding undefined space
  2827  300007                     	org	3145735
  2828  300007  FF                 	db	255
  2829                           
  2830                           ;Config register CONFIG5L @ 0x300008
  2831                           ;	Code Protection bit
  2832                           ;	CP0 = OFF, Block 0 not code-protected
  2833                           ;	Code Protection bit
  2834                           ;	CP1 = OFF, Block 1 not code-protected
  2835  300008                     	org	3145736
  2836  300008  03                 	db	3
  2837                           
  2838                           ;Config register CONFIG5H @ 0x300009
  2839                           ;	Boot Block Code Protection bit
  2840                           ;	CPB = OFF, Boot block not code-protected
  2841                           ;	Data EEPROM Code Protection bit
  2842                           ;	CPD = OFF, Data EEPROM not code-protected
  2843  300009                     	org	3145737
  2844  300009  C0                 	db	192
  2845                           
  2846                           ;Config register CONFIG6L @ 0x30000A
  2847                           ;	Write Protection bit
  2848                           ;	WRT0 = OFF, Block 0 not write-protected
  2849                           ;	Write Protection bit
  2850                           ;	WRT1 = OFF, Block 1 not write-protected
  2851  30000A                     	org	3145738
  2852  30000A  03                 	db	3
  2853                           
  2854                           ;Config register CONFIG6H @ 0x30000B
  2855                           ;	Configuration Register Write Protection bit
  2856                           ;	WRTC = OFF, Configuration registers not write-protected
  2857                           ;	Boot Block Write Protection bit
  2858                           ;	WRTB = OFF, Boot block not write-protected
  2859                           ;	Data EEPROM Write Protection bit
  2860                           ;	WRTD = OFF, Data EEPROM not write-protected
  2861  30000B                     	org	3145739
  2862  30000B  E0                 	db	224
  2863                           
  2864                           ;Config register CONFIG7L @ 0x30000C
  2865                           ;	Table Read Protection bit
  2866                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  2867                           ;	Table Read Protection bit
  2868                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  2869  30000C                     	org	3145740
  2870  30000C  03                 	db	3
  2871                           
  2872                           ;Config register CONFIG7H @ 0x30000D
  2873                           ;	Boot Block Table Read Protection bit
  2874                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  2875  30000D                     	org	3145741
  2876  30000D  40                 	db	64
  2877                           tosu	equ	0xFFF
  2878                           tosh	equ	0xFFE
  2879                           tosl	equ	0xFFD
  2880                           stkptr	equ	0xFFC
  2881                           pclatu	equ	0xFFB
  2882                           pclath	equ	0xFFA
  2883                           pcl	equ	0xFF9
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           prodh	equ	0xFF4
  2889                           prodl	equ	0xFF3
  2890                           indf0	equ	0xFEF
  2891                           postinc0	equ	0xFEE
  2892                           postdec0	equ	0xFED
  2893                           preinc0	equ	0xFEC
  2894                           plusw0	equ	0xFEB
  2895                           fsr0h	equ	0xFEA
  2896                           fsr0l	equ	0xFE9
  2897                           wreg	equ	0xFE8
  2898                           indf1	equ	0xFE7
  2899                           postinc1	equ	0xFE6
  2900                           postdec1	equ	0xFE5
  2901                           preinc1	equ	0xFE4
  2902                           plusw1	equ	0xFE3
  2903                           fsr1h	equ	0xFE2
  2904                           fsr1l	equ	0xFE1
  2905                           bsr	equ	0xFE0
  2906                           indf2	equ	0xFDF
  2907                           postinc2	equ	0xFDE
  2908                           postdec2	equ	0xFDD
  2909                           preinc2	equ	0xFDC
  2910                           plusw2	equ	0xFDB
  2911                           fsr2h	equ	0xFDA
  2912                           fsr2l	equ	0xFD9
  2913                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    84
    Data        0
    BSS         0
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     63      65
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    ADC1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC1_DefaultInterruptHandler(), 

    ADC1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ADC1_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_WSSlow
    _WSWalk->_WS_dim
    _WSTest->_WS_RYGCBM
    _WSSlow->_WS_RYGCBM
    _WS_RYGCBM->_WS_dim
    _WS_dim->_WS_Word
    _WS_Word->_WS_Write
    _ADC1_Initialize->_ADC1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   57988
                                             56 COMRAM     7     7      0
                 _ADC1_GetConversion
                    _ADC1_Initialize
                 _ADC1_SelectChannel
                  _SYSTEM_Initialize
                             _WSSlow
                             _WSTest
                             _WSWalk
 ---------------------------------------------------------------------------------
 (1) _WSWalk                                              18    14      4   16012
                                             34 COMRAM    18    14      4
                             _WS_dim
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _WSTest                                               8     4      4   25362
                                             45 COMRAM     8     4      4
                          _WS_RYGCBM
                            _WS_Word
 ---------------------------------------------------------------------------------
 (1) _WSSlow                                              11     5      6   16242
                                             45 COMRAM    11     5      6
                          _WS_RYGCBM
 ---------------------------------------------------------------------------------
 (2) _WS_RYGCBM                                           11     7      4   15790
                                             34 COMRAM    11     7      4
                             _WS_dim
 ---------------------------------------------------------------------------------
 (2) _WS_dim                                              11     3      8   14709
                                             23 COMRAM    11     3      8
                            _WS_Word
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _WS_Word                                             19    13      6    9330
                                              4 COMRAM    19    13      6
                           _WS_Write
 ---------------------------------------------------------------------------------
 (4) _WS_Write                                             2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0      98
           _ADC1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _ADC1_SetInterruptHandler                             2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC1_SelectChannel                                   2     2      0      15
                                              2 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC1_GetConversion                                   5     3      2      22
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           2     2      0       0
                                              0 COMRAM     2     2      0
                           _ADC1_ISR
 ---------------------------------------------------------------------------------
 (7) _ADC1_ISR                                             0     0      0       0
                   Absolute function *
       _ADC1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _ADC1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC1_GetConversion
   _ADC1_Initialize
     _ADC1_SetInterruptHandler
   _ADC1_SelectChannel
   _SYSTEM_Initialize
     _ADC1_Initialize
       _ADC1_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _WSSlow
     _WS_RYGCBM
       _WS_dim
         _WS_Word
           _WS_Write
         ___wmul
   _WSTest
     _WS_RYGCBM
       _WS_dim
         _WS_Word
           _WS_Write
         ___wmul
     _WS_Word
       _WS_Write
   _WSWalk
     _WS_dim
       _WS_Word
         _WS_Write
       ___wmul
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _ADC1_ISR
     Absolute function(Fake) *
     _ADC1_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     3F      41       1       69.1%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
ABS                  0      0      41       7        0.0%
BIGRAM             1FF      0       0       8        0.0%
DATA                 0      0      41       9        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Dec 08 01:07:16 2020

                                      l20 0C62                                        l17 0C46  
                                      l47 0BAC                                        l80 0C34  
                                      l92 0B30                                        l77 0C1C  
                                      l95 0B50                       ___wmul@multiplicand 0005  
              __end_of_ADC1_GetConversion 0B52                                       l200 0B16  
                                     l105 0C6C                                       l121 0C70  
                                     l212 06CC                                       l151 0964  
                                     l152 098E                                       l170 0BF8  
                                     l154 09D4                                       l260 06E6  
                                     l165 0918                                       l262 0760  
                                     l175 0A28                                       l168 0BF4  
                                     l264 0762                                       l194 0524  
                                     l179 0A7C                                       l276 0BD2  
                                     _GIE 007F97                                       u510 0874  
                                     u511 0870                                       u504 0846  
                                     u600 03B0                                       u505 0840  
                                     u601 03AC                                       u530 08B8  
                                     u610 03F0                                       u531 08B4  
                                     u611 03EC                                       u524 0898  
                                     u620 0432                                       u700 0AC8  
                                     u525 0892                                       u621 042E  
                                     u701 0AC4                                       u550 0918  
                                     u630 0472                                       u710 0554  
                                     u551 0914                                       u631 046E  
                                     u711 0550                                       u480 0BE6  
                                     u544 08D8                                       u560 0958  
                                     u640 04B4                                       u720 0630  
                                     u481 0BE2                                       u545 08D2  
                                     u561 0954                                       u641 04B0  
                                     u721 062C                                       u490 0822  
                                     u570 0982                                       u650 04F4  
                                     u730 0654                                       u491 081E  
                                     u571 097E                                       u651 04F0  
                                     u731 0650                                       u580 09AC  
                                     u660 0516                                       u740 0672  
                                     u581 09A8                                       u661 0512  
                                     u741 066E                                       u670 0B3E  
                                     u590 036E                                       u750 06CC  
                                     u671 0B3A                                       u591 036A  
                                     u751 06C8                                       u680 0A28  
                                     u840 071A                                       u681 0A24  
                                     u841 0716                                       u690 0A7C  
                                     u850 0738                                       u691 0A78  
                                     u907 073E                                       u851 0734  
                                     u835 06F0                                       u860 0756  
                                     u917 0678                                       u861 0752  
                                     u870 0776                                       u927 068A  
                                     u871 0772                                       u880 07A0  
                                     u937 06A0                                       u881 079C  
                                     u890 07D4                                       u947 0ACE  
                                     u891 07D0                                       u957 0AE0  
                                     u967 0B0A                                       u977 09FC  
                                     u987 0A4E                                       u997 051C  
                                     tosl 000FFD                                       wreg 000FE8  
                _ADC1_SetInterruptHandler 0C64                                      l1001 0C6E  
                                    l1003 0B82                                      l1005 0BAA  
                                    l1007 0C56                                      l1401 0372  
                                    l1083 0C20                                      l1411 03D4  
                                    l1403 0394                                      l1085 0C32  
                                    l1421 041A                                      l1413 03D8  
                                    l1405 0398                                      l1501 0B00  
                                    l1335 0BD4                                      l1351 0874  
                                    l1511 053A                                      l1503 0526  
                                    l1337 0BE6                                      l1353 08AA  
                                    l1361 08F2                                      l1345 0806  
                                    l1441 04B8                                      l1433 0476  
                                    l1425 0436                                      l1417 03F4  
                                    l1409 03B4                                      l1521 055C  
                                    l1363 08FE                                      l1355 08B8  
                                    l1347 0822                                      l1339 07FE  
                                    l1443 04D8                                      l1435 0498  
                                    l1427 0456                                      l1419 0416  
                                    l1451 0516                                      l1531 0634  
                                    l1523 05F0                                      l1461 0B1A  
                                    l1373 0C64                                      l1453 0C36  
                                    l1365 0904                                      l1357 08C0  
                                    l1349 0858                                      l1381 0982  
                                    l1445 04DC                                      l1437 049C  
                                    l1429 045A                                      l1533 0638  
                                    l1525 0614                                      l1517 0542  
                                    l1509 052E                                      l1463 0B2C  
                                    l1391 0C10                                      l1455 0C3A  
                                    l1359 08EA                                      l1367 0BAE  
                                    l1383 09AC                                      l1375 091A  
                                    l1471 09D6                                      l1527 0618  
                                    l1519 0554                                      l1535 0654  
                                    l1465 0B2E                                      l1457 0C3E  
                                    l1369 0BCA                                      l1385 09B8  
                                    l1377 093A                                      l1449 04F8  
                                    l1393 0256                                      l1481 0A34  
                                    l1473 09E2                                      l1537 0672  
                                    l1641 06CE                                      l1467 0B3E  
                                    l1387 0BFA                                      l1459 0C42  
                                    l1379 0958                                      l1395 026A  
                                    l1483 0A48                                      l1475 09F6  
                                    l1491 0A8A                                      l1539 06AC  
                                    l1651 071A                                      l1643 06D2  
                                    l1389 0C0E                                      l1397 0330  
                                    l1485 0A58                                      l1477 0A06  
                                    l1493 0AA6                                      l1661 0756  
                                    l1653 0722                                      l1645 06DE  
                                    l1399 0338                                      l1487 0A5E  
                                    l1479 0A0A                                      l1495 0AAA  
                                    l1671 07A0                                      l1663 0758  
                                    l1655 072A                                      l1647 06DE  
                                    l1497 0AC8                                      l1489 0A7E  
                                    l1673 07C0                                      l1665 0764  
                                    l1657 0738                                      l1649 0704  
                                    l1499 0AEC                                      l1675 07D4  
                                    l1667 0776                                      l1659 0748  
                                    l1677 07EC                                      l1669 078E  
                                    l1679 07F4                          __end_of_ADC1_ISR 0B82  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _WPUA 000F77  
                                    _WPUB 000F78                 ADC1_SelectChannel@channel 0004  
                                    _main 06CE                                      btemp 0042  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 004C                           __end_of_WS_Word 091A  
                            ___param_bank 000000            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 0C64                                     ?_main 0001  
                                   _ANSEL 000F7E                                     i2l102 0B80  
                                   i2l130 0040                                     i2l108 0C72  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     main@i 003E  
                                   pclath 000FFA                                     tablat 000FF5  
                                   ttemp5 0043                                     ttemp6 0046  
                                   ttemp7 004A                                     status 000FD8  
                                   wtemp8 0043                          WS_dim@brightness 001E  
                         __initialization 0C48                          __end_of_WS_Write 0BFA  
                            __end_of_main 07FE               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 0039                        __size_of_WS_RYGCBM 02D0  
                           __activetblptr 000002                               _WSWalk$1464 0029  
                             _WSWalk$1465 002B                               _WSWalk$1466 002D  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _ANSELH 000F7F  
                                  i2l1101 0B66                                    i2l1191 002E  
                                  i2l1097 0B52                                    i2l1193 003C  
                                  i2l1099 0B54                                    i2l1187 0012  
                                  i2l1189 0020                        _ADC1_SelectChannel 0C1E  
                                  _OSCCON 000FD3                                 ??_WS_Word 000B  
                                  _WSWalk 0526                                    _WSTest 0A7E  
                                  _WSSlow 09D6                                    _WS_dim 091A  
                        WSTest@brightness 0030                       ?_ADC1_SelectChannel 0001  
                                  ___wmul 0BAE                                 ?_ADC1_ISR 0001  
                __size_of_ADC1_Initialize 0024                      ??_ADC1_SelectChannel 0003  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
ADC1_SetInterruptHandler@InterruptHandler 0003             __size_of_INTERRUPT_Initialize 0004  
                       _SYSTEM_Initialize 0C36           fp__ADC1_DefaultInterruptHandler 0000  
           ?_ADC1_DefaultInterruptHandler 0001                                __accesstop 0060  
                 __end_of__initialization 0C48                         __end_of_WS_RYGCBM 0526  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                          __pcstackCOMRAM 0001                         __end_of_ColorSetB 0255  
                     ??_SYSTEM_Initialize 0005                                ??_ADC1_ISR 0001  
              ??_ADC1_SetInterruptHandler 0005                 __end_of_SYSTEM_Initialize 0C48  
                               ?_WS_Write 0003                        _ADC1_GetConversion 0B18  
                              __pnvCOMRAM 0040                                   ?_WSWalk 0023  
                                 ?_WSTest 002E                                   ?_WSSlow 002E  
                     ?_ADC1_GetConversion 0003                                   ?_WS_dim 0018  
                          main@brightness 003A                                   ?___wmul 0003  
                    ??_ADC1_GetConversion 0005                                   _OSCCON2 000FD2  
                                 i2u21_40 0B66                                   i2u21_41 0B62  
                                 i2u22_48 0B6C                                   i2u31_40 0020  
                                 i2u22_49 0B80                                   i2u31_41 001C  
                                 i2u32_40 002E                                   i2u32_41 002A  
                                 i2u33_40 003C                                   i2u33_41 0038  
                                 _OSCTUNE 000F9B                                   WSWalk@a 0031  
                                 WSWalk@b 002F                                   WSWalk@i 0033  
                       ??_ADC1_Initialize 0005                                   WSTest@i 0034  
                                 WSSlow@i 0035                                   WS_dim@A 0018  
                                 WS_dim@B 001A                                   WS_dim@C 001C  
                                 WS_dim@f 0021                                ??_WS_Write 0005  
                                 _WS_Word 07FE                           __size_of_WSWalk 01A8  
                         __size_of_WSTest 009A                           __size_of_WSSlow 00A8  
                                 __Hparam 0000            ??_ADC1_DefaultInterruptHandler 0001  
                         __size_of_WS_dim 00BC                                   __Lparam 0000  
                         __size_of___wmul 0026                              __psmallconst 0200  
                                 __pcinit 0C48                                   __ramtop 0200  
                                 __ptext0 06CE                                   __ptext1 0526  
                                 __ptext2 0A7E                                   __ptext3 09D6  
                                 __ptext4 0256                                   __ptext5 091A  
                                 __ptext6 0BAE                                   __ptext7 07FE  
                                 __ptext8 0BD4                                   __ptext9 0C36  
                   _OSCILLATOR_Initialize 0C56                           WS_RYGCBM@length 0023  
                ??_PIN_MANAGER_Initialize 0003                __size_of_SYSTEM_Initialize 0012  
                                 main@tmp 003C                      end_of_initialization 0C48  
                           __Lmediumconst 0000     __end_of_ColorSetB@BitBangWS2812b$F789 022B  
           _ColorSetB@BitBangWS2812b$F789 0201                     _ADC1_InterruptHandler 0040  
                               _PORTAbits 000F80                         __size_of_ADC1_ISR 0030  
                               WS_Word@Bx 0014                                 WS_Write@A 0003  
               ADC1_GetConversion@channel 0007                            __end_of_WSWalk 06CE  
                          __end_of_WSTest 0B18                            __end_of_WSSlow 0A7E  
                               _WS_RYGCBM 0256                            __end_of_WS_dim 09D6  
            __end_of_INTERRUPT_Initialize 0C72                            __end_of___wmul 0BD4  
                               _ColorSetB 022B                    ?_OSCILLATOR_Initialize 0001  
                     start_initialization 0C48               __size_of_ADC1_SelectChannel 0018  
         __size_of_PIN_MANAGER_Initialize 002C                         __size_of_WS_Write 0026  
                                ??_WSWalk 0027                                  ??_WSTest 0032  
                                ??_WSSlow 0034                                  ??_WS_dim 0020  
                              ?_WS_RYGCBM 0023                                  ??___wmul 0007  
                         _ADC1_Initialize 0BFA         __size_of_ADC1_SetInterruptHandler 000A  
               ?_ADC1_SetInterruptHandler 0003                                  ?_WS_Word 0005  
                  _PIN_MANAGER_Initialize 0B82                                 __pintcode 0008  
                                _ADC1_ISR 0B52              ??_INTERRUPT_InterruptManager 0001  
                        WSWalk@brightness 0025                               __smallconst 0200  
             __size_of_ADC1_GetConversion 003A                      _INTERRUPT_Initialize 0C6E  
                          ___wmul@product 0007                                  _LATAbits 000F89  
                                _LATCbits 000F8B                                  _PIE1bits 000F9D  
     __size_of_INTERRUPT_InterruptManager 0044                   __end_of_ADC1_Initialize 0C1E  
                                _PIR1bits 000F9E                               ??_WS_RYGCBM 0027  
                                _RCONbits 000FD0                                  WS_Word@A 0005  
                                WS_Word@B 0007                                  WS_Word@C 0009  
                                WS_Word@i 0016                                  WS_Word@x 000E  
                     WSSlow@maxBrightness 0030                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0003      __end_of_ADC1_DefaultInterruptHandler 0C74  
   __size_of_ADC1_DefaultInterruptHandler 0002              _ADC1_DefaultInterruptHandler 0C72  
                             _INTCON2bits 000FF1                     ?_INTERRUPT_Initialize 0001  
                                _WS_Write 0BD4                          __size_of_WS_Word 011C  
                                __Hrparam 0000                                  __Lrparam 0000  
                     WS_RYGCBM@brightness 0025                   ??_OSCILLATOR_Initialize 0003  
                                __ptext10 0B82                                  __ptext11 0C56  
                                __ptext20 0000                                  __ptext12 0C6E  
                                __ptext13 0BFA                                  __ptext14 0C64  
                                __ptext15 0C1E                                  __ptext16 0B18  
                                __ptext18 0B52                                  __ptext19 0C72  
                     WSSlow@minBrightness 0032                             __size_of_main 0130  
                            WSWalk@length 0023                          ?_ADC1_Initialize 0001  
                                int$flags 0042        __end_of_INTERRUPT_InterruptManager 004C  
              _INTERRUPT_InterruptManager 0008                __end_of_ADC1_SelectChannel 0C36  
                            WSTest@length 002E          __end_of_ADC1_SetInterruptHandler 0C6E  
                              _INTCONbits 000FF2                    ??_INTERRUPT_Initialize 0003  
                                intlevel2 0000                                WS_RYGCBM@b 002C  
                 ?_PIN_MANAGER_Initialize 0001                              WS_Word@x_591 0010  
                            WS_Word@x_592 0012                               WSSlow@i_606 0037  
                             WSSlow@lengh 002E            __end_of_PIN_MANAGER_Initialize 0BAE  
